/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-07-10
 * Author: Ks Tan
 * Last Modified By: Yong Xiang
 */
import _ from 'lodash'
import {SchemaType,NotificationStatus} from '~/types'
import * as sharelibs from '../sharelibs'
import jsonpath from 'jsonpath'
import { SimpleAppClient } from "./SimpleAppClient";
import {
  <%Object.keys(it.models).forEach(function(modelname) { %>  Default<%=modelname%>,  <%})%>
} from '../defaults/<%= it.typename%>.default'
import {AxiosResponse} from 'axios'
<%if(it.jsonschema['x-import-lib']) {%>
  <%let libs = it.jsonschema['x-import-lib'] %>
  <%for(let l = 0; l< libs.length; l++) { %>
      import * as <%=libs[l].importAs %> from '<%=libs[l].importFrom %>'
  <%}%>
<%}%>
// import { JSONSchema7 } from 'json-schema';
import * as openapi from '../openapi';

export type {
      <%= it.typename%> ,
      <%Object.keys(it.schema).forEach(function(key){%>              
        <% if(typeof it.schema[key]=='string' || (Array.isArray(it.schema[key]) && typeof it.schema[key][0]=='string' && it.schema[key][0]!='string')){%>
          <%= it.schema[key]  %>,
        <%} else {%>
          /*<%~ key + JSON.stringify(it.schema[key])  %>,*/
        <%} %>
      <%})%>

    } from '../openapi'

export class <%= capitalizeFirstLetter(it.name)%>Client extends SimpleAppClient<openapi.<%= capitalizeFirstLetter(it.name)%>,openapi.<%= it.name.toUpperCase()%>Api>{
  public readonly schema= <%~ JSON.stringify(it.jsonschema) %> as SchemaType;
  protected documentIdentityCode='<%~ it.autocompletecode %>'
  protected documentIdentityName='<%~ it.autocompletename %>'  
  <%if(it.jsonschema['x-simpleapp-config']['generateDocumentNumber']){%>
  protected withDocNumberFormat = true
  <%}%>
  constructor() {    
    const {$event,$listen,$axios}=useNuxtApp()
    let xorg = useRoute().params.xorg
    if(!xorg){
      xorg='MC0wLTA' //0-0-0
    }

    //const apipath = `${useRuntimeConfig().public.API_URL}/${xorg}`    
    //const apiobj = new <%= it.name.toUpperCase()%>Api(undefined,apipath,$axios)
    const apiobj = getDocumentApi('<%=it.name %>')
    super(apiobj,'<%= it.doctype %>','<%=it.name %>')
    this.event=$event
    this.listen=$listen    
    this.setNew();        
  }

  setWatchChange = ()=>{
    this.unwantchobj = watch(this.getData(),(newvalue)=>{
      if(this.completeformula==true){
          this.completeformula=false
          this.reCalculateValue()
          this.completeformula=true
      }               
    },{deep:true})    
  }
  setNew = ()=>{         
      const newdata = Default<%= it.typename%>(randomUUID())
      this.setData(newdata)
      this.setWatchChange()
      return true
    }
  <%if(it.jsonschema.properties['readOnly'] || it.jsonschema.properties['documentStatus']){%>
  public isReadOnly():boolean{      
      <%if(it.jsonschema.properties['readOnly']){%>
        const readonly = this.data.value?.readOnly 
        if(readonly) return true
      <%}%>
      <%if(it.jsonschema.properties['documentStatus']){%>
        const docstatus = this.data.value.documentStatus
        const statussetting = this.schema['x-simpleapp-config'].allStatus?.find((item)=>item.status==docstatus)
        if(statussetting && statussetting.readOnly) return true
      <%}%>      
      return false            
    } 
  <%}%>
<%Object.keys(it.jsonschema.properties).forEach(function(key) { %>
    <% let obj=it.jsonschema.properties[key] %>
    
    <% if(obj.type=='array' &&  obj.items && obj.items.type=='object' && obj.items['properties']){ %>
        <%let tablefields = Object.keys(obj.items.properties) %>
       public add<%=key%> = () => {
        
        this.getReactiveData().value.<%= key %>.push(Default<%= it.typename%><%=capitalizeFirstLetter(key)%>(randomUUID()))
        return this.getReactiveData().value.<%= key %>.length -1
       }
        
          
    <%}%>
  <%})%>
  

  public getActions(){
    const actions =  super.getActions()
    actions.docstatus=[
        <%for(let i=0;i<it.docStatusSettings.length;i++){%>
        <% let setting = it.docStatusSettings[i] %> 
        '<%=setting.statusName%>',
        <%}%> 
    ]
    actions.api=[  
          <%for(let i=0;i<it.apiSettings.length;i++){%>
          <% let api = it.apiSettings[i] %>
          '<%=api.action%>',
          <%}%> 
          ]
    return actions
  }


  /*****************************begin x-document-api code*****************************************/
 
  <%for(let i=0;i<it.apiSettings.length;i++){%>
  <% let api = it.apiSettings[i] %>
  async run<%=capitalizeFirstLetter(api.action)%>(
    <% if(api.entryPoint && api.entryPoint.includes(':')) {%>
      <%let subpath = api.entryPoint.split('/')%>
      <% for(let a=0;a<subpath.length;a++){%>
        <%const partstr = subpath[a]%>
        <%if(partstr.includes(':')){%>
          <% const paraname = partstr.replace(':','') %>  
            <%=paraname%>: string,
        <%}%>    
      <%}%>  
    <%}%>
    <% if(api.queryPara && api.queryPara.length>0) {%>
      <%for(let j=0; j<api.queryPara.length ; j++){%>          
        <%=api.queryPara[j]%>: string,
      <%}%> 
    <%}%>
     

         <% if(['post','put','patch'].includes(api.method)){ %>data:<%=api.schema 
         ?  (api.schema.includes('[') ?  'openapi.'+api.schema.replace('[','').replace(']','') + '[]' : 'openapi.'+api.schema  )
         :'any'%><%}%>  
        ){
    //const recordid: string = this.data.value._id ?? '';
    return await this.docapi.run<%=capitalizeFirstLetter(api.action)%>(
      <% if(api.entryPoint && api.entryPoint.includes(':')) {%>
          <%let subpath = api.entryPoint.split('/')%>
          <% for(let a=0;a<subpath.length;a++){%>
            <%const partstr = subpath[a]%>
            <%if(partstr.includes(':')){%>
              <% const paraname = partstr.replace(':','') %>  
               <%=paraname%>,
            <%}%>    
          <%}%>
        <%}%>
        <% if(['post','put','patch'].includes(api.method)){ %>data<%}%>  
    )
    .then((res) => {
      if(this.event){this.event('info:<%=api.action%>',res.data)}
      return res.data;
    }).catch((res:any)=>{
      if(this.event){this.event('error:<%=api.action%>',res)}
      return Promise.reject(res)
    });
  } 
  <%}%>


  
  reCalculateValue(){
    //console.log('trigger new recalculate')
    const $data = this.getData()
    
    <% if(it.jsonschema['x-simpleapp-config']['formulas']){ %>
      <%Object.keys(it.jsonschema['x-simpleapp-config']['formulas']).forEach(function(index) { %>
        <% let fml = it.jsonschema['x-simpleapp-config']['formulas'][index] %>
        // <%~ JSON.stringify(fml) %>
        //const tmp = jsonpath.query(vdata,fieldpath).filter((item:string)=>item!='')
        
        jsonpath.apply($data, '<%~ fml.jsonPath %>', function($item) { return <%~fml.formula %> });

      <%}) %>
    <%} %>
    /*
    <%Object.keys(it.jsonschema.properties).forEach(function(key) { %>
      <%let obj = it.jsonschema.properties[key]%>
      <%if(obj['x-compute']){%> //x-compute first level field

        data.<%=key%> = <%= obj['x-compute'].function %>( 
          <% if(obj['x-compute'].paramters){ %>
            <% let p = obj['x-compute'].paramters %>
            <%for(let j=0; j<p.length; j++){%>
              <%= p[j].replace('@data','data')  %>,
            <%}%>
          <%}%>
          )
      <%}%>
      <%if(obj.type=='array' && obj.items && obj.items.type=='object'){%> 
        // process compute for 2nd level sub tables
        for(let index=0;index<data.<%=key%>.length;index++){ 
        <%Object.keys(obj.items.properties).forEach(function(subkey) { %>
          <%let subobj = obj.items.properties[subkey]%>
          <%if(subobj['x-compute']){%> 

            data.<%=key%>[index].<%=subkey%> = <%= subobj['x-compute'].function %>( 
              <% if(subobj['x-compute'].paramters){ %>
                <% let subp = subobj['x-compute'].paramters %>
                <%for(let k=0; k<subp.length; k++){%>
                  <%= subp[k].replace('@data','data').replace('@index','index')  %>,
                <%}%>
              <%}%>
              )
          <%}%>

          <% if(subobj.type=='array' && subobj.items && subobj.items.type=='object'){ %> 
            // process compute for 3rd level sub tables
            for(let index2=0;index<data.<%=key%>[index].length;index2++){
            <%Object.keys(subobj.items.properties).forEach(function(sub2key) { %>
              <%let sub2obj = subobj.items.properties[sub2key]%>
              <%if(sub2obj['x-compute']){%> //x-compute 3rd level field
                data.<%=key%>[index].<%=subkey%>[index2].<%=sub2key%> = <%= sub2obj['x-compute'].function %>( 
                  <% if(sub2obj['x-compute'].paramters){ %>
                    <% let sub2p = sub2obj['x-compute'].paramters %>
                    <%for(let l=0; l<sub2p.length; l++){%>
                      <%= sub2p[l].replace('@data','data').replace('@index','index').replace('@index2','index2')  %>,
                    <%}%>
                  <%}%>
                  )
              <%}%>
              <%if(sub2obj.type=='array' && sub2obj.items && sub2obj.items.type=='object'){%> 
                // process compute for 4rd level sub tables
                for(let index3=0;index<data.<%=key%>[index].<%=subkey%>[index2].length;index3++){ 
                <%Object.keys(sub2obj.items.properties).forEach(function(sub3key) { %>
                  <%let sub3obj = sub2obj.items.properties[sub3key]%>
                  <%if(sub3obj['x-compute']){%> //x-compute 4th level field
                    data.<%=key%>[index].<%=subkey%>[index2].<%=sub2key%>.[index3].<%=sub3key%> = <%= sub3obj['x-compute'].function %>( 
                      <% if(sub3obj['x-compute'].paramters){ %>
                        <% let sub3p = sub3obj['x-compute'].paramters %>
                        <%for(let m=0; m<sub3p.length; m++){%>
                          <%= subp[m].replace('@data','data').replace('@index','index').replace('@index2','index2').replace('@index3','index3')  %>,
                        <%}%>
                      <%}%>
                      )
                  <%}%>
                 
                <%})%>
              <%} /* process compute for 4rd level sub tables */%>
            <%})%>
            } 
          <%} // process compute for 3rd level sub tables%>
        <%}) %> 
        } 
      <%} /*process compute for 2nd level sub tables*/%>
    <%}) %> */
  }

  /***************************** end x-document-api code*****************************************/

  /***************************** begin document status code*****************************************/
  <%for(let i=0;i<it.docStatusSettings.length;i++){%>
    <% let setting = it.docStatusSettings[i] %> 
    async setStatus<%=capitalizeFirstLetter(setting.status)%>(id:string='',data:openapi.<%= it.typename%>,runValidate:boolean=false) {
      const {$event} =useNuxtApp()
      if(runValidate){
        const errors = this.validateFailed();
        if (errors) {
          $event('Notification',{
            documentName:this.getDocName(),
            summary:'Record create failed',
            status:NotificationStatus.error,
            data:errors
          })
          // this.event('error:create',errors)
          return await Promise.reject(errors);
        } 
      }
      return await this.docapi.<%=it.name %>ControllerSetStatus<%=capitalizeFirstLetter(setting.status)%>(id,data).then((res)=>{
        $event('Notification',{
          documentName:this.getDocName(),
          summary:t('setStatus<%=capitalizeFirstLetter(setting.status)%>Success'),
          status:NotificationStatus.success
        })
        return res;
      }).catch((errors:any)=>{
        $event('Notification',{
          documentName:this.getDocName(),
          summary:t('setStatus<%=capitalizeFirstLetter(setting.status)%>Failed'),
          status:NotificationStatus.error,
          data:errors.response.data.statusMessage
        })
        console.error('error:<%=capitalizeFirstLetter(setting.status)%>',errors.response.data.statusMessage)
      return Promise.reject(errors)
      })
    }
  <%}%>
  /***************************** end document status code*****************************************/


}
