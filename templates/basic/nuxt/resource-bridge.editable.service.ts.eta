/**
 * This file was automatically generated by simpleapp generator.
 * you may change it, it won't override
 * last change 2025-06-18
 * Author: --
 */

<% 
  const upperFirstCase = (value) => {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }

  const camelToKebab = (value) => {
    return value.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  }

  const pascalName = upperFirstCase(it.resourceName);
  const kebabName = camelToKebab(it.resourceName);
  const apiName = it.typename.toUpperCase() + 'Api';
  const typeActionName = 'MiniApp' + pascalName + 'Actions';

  const miniAppWhitelistApis = it.jsonschema['x-simpleapp-config']?.miniApp?.whitelist || {};
  const hasMiniAppWhitelistedApi = Object.keys(miniAppWhitelistApis).length > 0;
%>

import { MiniApp<%= pascalName %>BridgeService } from "../../../services/resources/<%= kebabName %>-bridge.service";
import type { <%= typeActionName %> } from "../../../services/resources/<%= kebabName %>-bridge.service";
import { MiniAppBridgeMessageApi } from "../../../types/bridge.type";

export class MiniApp<%= pascalName %>BridgeEditableService extends MiniApp<%= pascalName %>BridgeService {
  <% Object.entries(miniAppWhitelistApis).forEach(([action, value]) => { %>
    <% if (value !== true && typeof value !== 'object') { return; } %>

    <% if(action === 'current') { %>
      protected override async handleCurrent(message: MiniAppBridgeMessageApi<<%= typeActionName %>>): Promise<any> {
        return {};
      }
    <% } %>
  <% }) %>
}