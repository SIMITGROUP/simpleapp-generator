/**
 * This file was automatically generated by simpleapp generator.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and regenerate this file.
 * last change 2023-09-23
 * Author: Ks Tan
 */
import { SimpleAppClient } from "./SimpleAppClient";
import {AxiosResponse} from 'axios'
<%if(it.jsonschema['x-import-lib']) {%>
  <%let libs = it.jsonschema['x-import-lib'] %>
  <%for(let l = 0; l< libs.length; l++) { %>
      import * as <%=libs[l].importAs %> from '<%=libs[l].importFrom %>'
  <%}%>
<%}%>
// import { JSONSchema7 } from 'json-schema';
import { Configuration,
      <%= it.doctype.toUpperCase()%>Api, 
      <%= it.typename%> ,      
      <%Object.keys(it.schema).forEach(function(key){%>                   
          <% if(typeof it.schema[key]=='string' || (Array.isArray(it.schema[key]) && typeof it.schema[key][0]=='string' && it.schema[key][0]!='string')){%>
            <%= it.schema[key]  %>,
          <%} else {%>
            /*<%~ key + JSON.stringify(it.schema[key])  %>,*/
          <%} %>
      <%})%>

    } from '../openapi';

export type {
      <%= it.typename%> ,
      <%Object.keys(it.schema).forEach(function(key){%>              
        <% if(typeof it.schema[key]=='string' || (Array.isArray(it.schema[key]) && typeof it.schema[key][0]=='string' && it.schema[key][0]!='string')){%>
          <%= it.schema[key]  %>,
        <%} else {%>
          /*<%~ key + JSON.stringify(it.schema[key])  %>,*/
        <%} %>
      <%})%>

    } from '../openapi'

export class <%= it.typename%>Client extends SimpleAppClient<<%= it.typename%>,<%= it.doctype.toUpperCase()%>Api>{
  public readonly schema= <%~ JSON.stringify(it.jsonschema) %>;
  protected documentIdentityCode='<%~ it.autocompletecode %>'
  protected documentIdentityName='<%~ it.autocompletename %>'  
  constructor() {    
    const {$event,$listen,$axios}=useNuxtApp()
    let xorg = getTenant()
    if(!xorg){
      xorg='MC0wLTA' //0-0-0
    }

    const apiconfig = new Configuration({ basePath:  `${useRuntimeConfig().public.APP_URL}/api/${xorg}` });
    const apiobj = new <%= it.doctype.toUpperCase()%>Api(apiconfig,apiconfig.basePath,$axios)
    super(apiobj,'<%= it.doctype %>','<%=it.name %>')
    this.event=$event
    this.listen=$listen
    
    this.setNew();    
    watch((this.getData()),(newvalue)=>{
      //console.log("Something change",this.completeformula)
      if(this.completeformula==true){
         // console.log("Trigger caclculate")
          this.completeformula=false
          this.reCalculateValue()
          this.completeformula=true
      }else{
          //console.log("avoid unlimited loop")
      }                    
    })    

  }
  setNew = ()=>{
        const { $userstore } = useNuxtApp();
        const defaultTenantId = $userstore ? $userstore().tenantId :0
        
    const newdata =  {
        
        <%Object.keys(it.schema).forEach(function(key){%>      
          <%let field=it.schema[key]%>                
          <%if(key=='tenantId'){ %>
            tenantId : defaultTenantId,
          <% } else if(typeof field.default !='undefined' && field.type=='string'){%> 
            <%=key%> : '<%= field.default  %>',
          <%} else if(typeof field.default !='undefined'){%> 
            <%=key%> : <%= field.default  %>,
          <%} else if(field.type=='boolean' ){%> 
              <%=key%> :false ,
          <%} else if(typeof field=='string'){%>
            <%=key%> : <<%= field  %>>{},          
          <%} else if(field.type=='string'){%>
              <%=key%> : '<%= field.default  %>',
            <%} else if(Array.isArray(field)) {%>
              <%=key%> : <<%=field[0]%>[]>[],  //typeof field == array     <%~JSON.stringify(field)%>    
            <%} else {%>
              <%=key%> : <%=field.default%>,  //else <%= typeof field %>
          <%}%>
        <%})%>
            }
            this.setData(newdata)
    }

<%Object.keys(it.jsonschema.properties).forEach(function(key) { %>
    <% let obj=it.jsonschema.properties[key] %>
    
    <% if(obj.type=='array' && obj.items.type=='object' && obj.items['properties']){ %>
        <%let tablefields = Object.keys(obj.items.properties) %>
       public add<%=key%> = () => {
        const tmp:<%=it.typename%><%=capitalizeFirstLetter(key)%> = {
          <% for(let a=0;a<tablefields.length;a++){%>
              <% const skey =  tablefields[a] %>
              <% const sobj =  obj.items.properties[skey] %>
              <%if(sobj.type=='object'  && typeof sobj['x-foreignkey']!='undefined'){%>
                <%=skey%>: <%~ sobj.default?JSON.stringify(sobj.default): '{_id:"",label:""} as any'%>,
              <%}else if(sobj.type=='boolean'){%>
                  <%=skey%>: <%=sobj.default??false%>,
              <%}else if(sobj.type=='number'){%>
                <%=skey%>: <%=sobj.default??0.00%>,
              <%}else if(sobj.type=='integer'){%>
                <%=skey%>: <%=sobj.default??0%>,
              <%}else if(sobj.type=='string'){%>
                <%=skey%>: '<%=sobj.default??""%>',
              <%}%>

          <%}%>
          }
        this.getReactiveData().value.<%= key %>.push(tmp)
       }
        
          
    <%}%>
  <%})%>
  
  /*****************************x-document-api code*****************************************/

  <%for(let i=0;i<it.apiSettings.length;i++){%>
  <% let api = it.apiSettings[i] %>
  async <%=api.action%>(){
    //const recordid: string = this.data.value._id ?? '';
    return await this.docapi.<%=api.action%>(
      <% if(api.entrypoint.includes(':id')){%>this.getData()._id<%}%>
    )
    .then((res: AxiosResponse) => {
      if(this.event){this.event('info:<%=api.action%>',res.data)}
      return res;
    }).catch((res:any)=>{
      if(this.event){this.event('error:<%=api.action%>',res)}
      return Promise.reject(res)
    });
  } 
  <%}%>


  
  reCalculateValue(){
    console.log('trigger new recalculate')
    const data = this.getData()

    <%Object.keys(it.jsonschema.properties).forEach(function(key) { %>
      <%let obj = it.jsonschema.properties[key]%>
      <%if(obj['x-compute']){%> //x-compute first level field

        data.<%=key%> = <%= obj['x-compute'].function %>( 
          <% if(obj['x-compute'].paramters){ %>
            <% let p = obj['x-compute'].paramters %>
            <%for(let j=0; j<p.length; j++){%>
              <%= p[j].replace('@data','data')  %>,
            <%}%>
          <%}%>
          )
      <%}%>
      <%if(obj.type=='array' && obj.items.type=='object'){%> 
        // process compute for 2nd level sub tables
        for(let index=0;index<data.<%=key%>.length;index++){ 
        <%Object.keys(obj.items.properties).forEach(function(subkey) { %>
          <%let subobj = obj.items.properties[subkey]%>
          <%if(subobj['x-compute']){%> 

            data.<%=key%>[index].<%=subkey%> = <%= subobj['x-compute'].function %>( 
              <% if(subobj['x-compute'].paramters){ %>
                <% let subp = subobj['x-compute'].paramters %>
                <%for(let k=0; k<subp.length; k++){%>
                  <%= subp[k].replace('@data','data').replace('@index','index')  %>,
                <%}%>
              <%}%>
              )
          <%}%>

          <% if(subobj.type=='array' && subobj.items && subobj.items.type=='object'){ %> 
            // process compute for 3rd level sub tables
            for(let index2=0;index<data.<%=key%>[index].length;index2++){
            <%Object.keys(subobj.items.properties).forEach(function(sub2key) { %>
              <%let sub2obj = subobj.items.properties[sub2key]%>
              <%if(sub2obj['x-compute']){%> //x-compute 3rd level field
                data.<%=key%>[index].<%=subkey%>[index2].<%=sub2key%> = <%= sub2obj['x-compute'].function %>( 
                  <% if(sub2obj['x-compute'].paramters){ %>
                    <% let sub2p = sub2obj['x-compute'].paramters %>
                    <%for(let l=0; l<sub2p.length; l++){%>
                      <%= sub2p[l].replace('@data','data').replace('@index','index').replace('@index2','index2')  %>,
                    <%}%>
                  <%}%>
                  )
              <%}%>
              <%if(sub2obj.type=='array' && sub2obj.items && sub2obj.items.type=='object'){%> 
                // process compute for 4rd level sub tables
                for(let index3=0;index<data.<%=key%>[index].<%=subkey%>[index2].length;index3++){ 
                <%Object.keys(sub2obj.items.properties).forEach(function(sub3key) { %>
                  <%let sub3obj = sub2obj.items.properties[sub3key]%>
                  <%if(sub3obj['x-compute']){%> //x-compute 4th level field
                    data.<%=key%>[index].<%=subkey%>[index2].<%=sub2key%>.[index3].<%=sub3key%> = <%= sub3obj['x-compute'].function %>( 
                      <% if(sub3obj['x-compute'].paramters){ %>
                        <% let sub3p = sub3obj['x-compute'].paramters %>
                        <%for(let m=0; m<sub3p.length; m++){%>
                          <%= subp[m].replace('@data','data').replace('@index','index').replace('@index2','index2').replace('@index3','index3')  %>,
                        <%}%>
                      <%}%>
                      )
                  <%}%>
                 
                <%})%>
              <%} /* process compute for 4rd level sub tables */%>
            <%})%>
            } 
          <%} // process compute for 3rd level sub tables%>
        <%}) %> 
        } 
      <%} /*process compute for 2nd level sub tables*/%>
    <%}) %>
  }
}
