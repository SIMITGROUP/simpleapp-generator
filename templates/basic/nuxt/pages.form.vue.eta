<% const skipcolumns = ['_id','createdBy','created','updatedBy','updated','orgId','branchId','tenantId','doctype','docNoFormat'] %>  
<% const getBasicElement = ( inputtype, pathStr, modelValue,subtype=undefined,hidelabel=false,instancepath='') => 
      `<SimpleAppInput :input-type="SimpleAppInputType.${inputtype}"  :setting="o.getField('${pathStr}')" v-model="${modelValue}"`+ 
        (subtype? `type="${subtype}"`:'') +' ' + 
        (hidelabel? ':hidelabel="true"':'') +
        (instancepath ?  `:instancepath="\`${instancepath}\`"` : '') + '/>' %>
<script setup lang="ts">
/**
 * This file was automatically generated by simpleapp everytime regenerate code.
 * delete file "delete-me-for-avoid-override" if you want to modify this file and 
 * prevent regenerate code override it.
 * last change 2023-09-09
 * author: Ks Tan
 */
 import {SimpleAppInputType} from "~/types"
 import ConfirmPopup from 'primevue/confirmpopup';
 import { useConfirm } from "primevue/useconfirm";
 const confirm = useConfirm(); 
 const isReadOnly =ref(true)
 const props = defineProps<{_id?:string}>()
 const {$<%= it.typename %>Doc,$event } = useNuxtApp();
 const doc = $<%= it.typename %>Doc()
 const data = doc.getReactiveData();
 const emits = defineEmits(['afterCreate'])


const fetchRecord = async (recordid:string) =>{
  await doc.getById(recordid)
}

const id = computed(() => props._id ?? '');
  

const disabled = computed(()=>{
  return false
})

const createData = async () => {
  // disabled.value=true
  
  doc.create().then((res)=>{
      //refresh()      
      emits('afterCreate',res.data)
    }).catch(err=>{
      console.error(err)
    })
 
};
const updateData = async () => {  
  doc.update().then(()=>{
      // visible.value=false
      refresh()
    }).catch(err=>{
      console.error(err)
    })
  
};
const deleteData = (event:Event) => {
    
    confirm.require({
        target: event.currentTarget as HTMLElement,
        message:'Delete?',
        icon: 'pi pi-exclamation-triangle',
        acceptClass: 'p-button-danger',
        accept: ()=>{
            // disabled.value=true 
            doc.delete(data.value._id ?? "").then((res) => {              
                refresh();    
                goTo(doc.getDocName())
            });
        },
        reject: () => {
            console.log("Cancel delete")
        }
    })  
};
const newData = ()=>{
  goTo(doc.getDocName(),'new')
}
const refresh = ()=>{
  $event('RefreshDocumentList',{documentName:doc.getDocName()})
}


if (id.value && id.value != 'new') {
  fetchRecord(id.value);
}else{
  isReadOnly.value=false
}
</script>
<template>    
    
    <SimpleAppForm #default="o" :document="doc" :readonly="isReadOnly">
    <client-only>
        <div v-if="isReadOnly" class="w-full">
            <Button
                class="btn-primary" @click="isReadOnly=false"
                type="button" >Edit</Button>
            <Button class="" :disabled="disabled" @click="newData" type="button" v-if="canPerform(doc.getDocName(),'create')">New</Button>
        </div>
        <div v-else class="simpleapp-tool-bar   col-span-4 text-left gap-4"  >
              <Button class="" :disabled="disabled" @click="newData" type="button" v-if="canPerform(doc.getDocName(),'create')">New</Button>
              <Button class="btn-primary" :disabled="disabled" @click="createData" type="button" v-if="canPerform(doc.getDocName(),'create') && doc.isNew()">Create</Button>
              <Button class="btn-primary" :disabled="disabled" @click="updateData" type="button" v-if="canPerform(doc.getDocName(),'update') && !doc.isNew()">Update</Button>
              <Button class="btn-danger" :disabled="disabled" @click="deleteData($event)" type="button" v-if="canPerform(doc.getDocName(),'delete') && !doc.isNew()">Delete</Button>

              
              <ProgressSpinner v-if="disabled==true" style="width: 2rem; height: 2rem" ></ProgressSpinner>
              <ConfirmPopup></ConfirmPopup>              
            </div>
        <div class="grid grid-cols-4 gap-4">
    <% let isautofocus='' %>
     <%Object.keys(it.jsonschema.properties).forEach(function(key) { %>
      
        <% let obj=it.jsonschema.properties[key] %>
        <% if(skipcolumns.indexOf(key)>=0){ %>
        <% } else if(obj.type=='boolean'){ %>
            <%~ getBasicElement('checkbox',`#/properties/${key}`,`data.${key}`) %>
        <% } else if(obj.type=='number' || obj.type=='integer'){ %>
            <%~ getBasicElement('number',`#/properties/${key}`,`data.${key}`) %>            
        <% } else if(obj.type=='array'  && obj.items && obj.items.type =='string' ){ %>              
            <%~ getBasicElement('chip',`#/properties/${key}`,`data.${key}`) %>            
        <% } else if(obj.type=='object'  && typeof obj['x-foreignkey']!='undefined'){ %>              
            <%~ getBasicElement('autocomplete',`#/properties/${key}`,`data.${key}`) %>            
        <% } else if(obj.type=='string'){ %>                 
                <% if(obj.format=='documentno'){ %>
                    <%~ getBasicElement('documentno',`#/properties/${key}`,`data.${key}`) %>                                    
                <% }else if(obj.format=='date'){ %>
                    <%~ getBasicElement('date',`#/properties/${key}`,`data.${key}`) %>            
                <% } else if(obj.format=='text'){ %>
                    <%~ getBasicElement('textarea',`#/properties/${key}`,`data.${key}`) %>            
                <% } else if(obj.format=='html'){ %>
                    <%~ getBasicElement('textarea',`#/properties/${key}`,`data.${key}`) %>            
                <% } else if(obj.format=='email'){ %>
                    <%~ getBasicElement('text',`#/properties/${key}`,`data.${key}`,'email') %>            
                <% } else if(obj.enum){ %>
                    <%~ getBasicElement('select',`#/properties/${key}`,`data.${key}`) %>            
                <% } else if(obj['anyOf']){ %>
                    <% for(let f = 0; f < obj['anyOf'].length; f++){ %>
                        <%if(obj['anyOf'][f]['format']){ %>
                            <%~ getBasicElement('text',`#/properties/${key}`,`data.${key}`,obj['anyOf'][f]['format']) %>            
                        <%}%>
                    <%}%>
                <% } else if(obj['oneOf']){ %>
                    <% for(let f = 0; f < obj['oneOf'].length; f++){ %>
                        <%if(obj['oneOf'][f]['format']){ %>
                            <%~ getBasicElement('text',`#/properties/${key}`,`data.${key}`,obj['oneOf'][f]['format']) %>            
                        <%}%>
                    <%}%>

                <% } else {%>
                        <%~ getBasicElement('text',`#/properties/${key}`,`data.${key}`) %>            
                <% }%>  
        <% } else if(obj.type=='object' && obj.properties){ %>                  
            <SimpleAppValue :setting="o.getField('#/properties/<%= key %>')">
            <%Object.keys(obj.properties).forEach(function(skey) { %>
                <% let sobj=obj.properties[skey] %>
                <% let fieldpath=`o.getField('#/properties/${key}/properties/${skey}')` %>
                <% let vmodel=`data.${key}.${skey}` %>
                <% let instancePath=`#/${key}/${skey}` %>

                <% if(sobj.type=='boolean'){ %>
                    <%~ getBasicElement('checkbox',fieldpath,vmodel) %>
                <% } else if(sobj.type=='number' || sobj.type=='integer'){ %>
                    <%~ getBasicElement('number',fieldpath,vmodel) %>
                <% } else if(sobj.type=='array'  && sobj.items && sobj.items.type =='string' ){ %>                                  
                    <%~ getBasicElement('chip',fieldpath,vmodel) %>
                <% } else if(sobj.type=='object'  && typeof sobj['x-foreignkey']!='undefined'){ %>              
                    <%~ getBasicElement('chip',fieldpath,vmodel) %>
                <% } else if(sobj.type=='string'){ %>            
                         <% if(sobj.format=='date'){ %>
                            <SimpleAppText type="<%=sobj.format%>" instancePath="<%=instancePath%>" autofocus :setting="<%~fieldpath%>" v-model="<%= vmodel %>"/>  
                        <% } else if(sobj.format=='text'){ %>
                            <SimpleAppTextarea :setting="<%~fieldpath%>'" instancePath="<%=instancePath%>" v-model="<%= vmodel %>"/>  
                        <% } else if(sobj.format=='html'){ %>
                            <SimpleAppEditor editorStyle="height: 320px" instancePath="<%=instancePath%>" :setting="<%=fieldpath%>" v-model="<%= vmodel %>"/>  
                        <% } else if(sobj.format=='email'){ %>
                            <SimpleAppText  autofocus type="<%=~obj.type%>" instancePath="<%=instancePath%>" :setting="<%=fieldpath%>" v-model="<%= vmodel %>"/>  
                        <% } else if(sobj.enum){ %>
                            <SimpleAppSelect  autofocus :setting="<%~fieldpath%>" instancePath="<%=instancePath%>" v-model="<%= vmodel %>"/>
                        <% } else {%>
                                <SimpleAppText   autofocus :setting="<%~fieldpath%>" instancePath="<%=instancePath%>" v-model="<%= vmodel %>"/>  
                        <% }%> 
                <% } %>
            <%})%>   
            </SimpleAppValue>            
        <% } else if(obj.type=='array' && obj.items.type=='object'){%>
            <SimpleAppInputTable  :getField="o.getField" class="col-span-4"
                :setting="o.getField('#/properties/<%=key%>')" v-model="data.<%=key%>">
                    <%let tablefields = Object.keys(obj.items.properties) %>
                    <% for(let a=0;a<tablefields.length;a++){%>
                        <%let col= tablefields[a] %>
                        <% if(skipcolumns.includes(col)){ continue}%> 
                        <%let subobj = obj.items.properties[col] %>
                        <Column field="<%=col%>" #body="{index}" :header="camelCaseToWords('<%=col%>')">                            
                            <%if(subobj['x-foreignkey']){%>
                                <%~ getBasicElement('autocomplete',`#/properties/${key}/items/properties/${col}`,`data.${key}[index].${col}`,undefined,true,`/${key}/\${index}/${col}`) %>                                
                            <% } else if(subobj.type=='boolean'){%>
                                <%~ getBasicElement('checkbox',`#/properties/${key}/items/properties/${col}`,`data.${key}[index].${col}`,undefined,true,`/${key}/\${index}/${col}`) %>                                
                            <% } else if(subobj.type=='number' || subobj.type=='integer'){%>
                                <%~ getBasicElement('number',`#/properties/${key}/items/properties/${col}`,`data.${key}[index].${col}`,undefined,true,`/${key}/\${index}/${col}`) %>                                
                            <%} else if(subobj.type=='string' && subobj.format){%>
                                <%~ getBasicElement('number',`#/properties/${key}/items/properties/${col}`,`data.${key}[index].${col}`,subobj.format,true,`/${key}/\${index}/${col}`) %>                                
                            <%} else if(subobj.type=='string' && subobj['enum']){%>  
                                <%~ getBasicElement('select',`#/properties/${key}/items/properties/${col}`,`data.${key}[index].${col}`,undefined,true,`/${key}/\${index}/${col}`) %>                                      
                             <%} else if(subobj.type=='string' ){%>        
                                <%~ getBasicElement('text',`#/properties/${key}/items/properties/${col}`,`data.${key}[index].${col}`,undefined,true,`/${key}/\${index}/${col}`) %>                                                                      
                            <%} else if(subobj.type=='number'){%>
                                <%~ getBasicElement('number',`#/properties/${key}/items/properties/${col}`,`data.${key}[index].${col}`,undefined,true,`/${key}/\${index}/${col}`) %>                                                                      
                            <%}%>
                        </Column>                        
                    <%}%>
                    <Column #body="{index}" header="Delete">
                            <Button class="btn-danger" type="button" @click="data.<%=key%>.splice(index,1)">X</Button>
                        </Column>
            </SimpleAppInputTable>
        <% } else{%>
            <!-- Can auto generate <%=obj.key %> -->  
            <!--  <%~ JSON.stringify(obj) %>-->  
        <%}%>
      <%})%>  
      </div>
    </client-only>
    </SimpleAppForm>
    <DebugDocumentData v-model="data" :label="doc.getDocName()"/>
</template>
