/**
 * This file was automatically generated by simpleapp generator.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and regenerate this file.
 * last change 2023-09-23
 * Author: Ks Tan
 */
import {
  Controller,
  Get,
  Put,
  Post,
  Delete,
  Body,
  Query,
  Param,
  Type,
  Res,
  HttpStatus
} from '@nestjs/common';
import { SimpleAppController } from '../../class/SimpleAppController';
import { <%= it.typename %>ServiceHook } from '../../hooks/<%= it.doctype %>.hook';
import * as <%= it.doctype %>type from './<%= it.doctype %>.type';
import * as <%= it.doctype %>apischema from './<%= it.doctype %>.apischema';
import { ApiTags, ApiBody, ApiResponse,ApiOperation } from '@nestjs/swagger';
import {Roles} from '../../roles/roles.decorator'
import {Role} from '../../roles/roles.enum'
import { Response } from 'express';

<% let superadmindoctype = ['tenant','globaluser'] %>
const doctype = '<%= it.doctype %>'.toUpperCase();
@ApiTags(doctype)
@Controller(doctype.toLowerCase())
export class <%= it.typename %>Controller extends SimpleAppController<
  <%= it.typename %>ServiceHook,
  <%= it.doctype %>apischema.<%= it.typename %>,
  <%= it.doctype %>type.<%= it.typename %>
> {
  constructor(service: <%= it.typename %>ServiceHook) {
    super(service);
  }
  
  @Get()
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
  <%}%>
  @ApiResponse({
    status: 200,
    description: 'Found',
    type: [<%= it.fullApiSchemaName%>]
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runList', description:"List all data" })
  async list() {
    return this._list();
  }
  //autocomplete shall above :id
  @Get('/autocomplete')
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.User)
  <%}%>  
  @ApiResponse({
    status: 200,
    description: 'Found',
    type: ()=>[{id:'100',label:'label1'}],
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'autoComplete',description:"retrieve array of {_id, code, name}" })
  async autoComplete(@Query('keyword') keyword: string) {
    return this._autocomplete(keyword);
  }



  @Post()
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_create`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_create`%>)
  <%}%>  
  @ApiResponse({
    status: 201,
    description: 'success',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data',type:<%= it.fullApiSchemaName%> })
  @ApiOperation({ operationId: 'runCreate' })
  async create(@Body() data: <%= it.fullApiSchemaName%>) {    
    return await this._create(data)
  }

  @Post('/search')
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
  <%}%>
  @ApiResponse({
    status: 201,
    description: 'success',
    type: [<%= it.fullApiSchemaName%>]
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data', type: Object })
  @ApiOperation({ operationId: 'runSearch' })
  async search(@Body() data: Object) {
    return await this._search(data)
  }


/***************************** begin x-document-api definations *****************************************/

<% for(let i=0;i<it.apiSettings.length;i++){%>
<% let api = it.apiSettings[i] %>
/*<%~ JSON.stringify(api) %>*/
<%~ `@${capitalizeFirstLetter(api.method)}('${api.entrypoint}')`%>
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_${api.action}`%>,
    <%if(api.requiredrole && api.requiredrole.length>0) { %>
        <% for(let r=0;r<api.requiredrole.length;r++){%>Role.<%=api.requiredrole[r]%>,<%}%>
      <%}%>
  )
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_${api.action}`%>,
      <%if(api.requiredrole && api.requiredrole.length>0) { %>
        <% for(let r=0;r<api.requiredrole.length;r++){%>Role.<%=api.requiredrole[r]%>,<%}%>
      <%}%>
      )
  <%}%>
  
  @ApiResponse({status: 200,description: '<%=api.description%>' <% if(api.returntype) {%>,type: () =>   <%~JSON.stringify(api.returntype)%>  <%}%>})
  @ApiResponse({status: 418,description: 'undefine bpmn,setDocumentStatus or bpmn'})
  @ApiOperation({ operationId: '<%=api.action%>' })
  async <%=api.action%>(@Res() res:Response,  <% if(api.entrypoint && api.entrypoint.includes(':id')) {%>@Param('id') id: string<%}%>){
    <%if(api.execute){%>
      const result =  await this.service.<%=api.execute%>(<% if(api.entrypoint && api.entrypoint.includes(':id')) {%> id<%}%>)
      res.status(HttpStatus.OK).send(result)
    <%} else if (api.bpmn){ %>
      const result =  await this.service.executeWorkFlow(id,'<%=api.bpmn%>',''); 
      res.status(HttpStatus.OK).send(result)
    <%} else if (api.setDocumentStatus){ %>
      return await this.service.setDocumentStatus(id,'<%=api.setDocumentStatus%>');
    <%} else {%>
       res.status(HttpStatus.I_AM_A_TEAPOT).send('execute api"<%=api.action%>", but undefine property bpmn/setDocumentStatus/execute in jsonschema')
    <%}%>
  } 
<%}%>
/***************************** end x-document-api definations *****************************************/
  @Get(':id')
  
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
  <%}%>
  @ApiResponse({
    status: 200,
    description: 'Founds',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runFindOne' })
  async findOne(@Param('id') id: string) {    
    return await this._findOne(id);
  }
  

  @Put(':id')
  @ApiResponse({
    status: 200,
    description: 'success',
  })
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_update`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_update`%>)
  <%}%>  
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiBody({ description: 'Data',type: <%= it.fullApiSchemaName%> })
  @ApiOperation({ operationId: 'runUpdate' })
  async update(@Param('id') id: string, @Body() data: <%= it.fullApiSchemaName%>) {    
    return await this._update(id, data) ;
  }

  @Delete(':id')
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_delete`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_delete`%>)
  <%}%>  
  @ApiResponse({
    status: 200,
    description: 'success',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runDelete' })
  async delete(@Param('id') id: string) {
    return this._delete(id);
  }
 

   
 
}