/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR Except content between:
 *    <begin-controller-code><end-controller-code>
 * last change 2023-09-09
 * Author: Ks Tan
 */
import {
  Controller,
  Get,
  Put,
  Post,
  Delete,
  Body,
  Query,
  Param,
  Type,
} from '@nestjs/common';
import { SimpleAppController } from '../../class/SimpleAppController';
import { <%= it.typename %>Service } from './<%= it.doctype %>.service';
import * as <%= it.doctype %>type from './<%= it.doctype %>.type';
import * as <%= it.doctype %>apischema from './<%= it.doctype %>.apischema';
import { ApiTags, ApiBody, ApiResponse,ApiOperation } from '@nestjs/swagger';

const doctype = '<%= it.doctype %>'.toUpperCase();
@ApiTags(doctype)
@Controller(doctype.toLowerCase())
export class <%= it.typename %>Controller extends SimpleAppController<
  <%= it.typename %>Service,
  <%= it.doctype %>apischema.<%= it.typename %>,
  <%= it.doctype %>type.<%= it.typename %>
> {
  constructor(service: <%= it.typename %>Service) {
    super(service);
  }
  
  @Get()
  @ApiResponse({
    status: 200,
    description: 'Found',
    type: [<%= it.fullApiSchemaName%>]
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runList', description:"List all data" })
  async list() {
    return this._list();
  }
  //autocomplete shall above :id
  @Get('/autocomplete')
  @ApiResponse({
    status: 200,
    description: 'Found',
    type: ()=>[{id:'100',label:'label1'}],
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'autoComplete',description:"retrieve array of {_id, code, name}" })
  async autoComplete(@Query('keyword') keyword: string) {
    return this._autocomplete(keyword);
  }


  @Get(':id')
  @ApiResponse({
    status: 200,
    description: 'Founds',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runFindOne' })
  async findOne(@Param('id') id: string) {    
    return await this._findOne(id);
  }
  


  @Post()
  @ApiResponse({
    status: 201,
    description: 'success',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data',type:<%= it.fullApiSchemaName%> })
  @ApiOperation({ operationId: 'runCreate' })
  async create(@Body() data: <%= it.fullApiSchemaName%>) {    
    return await this._create(data)
  }

  @Post('/search')
  @ApiResponse({
    status: 201,
    description: 'success',
    type: [<%= it.fullApiSchemaName%>]
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data', type: Object })
  @ApiOperation({ operationId: 'runSearch' })
  async search(@Body() data: Object) {
    return await this._search(data)
  }

  @Put(':id')
  @ApiResponse({
    status: 200,
    description: 'success',
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiBody({ description: 'Data',type: <%= it.fullApiSchemaName%> })
  @ApiOperation({ operationId: 'runUpdate' })
  async update(@Param('id') id: string, @Body() data: <%= it.fullApiSchemaName%>) {    
    return await this._update(id, data) ;
  }

  @Delete(':id')
  @ApiResponse({
    status: 200,
    description: 'success',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runDelete' })
  async delete(@Param('id') id: string) {
    return this._delete(id);
  }
 

   /*****************************customized code begin here *****************************************/
  <%~ it.controllerCode %>
 
}