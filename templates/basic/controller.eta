/**
 * This file was automatically generated by simpleapp generator.
 * You can add your additional custom api in this file.
 * CODE GENERATOR WONT OVERRIDE THIS FILE
 */
import {
  Controller,
  Get,
  Put,
  Post,
  Delete,
  Body,
  Param,
  Type,
} from '@nestjs/common';
import { SimpleAppController } from '../../class/SimpleAppController';
import { <%= it.typename %>Service } from './<%= it.doctype %>.service';
import * as <%= it.doctype %>type from './<%= it.doctype %>.type';
import * as <%= it.doctype %>apischema from './<%= it.doctype %>.apischema';
import { ApiTags, ApiBody, ApiResponse,ApiOperation } from '@nestjs/swagger';

const doctype = '<%= it.doctype %>'.toUpperCase();
@ApiTags(doctype)
@Controller(doctype.toLowerCase())
export class <%= it.typename %>Controller extends SimpleAppController<
  <%= it.typename %>Service,
  <%= it.doctype %>apischema.<%= it.typename %>,
  <%= it.doctype %>type.<%= it.typename %>
> {
  constructor(service: <%= it.typename %>Service) {
    super(service);
  }
  /********************ok*****************/
  @Get()
  @ApiResponse({
    status: 200,
    description: 'Found',
    type: [<%= it.fullApiSchemaName%>]
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runList' })
  async list() {
    return this._list();
  }
  /********************ok*****************/
  @Get(':id')
  @ApiResponse({
    status: 200,
    description: 'Founds',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runFindOne' })
  async findOne(@Param('id') id: string) {    
    return await this._findOne(id);
  }

  /********************ok*****************/
  @Post()
  @ApiResponse({
    status: 201,
    description: 'success',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data',type:<%= it.fullApiSchemaName%> })
  @ApiOperation({ operationId: 'runCreate' })
  async create(@Body() data: <%= it.fullApiSchemaName%>) {    
    return await this._create(data)
  }

  /********************ok*****************/
  @Put(':id')
  @ApiResponse({
    status: 200,
    description: 'success',
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiBody({ description: 'Data',type: <%= it.fullApiSchemaName%> })
  @ApiOperation({ operationId: 'runUpdate' })
  async update(@Param('id') id: string, @Body() data: <%= it.fullApiSchemaName%>) {    
    return await this._update(id, data) ;
  }

  /********************ok*****************/
  @Delete(':id')
  @ApiResponse({
    status: 200,
    description: 'success',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runDelete' })
  async delete(@Param('id') id: string) {
    return this._delete(id);
  }
 
}