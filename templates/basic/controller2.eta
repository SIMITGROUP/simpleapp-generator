/**
 * This file was automatically generated by simpleapp generator.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and regenerate this file.
 */
import {
  Controller,
  Get,
  Put,
  Post,
  Delete,
  Body,
  Param,
  Type,
} from '@nestjs/common';
import { <%= it.doctype %>Service } from './<%= it.doctype %>.service';
import * as <%= it.doctype %>type from './<%= it.doctype %>.type';
import * as <%= it.doctype %>apischema from './<%= it.doctype %>.apischema';
import { ApiTags, ApiBody, ApiResponse,ApiOperation } from '@nestjs/swagger';

const doctype = '<%= it.doctype %>'.toUpperCase();
@ApiTags(doctype)
@Controller(doctype.toLowerCase())
export class <%= it.doctype %>Controller {
  constructor(private readonly service: <%= it.doctype %>Service) {}

  /********************ok*****************/
  @Get()
  @ApiResponse({
    status: 200,
    description: 'Found',
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runList' })
  async list() {
    return this.service.list();
  }
  /********************ok*****************/
  @Get(':id')
  @ApiResponse({ status: 200, description: 'Founds', type: <%= it.fullApiSchemaName %> })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runFindOne' })
  async findOne(@Param('id') id: string) {
    const result = await this.service.findById(id)
    return result as <%= it.fullApiSchemaName %>;
  }

  /********************ok*****************/
  @Post()
  @ApiResponse({ status: 201, description: 'success', type: <%= it.fullApiSchemaName %> })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data', type: <%= it.fullApiSchemaName %> })
  @ApiOperation({ operationId: 'runCreate' })
  async create(@Body() data: <%= it.fullApiSchemaName %>) {
    //const newdata: <%= it.fullTypeName %> = { ...data };
    const newdata: persontype.Person = {} as persontype.Person; //= { ...data };
    Object.assign(newdata, data); //
    return this.service.setData(newdata).create();
  }

  /********************ok*****************/
  @Put(':id')
  @ApiResponse({ status: 200, description: 'success', type: <%= it.fullApiSchemaName %> })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiBody({ description: 'Data', type: <%= it.fullApiSchemaName %> })
  @ApiOperation({ operationId: 'runUpdate' })
  async update(@Param('id') id: string, @Body() data: <%= it.fullApiSchemaName %>) {
    //const newdata: <%= it.fullTypeName %> = { ...data };
    const newdata: persontype.Person = {} as persontype.Person; //= { ...data };
    Object.assign(newdata, data); //
    return this.service.findIdThenUpdate(id, newdata);
  }

  /********************ok*****************/
  @Delete(':id')
  @ApiResponse({ status: 200, description: 'success', type: <%= it.fullApiSchemaName %> })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runDelete' })
  async delete(@Param('id') id: string) {
    return this.service.findIdThenDelete(id);
  }
}
