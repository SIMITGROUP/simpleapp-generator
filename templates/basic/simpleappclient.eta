/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR Except content between:
 *    <begin-frontend-code><end-frontend-code>
 * last change 2023-09-09
 * Author: Ks Tan
 */
import { SimpleAppClient } from "@simitgroup/simpleapp-vue-component/src/SimpleAppClient";
import {AxiosResponse} from 'axios'

// import { JSONSchema7 } from 'json-schema';
import { Configuration,
      <%= it.doctype.toUpperCase()%>Api, 
      <%= it.typename%> ,
      <%Object.keys(it.schema).forEach(function(key){%>              
        <% if(typeof it.schema[key]=='string' || (Array.isArray(it.schema[key]) && typeof it.schema[key][0]=='string')){%>
          <%= it.schema[key]  %>,
        <%}%>
      <%})%>

    } from '../openapi';



export class <%= it.typename%>Client extends SimpleAppClient<<%= it.typename%>,<%= it.doctype.toUpperCase()%>Api>{
  public readonly schema= <%~ JSON.stringify(it.jsonschema) %>;
  protected documentIdentityCode='<%~ it.autocompletecode %>'
  protected documentIdentityName='<%~ it.autocompletename %>'
  constructor() {    
    const {$event,$listen,$axios}=useNuxtApp()
    let xorg = getTenant()
    if(!xorg){
      xorg='MC0wLTA' //0-0-0
    }

    const apiconfig = new Configuration({ basePath:  `${useRuntimeConfig().public.APP_URL}/api/${xorg}` });
    const apiobj = new <%= it.doctype.toUpperCase()%>Api(apiconfig,apiconfig.basePath,$axios)
    super(apiobj,'<%= it.doctype %>','<%=it.name %>')
    this.event=$event
    this.listen=$listen
    
    this.setNew();    
  }
  setNew = ()=>{
    const newdata =  {
        
        <%Object.keys(it.schema).forEach(function(key){%>      
          <%let field=it.schema[key]%>                
          <% if(typeof field.default !='undefined' && field.type=='string'){%> 
            <%=key%> : '<%= field.default  %>',
          <%} else if(typeof field.default !='undefined'){%> 
            <%=key%> : <%= field.default  %>,
          <%} else if(field.type=='boolean' ){%> 
              <%=key%> :false ,
          <%} else if(typeof field=='string'){%>
            <%=key%> : <<%= field  %>>{},          
          <%} else if(field.type=='string'){%>
              <%=key%> : '<%= field.default  %>',
            <%} else if(Array.isArray(field)) {%>
              <%=key%> : [],  //typeof field == array        
            <%} else {%>
              <%=key%> : <%=field.default%>,  //else <%= typeof field %>
          <%}%>
        <%})%>
            }
            this.setData(newdata)
    }

<%Object.keys(it.jsonschema.properties).forEach(function(key) { %>
    <% let obj=it.jsonschema.properties[key] %>
    
    <% if(obj.type=='array' && obj.items.type=='object' && obj.items['properties']){ %>
        <%let tablefields = Object.keys(obj.items.properties) %>
       public add<%=key%> = () => {
        const tmp:<%=it.typename%><%=capitalizeFirstLetter(key)%> = {
          <% for(let a=0;a<tablefields.length;a++){%>
              <% const skey =  tablefields[a] %>
              <% const sobj =  obj.items.properties[skey] %>
              <%if(sobj.type=='object'  && typeof sobj['x-foreignkey']!='undefined'){%>
                <%=skey%>: <%~ sobj.default?JSON.stringify(sobj.default): '{_id:"",label:""}'%>,
              <%}else if(sobj.type=='boolean'){%>
                  <%=skey%>: <%=sobj.default??false%>,
              <%}else if(sobj.type=='number'){%>
                <%=skey%>: <%=sobj.default??0.00%>,
              <%}else if(sobj.type=='integer'){%>
                <%=skey%>: <%=sobj.default??0%>,
              <%}else if(sobj.type=='string'){%>
                <%=skey%>: '<%=sobj.default??""%>',
              <%}%>

          <%}%>
          }
        this.getReactiveData().value.<%= key %>.push(tmp)
       }
        
          
    <%}%>
  <%})%>
  
  /*****************************x-document-api code*****************************************/

  <%for(let i=0;i<it.apiSettings.length;i++){%>
  <% let api = it.apiSettings[i] %>
  async <%=api.execute%>(){
    //const recordid: string = this.data.value._id ?? '';
    return await this.docapi.<%=api.execute%>()
    .then((res: AxiosResponse) => {
      if(this.event){this.event('info:<%=api.execute%>',res.data)}
      return res;
    }).catch((res:any)=>{
      if(this.event){this.event('error:<%=api.execute%>',res)}
      return Promise.reject(res)
    });
  } 
  <%}%>


  /*****************************customized frontend + backend code*****************************************/
    
  <%~ it.bothEndCode %>

  /*****************************customized frontend only code*****************************************/
  <%~ it.frontEndCode %>

  }
