/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2025-06-18
 * Author: --
 */

<% 
  const upperFirstCase = (value) => {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }

  const pascalName = upperFirstCase(it.resourceName);
  const apiName = it.typename.toUpperCase() + 'Api';
  const typeActionName = pascalName + 'Actions';

  const miniAppWhitelistApis = it.jsonschema['x-simpleapp-config']?.miniApp?.whitelist || {};
  const hasMiniAppWhitelistedApi = Object.keys(miniAppWhitelistApis).length > 0;
%>

import { MiniAppBridgeService } from "../bridge.service";

export class MiniApp<%= pascalName %>BridgeService {
  private bridge: MiniAppBridgeService;

  private resourceName = "<%= it.resourceName %>";

  constructor(bridge: MiniAppBridgeService) {
    this.bridge = bridge;
  }

  <% Object.entries(miniAppWhitelistApis).forEach(([action, value]) => { %>
    <% if (value !== true && typeof value !== 'object') { return; } %>

    <% if(action === 'list') { %>
      async list() {
        return this.bridge.callApi(this.resourceName, "list");
      }
    <% } else if(action === 'detail') { %>
      async detail(id: string) {
        return this.bridge.callApi(this.resourceName, "detail", { id });
      }
    <% } else if(action === 'create') { %>
     async create(data: any) {
        return this.bridge.callApi(this.resourceName, "create", { body: data });
      }
    <% } else if(action === 'update') { %>
      async update(id: string, data: any) {
        return this.bridge.callApi(this.resourceName, "update", { id, body: data });
      }
    <% } else if(action === 'patch') { %>
      async patch(id: string, data: any) {
        return this.bridge.callApi(this.resourceName, "patch", { id, body: data });
      }
    <% } else if(action === 'delete') { %>
      async delete(id: string) {
        return this.bridge.callApi(this.resourceName, "delete", { id });
      }
    <% } else if(action === 'autoComplete') { %>
      async autoComplete(query: string, data: any) {
        return this.bridge.callApi(this.resourceName, "autoComplete", {
          query,
          body: data,
        });
      }
    <% } else if(action === 'current') { %>
      async <%= action %>() {
        return this.bridge.callApi(this.resourceName, "<%= action %>");
      }
    <% } else { %>
      <% const apiSetting = it.apiSettings.find(item => item.action === action); %>
      <% if (apiSetting) { %>
        <% const hasBody = ['post', 'put', 'patch'].includes(apiSetting.method); %>

        <% 
          const paramMatches = apiSetting.entryPoint.match(/:([\w]+)/g) || [];
          const paramNames = paramMatches.map(p => p.replace(':', ''));

          const args = paramNames.map(name => {
            return `${name}: string`;
          });

          const output = [];
          const queryParams = [];

          for (let i = 0; i < paramNames.length; i++) {
            const name = paramNames[i];
            if (name === 'id') {
              output.push(`id: ${name}`);
            } else {
              queryParams.push(`${name}: ${name}`);
            }
          }

          if (queryParams.length > 0) {
            output.push(`queryParams: {\n  ${queryParams.join(',\n  ')}\n}`);
          }

          if (hasBody) {
            args.push('data: any');
            output.push('body: data');
          }
        %>
          
        async <%= action %>(<%= args.join(', ') %>) {
          return this.bridge.callApi(this.resourceName, "<%= action %>", {
            <%= output.join(',\n  ') %>
          });
        }
      <% } %>
    <% } %>
  <% }) %>

  openOnScreenForm(id?: string) {
    this.bridge.openOnScreenResourceForm(this.resourceName, {
      id,
    });
  }
}