/**
 * This file was automatically generated by simpleapp generator.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and regenerate this file.
 * last change 2023-09-23
 * Author: Ks Tan
 */
import {
  Controller,
  Get,
  Put,
  Post,
  Delete,
  Body,
  Query,
  Param,
  Type,
  Res,
  Req,
  HttpStatus
} from '@nestjs/common';
import { SimpleAppController } from '../commons/simpleapp.controller';
import { <%= it.typename %>Service } from '../../services/<%= it.doctype %>.service';
import * as <%= it.doctype %>type from '../types/<%= it.doctype %>.type';
import * as <%= it.doctype %>apischema from '../apischemas/<%= it.doctype %>.apischema';
import { ApiTags, ApiBody, ApiResponse,ApiOperation } from '@nestjs/swagger';
import {Roles} from '../commons/roles/roles.decorator'
import {Role} from '../commons/roles/roles.enum'
import { Response } from 'express';
import {AppUser} from '../commons/decorators/appuser.decorator'
import {UserProfile} from '../commons/user.profile'

<% let superadmindoctype = ['tenant','globaluser'] %>
const doctype = '<%= it.doctype %>'.toUpperCase();
@ApiTags(doctype)
@Controller(doctype.toLowerCase())
export class <%= it.typename %>Controller extends SimpleAppController<
  <%= it.typename %>Service,
  <%= it.doctype %>apischema.<%= it.typename %>,
  <%= it.doctype %>type.<%= it.typename %>
> {
  constructor(service: <%= it.typename %>Service) {
    super(service);
  }
  
  @Get()
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
  <%}%>
  @ApiResponse({
    status: 200,
    description: 'Found',
    type: [<%= it.fullApiSchemaName%>]
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runList', description:"List all data" })
  async list(@AppUser() appuser: UserProfile) {
    return this._list(appuser);
  }
  //autocomplete shall above :id
  @Get('/autocomplete')
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.User)
  <%}%>  
  @ApiResponse({
    status: 200,
    description: 'Found',
    type: ()=>[{id:'100',label:'label1'}],
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'autoComplete',description:"retrieve array of {_id, code, name}" })
  async autoComplete(@AppUser() appuser: UserProfile,@Query('keyword') keyword: string) {
    return this._autocomplete(appuser,keyword);
  }



  @Post()
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_create`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_create`%>)
  <%}%>  
  @ApiResponse({
    status: 201,
    description: 'success',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data',type:<%= it.fullApiSchemaName%> })
  @ApiOperation({ operationId: 'runCreate' })
  async create(@AppUser() appuser: UserProfile,@Body() data: <%= it.fullApiSchemaName%>) {    
    return await this._create(appuser,data)
  }

  @Post('/search')
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
  <%}%>
  @ApiResponse({
    status: 201,
    description: 'success',
    type: [<%= it.fullApiSchemaName%>]
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data', type: Object })
  @ApiOperation({ operationId: 'runSearch' })
  async search(@AppUser() appuser: UserProfile,@Body() data: Object) {
    return await this._search(appuser,data)
  }


/***************************** begin x-document-api definations *****************************************/

<% for(let i=0;i<it.apiSettings.length;i++){%>
<% let api = it.apiSettings[i] %>
<%~ `@${capitalizeFirstLetter(api.method)}('${api.entrypoint}')`%>
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_${api.action}`%>,
    <%if(api.requiredrole && api.requiredrole.length>0) { %>
        <% for(let r=0;r<api.requiredrole.length;r++){%>Role.<%=api.requiredrole[r]%>,<%}%>
      <%}%>
  )
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_${api.action}`%>,
      <%if(api.requiredrole && api.requiredrole.length>0) { %>
        <% for(let r=0;r<api.requiredrole.length;r++){%>Role.<%=api.requiredrole[r]%>,<%}%>
      <%}%>
      )
  <%}%>
  
  @ApiResponse({status: 200,description: '<%=api.description%>' ,type: Object  })
  @ApiResponse({status: 418,description: 'undefine bpmn,setDocumentStatus or bpmn'})
  @ApiOperation({ operationId: '<%=api.execute ??api.action%>' })
  async <%=api.execute??api.action %>(@AppUser() appuser: UserProfile,@Res() res:Response,<% if(api.entrypoint && api.entrypoint.includes(':')) {%>
          <%let subpath = api.entrypoint.split('/')%>
          <% for(let a=0;a<subpath.length;a++){%>
            <%const partstr = subpath[a]%>
            <%if(partstr.includes(':')){%>
              <% const paraname = partstr.replace(':','') %>  
              @Param('<%=paraname%>') <%=paraname%>: string,
            <%}%>    
          <%}%>  
        <%}%>){
    <%if(api.execute){%>
      const result =  await this.service.<%=api.execute%>(appuser,<% if(api.entrypoint && api.entrypoint.includes(':')) {%>
          <%let subpath = api.entrypoint.split('/')%>
          <% for(let a=0;a<subpath.length;a++){%>
            <%const partstr = subpath[a]%>
            <%if(partstr.includes(':')){%>
              <% const paraname = partstr.replace(':','') %>  
              <%=paraname%>,
            <%}%>    
          <%}%>  
        <%}%>)
      res.status(HttpStatus.OK).send(result)
    <%} else if (api.bpmn){ %>
      const result =  await this.service.executeWorkFlow(appuser,id,'<%=api.bpmn%>',''); 
      res.status(HttpStatus.OK).send(result)
    <%} else if (api.setDocumentStatus){ %>
      return await this.service.setDocumentStatus(appuser,id,'<%=api.setDocumentStatus%>');
    <%} else {%>
       res.status(HttpStatus.I_AM_A_TEAPOT).send('execute api"<%=api.action%>", but undefine property bpmn/setDocumentStatus/execute in jsonschema')
    <%}%>
  } 
<%}%>
/***************************** end x-document-api definations *****************************************/
  @Get(':id')
  
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
  <%}%>
  @ApiResponse({
    status: 200,
    description: 'Founds',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runFindOne' })
  async findOne(@AppUser() appuser: UserProfile,@Param('id') id: string) {    
    return await this._findOne(appuser,id);
  }
  

  @Put(':id')
  @ApiResponse({
    status: 200,
    description: 'success',
  })
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_update`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_update`%>)
  <%}%>  
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiBody({ description: 'Data',type: <%= it.fullApiSchemaName%> })
  @ApiOperation({ operationId: 'runUpdate' })
  async update(@AppUser() appuser: UserProfile,@Param('id') id: string, @Body() data: <%= it.fullApiSchemaName%>) {    
    return await this._update(appuser,id, data) ;
  }

  @Delete(':id')
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_delete`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_delete`%>)
  <%}%>  
  @ApiResponse({
    status: 200,
    description: 'success',
    type: <%= it.fullApiSchemaName%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runDelete' })
  async delete(@AppUser() appuser: UserProfile,@Param('id') id: string) {
    return this._delete(appuser,id);
  }
 

   
 
}