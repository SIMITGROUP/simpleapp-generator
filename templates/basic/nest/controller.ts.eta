<%let simpleappconfig = it.jsonschema['x-simpleapp-config'] %>
/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
import {
  Controller,
  Get,
  Put,
  Patch,
  Post,
  Delete,
  Body,
  Query,
  Param,
  Type,
  Res,
  Req,
  HttpStatus,
  HttpCode,
  NotFoundException
} from '@nestjs/common';
import { SimpleAppAbstractController } from './simpleapp.controller';
import { <%= it.typename %>Service } from '../../services/<%= it.doctype %>.service';
// import * as <%= it.doctype %>type from '../types/<%= it.doctype %>.type';
import * as types from '../types';
import * as schemas from '../apischemas';
//import * as <%= it.doctype %>apischema from '../apischemas/<%= it.doctype %>.apischema';
import { ApiTags, ApiBody, ApiResponse,ApiOperation,ApiQuery } from '@nestjs/swagger';
import {Roles} from '../commons/roles/roles.decorator'
import {Role} from '../commons/roles/roles.enum'
import { Response } from 'express';
import {AppUser} from '../commons/decorators/appuser.decorator'
import {UserContext} from '../commons/user.context'


<% const getFieldType =(proptype, typename,actionname)=>{
  const systemtypes = ['Boolean','boolean','string','String','number','Number','object','Object','integer','Integer']
  if(!typename) throw actionname +" undefine schema";
  let tmptypename = typename.replace('[','').replace(']','')
  
  if(systemtypes.includes(tmptypename)){
    if(proptype=='type' ) tmptypename =tmptypename.toLowerCase();
  }else if(proptype=='schema'){
    tmptypename= 'schemas.'+tmptypename    
  }else{ //type
    tmptypename= 'types.'+tmptypename
  }

  if(typename.includes('[')){
    return  proptype=='schema' ?  `[${tmptypename}]` : `${tmptypename}[]`
  }else{
    return tmptypename
  }
}
%>
<% let superadmindoctype = ['tenant','globaluser'] %>
const apiname = '<%= it.typename %>'.toUpperCase();
@ApiTags(apiname)
@Controller(apiname.toLowerCase())
export class <%= it.typename %>Controller extends SimpleAppAbstractController<
  <%= it.typename %>Service,  
  schemas.<%= it.typename%>,
  types.<%= it.typename %>
> {
  constructor(service: <%= it.typename %>Service) {
    super(service);
  }
  
  @Get()
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_access`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_access`%>)
  <%}%>
  @HttpCode(200)
  @ApiResponse({
    status: 200,
    description: 'Sample 200 response',    
    type: Object
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runDefault', description: "Run default behavior like say hello" })
  async runDefault(@AppUser() appuser: UserContext) {
    return await this.service.runDefault(appuser)
  }
  //autocomplete shall above :id
  @Post('/autocomplete')
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.User)
  <%}%>  
  @ApiResponse({
    status: 200,
    description: 'Found',
    type: ()=>[{id:'100',label:'label1'}],
  })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiQuery({ name: 'keyword', type:String})
  @ApiBody({ description: 'Data', type: ()=>Object})
  @ApiOperation({ operationId: 'autoComplete',description:"retrieve array of {_id, code, name}" })
  async autoComplete(@AppUser() appuser: UserContext,
  @Query('keyword') keyword:string,
  @Body() data: types.<%=it.typename%>,
  ) {
    return this._autocomplete(appuser, keyword,data);
  }



  @Post()
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_create`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_create`%>)
  <%}%>  
  @ApiResponse({
    status: 201,
    description: 'success',
    type: schemas.<%= it.typename%>
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data',type:schemas.<%= it.typename%> })
  @ApiOperation({ operationId: 'runCreate' })
  async create(@AppUser() appuser: UserContext,@Body() data: schemas.<%= it.typename%>) {    
    return await this._create(appuser,data)
  }

  @Post('/search')
  @HttpCode(200)
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
  <%}%>
  @ApiResponse({
    status: 200,
    description: 'success',
    type: [schemas.<%= it.typename%>]
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiBody({ description: 'Data', type: schemas.ApiSearchBody })
  @ApiOperation({ operationId: 'runSearch' })
  async search(@AppUser() appuser: UserContext,@Body() data: types.SearchBody) {
    return await this._search(appuser,data)
  }


<% if(simpleappconfig.search !==undefined){%>
@Post('/fulltextsearch')
  @HttpCode(200)
  @Roles(Role.SuperAdmin, Role.SuperUser, Role.<%= `${it.typename}_search`%>)
  @ApiBody({ description: 'Data', type: schemas.TextSearchBody })
  @ApiResponse({
    status: 200,
    description: 'success',
    type: [schemas.<%= it.typename%>]
  })
  @ApiResponse({ status: 400, description: 'bad request' })
  @ApiResponse({ status: 500, description: 'internal error' })
  @ApiOperation({ operationId: 'runFullTextSearch' })
  async fulltextsearch(
    @AppUser() appuser: UserContext,
    @Body() data: types.TextSearchBody,
  ) {
    return await this._fulltextsearch(appuser, data);
  }
<%}%>


/***************************** begin additionalAPI definations *****************************************/

<% for(let i=0;i<it.apiSettings.length;i++){%>
<% let api = it.apiSettings[i] %>
<%~ `@${capitalizeFirstLetter(api.method)}('${api.entryPoint}')`%>
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,
    <%if(api.requiredRole && api.requiredRole.length>0) { %>
        <% for(let r=0;r<api.requiredRole.length;r++){%>Role.<%=api.requiredRole[r]%>,<%}%>
      <%}%>
  )
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,
      <%if(api.requiredRole && api.requiredRole.length>0) { %>
        <% for(let r=0;r<api.requiredRole.length;r++){%>Role.<%=api.requiredRole[r]%>,<%}%>
      <%}%>
      )
  <%}%>
  <% if(['post','put','patch'].includes(api.method)){ %>
    @ApiBody({ description: 'Request Body', 
        type: <%= getFieldType('schema',api.schema,api.action)%>
       
        })
  <%}%>  
  @ApiResponse({status: 200,description: '<%=api.description%>' 
      ,type: <%= getFieldType('schema',api.responseType,api.action)%>
        })  
  @ApiOperation({ operationId: 'run<%=capitalizeFirstLetter(api.action)%>' })
  <% if(api.queryPara && api.queryPara.length>0) {%>
      <%for(let q=0;q<api.queryPara.length; q++){%>
        @ApiQuery({name: "<%=api['queryPara'][q]%>",required: false,type: String})
      <%}%> 
  <%}%>  
  async <%=capitalizeFirstLetter(api.action) %>(
    @AppUser() appuser: UserContext,
    <%if(['post','put','patch'].includes(api.method.toLowerCase())){%> 
      @Body() data:<%= getFieldType('type',api.schema,api.action)%>,
      //@Body() data:any,
    <%}%>
    <% if(api.entryPoint && api.entryPoint.includes(':')) {%>
          <%let subpath = api.entryPoint.split('/')%>
          <% for(let a=0;a<subpath.length;a++){%>
            <%const partstr = subpath[a]%>
            <%if(partstr.includes(':')){%>
              <% const paraname = partstr.replace(':','') %>  
              @Param('<%=paraname%>') <%=paraname%>: string,
            <%}%>    
          <%}%>  
        <%}%>
        <% if(api.queryPara && api.queryPara.length>0) {%>
            <%for(let q=0;q<api.queryPara.length; q++){%>
              <% const qp = api['queryPara'][q] %>
              @Query('<%=qp%>') <%=qp%>: string,
            <%}%>
        <%}%>
         ){
    

      const res:<%= getFieldType('type',api.responseType,api.action)%>  = await this.service.run<%=capitalizeFirstLetter(api.action)%>(appuser,<% if(api.entryPoint && api.entryPoint.includes(':')) {%>
          <%let subpath = api.entryPoint.split('/')%>
          <% for(let a=0;a<subpath.length;a++){%>
            <%const partstr = subpath[a]%>
            <%if(partstr.includes(':')){%>
              <% const paraname = partstr.replace(':','') %>  
              <%=paraname%>,
            <%}%>    
          <%}%>  
        <%}%>
        <% if(api.queryPara && api.queryPara.length>0) {%>
            <%for(let q=0;q<api.queryPara.length; q++){%>
              <%= api['queryPara'][q] %>,              
            <%}%>
        <%}%>
        <%if(['post','put','patch'].includes(api.method.toLowerCase())){%>
          data,
        <%}%>
        )
    return res
   
  } 
<%}%>
/***************************** end additionalAPI definitions *****************************************/

/***************************** start status control api definitions *****************************************/
<%for(let s=0; s<it.docStatusSettings.length; s++){ %>
  <%let statusconf = it.docStatusSettings[s]%>
  <%let statusname = statusconf['status']%>
  @Post(':id/set-<%=statusname%>')
  @ApiBody({ description: 'Document data', type: Object })
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_${statusname}`%>)
  async setStatus<%=capitalizeFirstLetter(statusname)%>(@AppUser() appuser: UserContext,@Param('id') id: string, @Body() data:any,){
          return await this.service.setDocumentStatus(appuser,id,data,'<%=statusname%>',)
  }
<%}%>
/***************************** end status control api definitions *****************************************/

  @Get(':id')  
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
  <%}%>
  @ApiResponse({
    status: 200,
    description: 'Founds',
    type: schemas.<%= it.typename%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runFindOne' })
  async findOne(@AppUser() appuser: UserContext,@Param('id') id: string) {    
    const data = await this._findOne(appuser, id);
     if(!data ){
        throw new NotFoundException(`${id} not found`,"not found")
     }else{
      return data
     }
  }
  

  @Put(':id')
  @ApiResponse({
    status: 200,
    description: 'success',
  })
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_update`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_update`%>)
  <%}%>  
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiBody({ description: 'Data',type: schemas.<%= it.typename%> })
  @ApiOperation({ operationId: 'runUpdate' })
  async update(@AppUser() appuser: UserContext,@Param('id') id: string, @Body() data: schemas.<%= it.typename%>) {    
    return await this._update(appuser,id, data) ;
  }
  @Patch(':id')
  @ApiResponse({
    status: 200,
    description: 'success',
  })
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_update`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_update`%>)
  <%}%>  
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiBody({ description: 'Data',type: schemas.<%= it.typename%> })
  @ApiOperation({ operationId: 'runPatch' })
  async patch(@AppUser() appuser: UserContext,@Param('id') id: string, @Body() data: schemas.<%= it.typename%>) {    
    return await this._patch(appuser,id, data) ;
  }

  @Delete(':id')
  <%if(superadmindoctype.includes(it.doctype)){%>
  @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_delete`%>)
  <%}else{%>
  @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_delete`%>)
  <%}%>  
  @ApiResponse({
    status: 200,
    description: 'success',
    type: schemas.<%= it.typename%>
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runDelete' })
  async delete(@AppUser() appuser: UserContext,@Param('id') id: string) {
    return this._delete(appuser,id);
  }

  <% if(simpleappconfig?.printFormats){%>
  @Get(':id/print/:formatid')
  @Roles(Role.SuperAdmin, Role.SuperUser, Role.<%= `${it.typename}_access`%>)
  @ApiResponse({
    status: 200,
    description: 'return base64 pdf string',
    type: String,
  })
  @ApiResponse({ status: 404, description: 'Document not found' })
  @ApiResponse({ status: 500, description: 'Internal error' })
  @ApiOperation({ operationId: 'runPrint' })
  async print(@AppUser() appuser: UserContext, @Param('id') id: string, @Param('formatid') formatid: string) {
    const data = await this.service.print(appuser, id,formatid);
    if (!data) {
      throw new NotFoundException(`${id} not found`, 'not found');
    } else {
      return data;
    }
  } 

  <%}%>
}