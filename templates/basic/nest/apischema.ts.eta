/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
import { ApiProperty } from '@nestjs/swagger';
import { Field, ObjectType,ID } from '@nestjs/graphql';
import GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json';

<% const draw = (it, obj, key, currentModelName) => { %>
    <% if(typeof obj == 'string') {%>
        <% // This Is Dynamic Object %>
        <% if(it.models?.[obj] && it.models[obj]?.model && Object.keys(it.models[obj]?.model).length === 0) { %>
            @Field(()=>GraphQLJSON)
            @ApiProperty({ type:()=>Object,required: false, default: {} })
            <%= key %>: Object;
        <% } else { %>
            <%
                let required = false;
                const currentModel = it.models?.[currentModelName];
                if (currentModel && (currentModel.required ?? []).includes(key)) {
                    required = true;
                }
            %>
            @Field()
            @ApiProperty({type: ()=><%=obj%>, required: <%= required %>})
            <%= key %>:  <%= obj %>;
        <% } %>
    <%} else if(typeof obj.default !='undefined' && JSON.stringify(obj.default)=='{}'){%>
        @Field(()=>GraphQLJSON)
        @ApiProperty({ type:()=>Object,required: false, default: {} })
        <%= key %>: Object;
    <% } else if( Array.isArray( obj)){%>
        <%
            let required = false;
            const currentModel = it.models?.[currentModelName];
            if (currentModel && (currentModel.required ?? []).includes(key)) {
                required = true;
            }
        %>
        @Field(type=>[<%=initType(obj[0]) %>])
        @ApiProperty({type: ()=>[<%=initType(obj[0]) %>], required: <%= required %> })                    
        <%= key %>:  <%= obj[0] %>[];
        
    <% }else{%>
        @Field()                
        @ApiProperty(<%~ JSON.stringify(obj)%> )
        <%= key %>:  <%= obj.type %>;
    <% } %>
<% } %>

<%Object.keys(it.models).forEach(function(name) { %>
    <% let schema = it.models[name].model %>

    <% // Skip Draw Dynamic Object Class %>
    <% if(it.models[name].type === 'object' && schema && Object.keys(schema).length === 0 ) return; %>

    @ObjectType()
    export class <%= name %> {

        <% Object.keys(schema).forEach(function(key) { %>
            <% let obj = schema[key] %>
            <% draw(it, obj, key, name) %>
        <% }) %>
    }
<%}) %>

/***************************************** Start Auto Complete *****************************************/
<% const autoCompleteModelName = it.apiSchemaName + 'AutoComplete';  %>
@ObjectType()
export class <%=autoCompleteModelName %> {
    @Field()
    @ApiProperty({ type: 'string', required: true, default: '' })
    _id: string;

    @Field()
    @ApiProperty({ type: 'string', required: true, default: '' })
    code: string;

    @Field()
    @ApiProperty({ type: 'string', required: true, default: '' })
    label: string;

    <% if(it.moreAutoComplete && Array.isArray(it.moreAutoComplete)) { %>
        <% it.moreAutoComplete.forEach(function(field){ %>
            <% draw(it, it.models[it.apiSchemaName].model[field], field, autoCompleteModelName) %>

        <% }) %>
    <% } %>
}
/****************************************** End Auto Complete ******************************************/

/************************************** Customized Code Begin Here *************************************/
<%~ it.apiSchemaCode %>
 
