/**
 * This file was automatically generated by simpleapp generator.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and regenerate this file.
 * last change 2023-09-23
 * Author: Ks Tan
 */
import { UserContext } from '../commons/user.context'
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import {<%= it.typename%>JsonSchema } from '../jsonschemas/<%= it.doctype %>.jsonschema'
import { SimpleAppService,IsolationType,HookType } from './simpleapp.processor';
import {DocNumberFormatGenerator} from '../commons/docnogenerator.service'
import { <%Object.keys(it.models).forEach(function(key) { %> <%=key %>, <%})%> }  from '../types/<%= it.doctype %>.type';
import { <%Object.keys(it.models).forEach(function(modelname) { %>  Default<%=modelname%>,  <%})%> } from '../defaults/<%= it.doctype %>.default'


<%if(it.jsonschema['x-import-lib']) {%>
  <%let libs = it.jsonschema['x-import-lib'] %>
  <%for(let l = 0; l< libs.length; l++) { %>
      import * as <%=libs[l].importAs %> from '<%=libs[l].importFrom %>'
  <%}%>
<%}%>

@Injectable()
export class <%= it.typename %>Processor extends SimpleAppService<<%= it.typename %>>  {
  protected documentIdentityCode='<%~ it.autocompletecode %>'
  protected documentIdentityLabel='<%~ it.autocompletename %>'
  protected withDocNumberFormat= <%= it.hasdocformat %>

    constructor(mydoc: Model<<%= it.typename %>>,private docnogenerator:DocNumberFormatGenerator) {
    super('<%= it.doctype.toUpperCase() %>','<%= it.name %>',mydoc,IsolationType.<%=it.isolationtype%>);
    this.setSchema(<%= it.typename%>JsonSchema)
    this.setData(Default<%=it.typename%>(crypto.randomUUID()))
    <%if(it.moreAutoComplete.length>0){%>
    this.addAutoCompleteField({
        <%Object.keys(it.moreAutoComplete).forEach(function(key) { %>
          <% let f=it.moreAutoComplete[key] %>
          <%~ `${f}: '${f}'`   %>,
        <%})%>
      })
    <%}%>
    
  }

  <% if(it.hasdocformat){ %>
  async genNewDocNo(appuser:UserContext,data:<%= it.typename%>){
    const result = await this.docnogenerator.generateNextNumberFromDocument(appuser,this.documentType,data)
    data[this.documentIdentityCode]=result    
  }
  <%}%>

   reCalculateValue(){
    console.log('trigger new recalculate')
    const data = this.getData()

    <%Object.keys(it.jsonschema.properties).forEach(function(key) { %>
      <%let obj = it.jsonschema.properties[key]%>
      <%if(obj['x-compute']){%> //x-compute first level field

        data.<%=key%> = <%= obj['x-compute'].function %>( 
          <% if(obj['x-compute'].paramters){ %>
            <% let p = obj['x-compute'].paramters %>
            <%for(let j=0; j<p.length; j++){%>
              <%= p[j].replace('@data','data')  %>,
            <%}%>
          <%}%>
          )
      <%}%>
      <%if(obj.type=='array' && obj.items.type=='object'){%> 
        // process compute for 2nd level sub tables
        for(let index=0;index<data.<%=key%>.length;index++){ 
        <%Object.keys(obj.items.properties).forEach(function(subkey) { %>
          <%let subobj = obj.items.properties[subkey]%>
          <%if(subobj['x-compute']){%> 

            data.<%=key%>[index].<%=subkey%> = <%= subobj['x-compute'].function %>( 
              <% if(subobj['x-compute'].paramters){ %>
                <% let subp = subobj['x-compute'].paramters %>
                <%for(let k=0; k<subp.length; k++){%>
                  <%= subp[k].replace('@data','data').replace('@index','index')  %>,
                <%}%>
              <%}%>
              )
          <%}%>

          <% if(subobj.type=='array' && subobj.items && subobj.items.type=='object'){ %> 
            // process compute for 3rd level sub tables
            for(let index2=0;index<data.<%=key%>[index].length;index2++){
            <%Object.keys(subobj.items.properties).forEach(function(sub2key) { %>
              <%let sub2obj = subobj.items.properties[sub2key]%>
              <%if(sub2obj['x-compute']){%> //x-compute 3rd level field
                data.<%=key%>[index].<%=subkey%>[index2].<%=sub2key%> = <%= sub2obj['x-compute'].function %>( 
                  <% if(sub2obj['x-compute'].paramters){ %>
                    <% let sub2p = sub2obj['x-compute'].paramters %>
                    <%for(let l=0; l<sub2p.length; l++){%>
                      <%= sub2p[l].replace('@data','data').replace('@index','index').replace('@index2','index2')  %>,
                    <%}%>
                  <%}%>
                  )
              <%}%>
              <%if(sub2obj.type=='array' && sub2obj.items && sub2obj.items.type=='object'){%> 
                // process compute for 4rd level sub tables
                for(let index3=0;index<data.<%=key%>[index].<%=subkey%>[index2].length;index3++){ 
                <%Object.keys(sub2obj.items.properties).forEach(function(sub3key) { %>
                  <%let sub3obj = sub2obj.items.properties[sub3key]%>
                  <%if(sub3obj['x-compute']){%> //x-compute 4th level field
                    data.<%=key%>[index].<%=subkey%>[index2].<%=sub2key%>.[index3].<%=sub3key%> = <%= sub3obj['x-compute'].function %>( 
                      <% if(sub3obj['x-compute'].paramters){ %>
                        <% let sub3p = sub3obj['x-compute'].paramters %>
                        <%for(let m=0; m<sub3p.length; m++){%>
                          <%= subp[m].replace('@data','data').replace('@index','index').replace('@index2','index2').replace('@index3','index3')  %>,
                        <%}%>
                      <%}%>
                      )
                  <%}%>
                 
                <%})%>
              <%} /* process compute for 4rd level sub tables */%>
            <%})%>
            } 
          <%} // process compute for 3rd level sub tables%>
        <%}) %> 
        } 
      <%} /*process compute for 2nd level sub tables*/%>
    <%}) %>
  }


  /***************************** additional execute *****************************************/
    

}
