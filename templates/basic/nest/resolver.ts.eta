/**
 * This file was automatically generated by simpleapp generator. It is changable
 * --remove-this-line-to-prevent-override--
 * last change 2024-04-17
 * Author: Ks Tan
 */
import { Resolver, Query, Mutation, Args, ID,Context } from '@nestjs/graphql';
import * as schemas from '../apischemas';
import { AppUser } from '../commons/decorators/appuser.decorator';
import { UserContext } from '../commons/user.context';
import { <%= it.typename %>, <%= it.typename %>Service } from '../../services/<%= it.doctype.toLowerCase() %>.service';
import { Roles } from '../commons/roles/roles.decorator';
import { Role } from '../commons/roles/roles.enum';

import { Request } from '@nestjs/common';

<% const getFieldType =(proptype, typename,actionname)=>{
    const systemtypes = ['Boolean','boolean','string','String','number','Number','object','Object','integer','Integer']
    if(!typename) throw actionname +" undefine schema";

    let tmptypename = typename.replace('[','').replace(']','')
    
    if(systemtypes.includes(tmptypename)){
      if(proptype=='type' ) tmptypename =tmptypename.toLowerCase();
    }else if(proptype=='schema'){
      tmptypename= 'schemas.'+tmptypename    
    }else{ //type
      tmptypename= 'types.'+tmptypename
    }
  
    if(typename.includes('[')){
      return  proptype=='schema' ?  `[${tmptypename}]` : `${tmptypename}[]`
    }else{
      return tmptypename
    }
  }
  %>


<% let superadmindoctype = ['tenant','globaluser'] %>
@Resolver(() => schemas.<%= it.typename %>)
export class <%= it.typename %>Resolver {
    constructor(private readonly service: <%= it.typename %>Service) { }

    <%if(superadmindoctype.includes(it.doctype)){%>
    @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
    <%}else{%>
    @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
    <%}%>
    @Query(() => [schemas.<%= it.typename %>])
    async <%= it.name %>s(@AppUser() appuser: UserContext): Promise<<%= it.typename %>[]> {                
        
        return await this.service.search(appuser,undefined,undefined,undefined)
    }


    <%if(superadmindoctype.includes(it.doctype)){%>
    @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
    <%}else{%>
    @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
    <%}%>
    @Query(() => schemas.<%= it.typename %>)
    async <%= it.name %>(@AppUser() appuser: UserContext,@Args('id', { type: () => ID } ) id: string): Promise<<%= it.typename %>> {
        
        return await this.service.findById(appuser,id)
    }









    /***************************** begin additionalAPI definations *****************************************/

    <% for(let i=0;i<it.apiSettings.length;i++){%>
    <% let api = it.apiSettings[i] %>
    <% if(api.method!='get') continue %>
    <%if(superadmindoctype.includes(it.doctype)){%>
    @Roles(Role.SuperAdmin,
    <%if(api.requiredRole && api.requiredRole.length>0) { %>
        <% for(let r=0;r<api.requiredRole.length;r++){%>Role.<%=api.requiredRole[r]%>,<%}%>
        <%}%>
    )
    <%}else{%>
    @Roles(Role.SuperAdmin,Role.SuperUser,
        <%if(api.requiredRole && api.requiredRole.length>0) { %>
        <% for(let r=0;r<api.requiredRole.length;r++){%>Role.<%=api.requiredRole[r]%>,<%}%>
        <%}%>
        )
    <%}%>
      @Query(()=> <%= getFieldType('schema',api.responseType,api.action)%>)  



      async <%= it.name %><%=capitalizeFirstLetter(api.action) %>(
        @AppUser() appuser: UserContext,        
        <% if(api.entryPoint && api.entryPoint.includes(':')) {%>
              <%let subpath = api.entryPoint.split('/')%>
              <% for(let a=0;a<subpath.length;a++){%>
                <%const partstr = subpath[a]%>
                <%if(partstr.includes(':')){%>
                  <% const paraname = partstr.replace(':','') %>  
                  @Args('<%=paraname%>') <%=paraname%>: string,
                <%}%>    
              <%}%>  
            <%}%>
             ){
        
          return await this.service.run<%=capitalizeFirstLetter(api.action)%>(appuser,<% if(api.entryPoint && api.entryPoint.includes(':')) {%>
              <%let subpath = api.entryPoint.split('/')%>
              <% for(let a=0;a<subpath.length;a++){%>
                <%const partstr = subpath[a]%>
                <%if(partstr.includes(':')){%>
                  <% const paraname = partstr.replace(':','') %>  
                  <%=paraname%>,
                <%}%>    
              <%}%>  
            <%}%>            
            )              
      } 
    <%}%>
    /***************************** end additionalAPI definitions *****************************************/
}