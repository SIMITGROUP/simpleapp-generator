/**
 * This file was automatically generated by simpleapp generator. It is changable
 * --remove-this-line-to-prevent-override--
 * last change 2024-04-17
 * Author: Ks Tan
 */
import { Resolver, Query, Mutation, Args, ID,Context } from '@nestjs/graphql';
import * as schemas from '../generate/apischemas';
import { AppUser } from '../generate/commons/decorators/appuser.decorator';
import { UserContext } from '../generate/commons/user.context';
import { <%= it.typename %>, <%= it.typename %>Service } from '../services/<%= it.doctype.toLowerCase() %>.service';
import { Request } from '@nestjs/common';

<% let superadmindoctype = ['tenant','globaluser'] %>
@Resolver(() => schemas.<%= it.typename %>)
export class <%= it.typename %>Resolver {
    constructor(private readonly <%= it.name %>Service: <%= it.typename %>Service) { }

    <%if(superadmindoctype.includes(it.doctype)){%>
    @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
    <%}else{%>
    @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
    <%}%>
    @Query(() => [schemas.<%= it.typename %>])
    async <%= it.name %>s(@AppUser() appuser: UserContext): Promise<<%= it.typename %>[]> {                
        
        return await this.<%= it.name %>Service.search(appuser,undefined,undefined,undefined)
    }


    <%if(superadmindoctype.includes(it.doctype)){%>
    @Roles(Role.SuperAdmin,Role.<%= `${it.typename}_search`%>)
    <%}else{%>
    @Roles(Role.SuperAdmin,Role.SuperUser,Role.<%= `${it.typename}_search`%>)
    <%}%>
    @Query(() => schemas.<%= it.typename %>)
    async <%= it.name %>(@AppUser() appuser: UserContext,@Args('id', { type: () => ID } ) id: string): Promise<<%= it.typename %>> {
        
        return await this.<%= it.name %>Service.findById(appuser,id)
    }
}