/**
 * This file was automatically generated by simpleapp generator. It is changable
 * --remove-this-line-to-prevent-override--
 * last change 2024-02-23
 * Author: Ks Tan
 */

import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { UserContext } from '../generate/commons/user.context';
import { <%= it.typename %>Processor } from '../generate/processors/<%= it.doctype %>.processor';
//import { <%= it.typename %>,<%= it.typename %>Hooks} from '../generate/types';
import * as types from '../generate/types';
import * as schemas from '../generate/apischemas';
export { <%= it.typename %>} from '../generate/types';
<% const getFieldType =(proptype, typename,actionname)=>{
  const systemtypes = ['Boolean','boolean','string','String','number','Number','object','Object','integer','Integer']
  console.log("run service typename----",typename)
  if(!typename) throw actionname +" undefine schema";

  let tmptypename = typename.replace('[','').replace(']','')
  
  if(systemtypes.includes(tmptypename)){
    if(proptype=='type' ) tmptypename =tmptypename.toLowerCase();
  }else if(proptype=='schema'){
    tmptypename= 'schemas.'+tmptypename    
  }else{ //type
    tmptypename= 'types.'+tmptypename
  }

  if(typename.includes('[')){
    return  proptype=='schema' ?  `[${tmptypename}]` : `${tmptypename}[]`
  }else{
    return tmptypename
  }
}
%>

@Injectable()
export class <%= it.typename %>Service extends <%= it.typename %>Processor {
  <% const config = it.jsonschema['x-simpleapp-config']%>   
  <%if(config['loseDataIsolation']){%>protected strictIsolation = false;<%}%> 
      
   //protected hooks: types.<%= it.typename %>Hooks = {}
    constructor(
        @InjectModel('<%= it.typename %>')  mydoc: Model<types.<%= it.typename %>>
        ){
        super(mydoc)
    }

/***************************** begin x-document-api definitions *****************************************/

<% for(let i=0;i<it.apiSettings.length;i++){%>
<% let api = it.apiSettings[i] %>
<% if (api.systemService) continue %>
  async run<%= capitalizeFirstLetter(api.action) %>(
    appuser: UserContext,    
    <% if(api.entryPoint && api.entryPoint.includes(':')) {%>
          <%let subpath = api.entryPoint.split('/')%>
          <% for(let a=0;a<subpath.length;a++){%>
            <%const partstr = subpath[a]%>
            <%if(partstr.includes(':')){%>
              <% const paraname = partstr.replace(':','') %>  
               <%=paraname%>: string,
            <%}%>    
          <%}%>  
        <%}%>
        <% if(api.queryPara && api.queryPara.length>0) {%>
            <%for(let q=0;q<api.queryPara.length; q++){%>
              <% const qp = api['queryPara'][q] %>
              <%=qp%>: string,
            <%}%>
        <%}%>
            
        <%if(['post','put','patch'].includes(api.method.toLowerCase())){%> 
              data:<%= getFieldType('schema',api.schema,api.action)%>,
            <%}%>

         ){
    <%if (api.workflowSetting && api.workflowSetting.bpmn){ %>      
      return this.startWorkflow(appuser,'<%=api.workflowSetting.bpmn%>',data)
    <%} else {%>
        <% if(api.responseType=='String') {%>
            return "OK"
        <%} else if(api.responseType=='Number'){%>
            return 1
        <%} else if(api.responseType=='Boolean'){%>
            return true
        <%} else if(api.responseType.substring(0,1)=='['){%>
            return [] as schemas.<%= api.responseType.replace('[','').replace(']','') %>[]
        <%}else{%>
           return {} as <%= getFieldType('schema',api.responseType,api.action)%>
        <%}%>
      
        
       
    <%}%>
  } 
<%}%>


/***************************** end x-document-api definitions *****************************************/
}
