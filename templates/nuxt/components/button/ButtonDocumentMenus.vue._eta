<template>
  <ButtonText
    id="mainmenu-buttons"
    @click="showMenu"
    class="flex flex-col text-center w-16 cursor-pointer mainmenu-button rounded-xl"
  >
    <svg
      class="w-6 h-6 text-gray-800 dark:text-white"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      fill="none"
      viewBox="0 0 24 24"
    >
      <path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-width="2"
        d="M5 7h14M5 12h14M5 17h14"
      />
    </svg>

    <div class="text-custom font-medium">{{ title }}</div>
  </ButtonText>
  <Drawer
    v-model:visible="visible"
    dismissableMask
    position="left"
    class="!w-1/3"
    #container
  >
    <div class="w-full flex flex-row">
      <div class="flex-1 p-2">
        <TextTitle class="">{{ t("mainMenus") }}</TextTitle>
      </div>
      <ButtonText @click="visible = false">
        <i class="pi pi-times"></i>
      </ButtonText>
    </div>

    <Tabs lazy :value="activeindex" @tab-click="clickTab">
      <TabList>
        <Tab
          v-for="(tabname, index) in Object.keys(tabs)"
          :key="index"
          :value="index"
        >
          {{ t(tabname) }}
        </Tab>
      </TabList>
      <TabPanels>
        <TabPanel
          v-for="(tabname, index) in Object.keys(tabs)"
          :key="index"
          :value="index"
        >
          <div class="flex flex-col gap-2 border-b-1">
            <ToolWith :value="getChildren(tabs[tabname], true)" #default="w">
              <template v-for="(documents, subtitle) in w.value">
                <div class="p-2">
                  <TextTitle class="text-gray">{{
                    t(subtitle as unknown as string)
                  }}</TextTitle>
                  <div>
                    <TextPrimary
                      v-for="(pagename, pageindex) in documents"
                      class="ml-2 p-2"
                    >
                      <NuxtLink
                        :to="`/${getCurrentXorg()}/${pagename}`"
                        @click="visible = false"
                      >
                        {{ pagename }}
                      </NuxtLink>
                    </TextPrimary>
                  </div>
                </div>
                <!-- <div> -->
                <!-- {{documents}} && {{subtitle}} -->
                <!-- <div v-if="documents.length > 0" class="rounded bg-blue-100 p-4"> -->
                <!-- sss  {{subtitle}} -->
                <!-- <TextBold class="text-gray-600">{{ t(subtitle as unknown as string) }}</TextBold>
                  <div v-for="docname in documents">
                    <NuxtLink
                      :to="getDocumentUrl(docname)"
                      @click="visible = false"
                    >
                      <TextPrimary>{{ t(docname) }}</TextPrimary>
                    </NuxtLink>
                  </div> -->
                <!-- </div> -->
              </template>
            </ToolWith>
          </div>
        </TabPanel>
      </TabPanels>
    </Tabs>
  </Drawer>
</template>
<script lang="ts" setup>
/**
 * This file was automatically generated by simpleapp generator during initialization. It is changable.
 * --remove-this-line-to-prevent-override--
 * last change 2025-03-16
 * author: Ks Tan
 */
const visible = ref(false);
const lastactiveindex = ref(0);
const activeindex = ref(0);
const m: string[] = getMenustFromPageMeta();
const props = defineProps<{
  title?: string;
}>();
type TabMenu = { [key: string]: string[] };

const clickTab = (tabevent: { event: Event; index: number }) => {
  lastactiveindex.value = tabevent.index;
};
const getChildren = (menunames: string[], checkPermission?: boolean) => {
  let list: TabMenu = {};

  for (let mindex = 0; mindex < menunames.length; mindex++) {
    const menuname = menunames[mindex];
    const tabname = menuname.split("/")[0];
    if (!list[tabname]) list[tabname] = [];
    const newmenuname = menuname.replace(`${tabname}/`, "");

    if (!list[tabname].includes(newmenuname)) {
      if (!checkPermission) list[tabname].push(newmenuname);
      else if (checkPermission && canPerform(newmenuname, "access"))
        list[tabname].push(newmenuname);
    }
  }
  return list;
};

const showMenu = () => {
  activeindex.value = lastactiveindex.value;
  visible.value = true;
};
let tmptabs = getChildren(m);
let tabs: any = {};
const tabkeys = Object.keys(tmptabs)
  .sort()
  .forEach((tabname) => {
    tabs[tabname] = tmptabs[tabname];
  });

// const emit = defineEmits(['select'])
// const selectMenu = (menuname: { name: string; children: any }) => {
//   goTo(menuname.name);
//   visible.value = false;
// };

// const m = getMenustFromPageMeta();
// let treemenu: any[] = [];

// getMenustFromPageMeta().reduce(
//   (r, item) => {
//     item.split("/").reduce((o, name) => {
//       var temp = (o.children = o.children || []).find((q) => q.name === name);
//       if (!temp) o.children.push((temp = { name }));
//       return temp;
//     }, r);
//     return r;
//   },
//   { children: treemenu },
// );

// treemenu = treemenu.sort((a, b) => (a.name < b.name ? -1 : 1));
</script>

<style scoped>
.mainmenu-button {
  display: flex;
  justify-content: center;
  align-items: center;
  color: #8a8a8a;
}

.icon {
  color: inherit;
  font-size: 1.5rem;
}

.mainmenu-button:hover,
.mainmenu-button:focus,
.mainmenu-button:active {
  /* background-color: #f0fcff; */
}
.text-custom {
  font-size: 0.6rem;
}
</style>
