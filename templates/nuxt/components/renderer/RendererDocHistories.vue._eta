<template>
  <div
    class="flex flex-row text-xs cursor-pointer justify-end p-2 gap-2"
    v-if="data?.updated && data?.updated != ''"
    @click="viewHistories"
  >
    <!-- <ImageAvatar
      v-if="data?.updatedBy"
      :id="data.updatedBy"
      :size="36"
    ></ImageAvatar> -->
    <IconClock />
    <div class="flex flex-col flex-1">
      <TextDocStatus
        v-if="data?.documentStatus"
        :docStatus="data?.documentStatus"
      />
      <RendererUidToName :uid="data.updatedBy"/>
      <!-- <TextSubsubtitle class="text-gray-400 italic"
        >{{ t("updated") }}:</TextSubsubtitle
      > -->
      <RendererDateAge :value="data?.updated" class="text-gray-400 italic" />
    </div>

    <Dialog
      v-model:visible="visibleHistories"
      modal
      :header="t(documentName) + ' ' + t('histories')"
      :pt="{ root: { class: 'w-1/3' } }"
    >
      <Timeline :value="events" class="w-full md:w-20rem">
        <template #opposite="{ item }">
          <div class="flex flex-row">
            <!-- <ImageAvatar :email="item.email" :id="item.uid" /> -->
            <div class="flex flex-col">         
              
              <RendererUidToName :uid="item.uid"/>
              <RendererDateAge
                class="italic text-gray-400 text-xs whitespace-nowrap "
                :value="item.eventDate"
              />

            </div>
          </div>
        </template>
        <template #content="{ item }">          
          <div class="flex flex-row gap-1 cursor-pointer" @click="viewEventData(item._id)">
            <div>{{ item.status }}</div>
            <IconFileTextSetting />  
          </div>
        </template>
      </Timeline>
    </Dialog>
    <Drawer
      v-model:visible="visibleEventData"
      position='right'
      class="w !w-1/2"
      modal
      :header="'#'+eventData?._id"

    >
      <pre>
        {{eventData}}
      </pre>
    </Drawer>
  </div>
</template>
<script lang="ts" setup>
  /**
 * This file was automatically generated by simpleapp generator during initialization. It is changable.
 * --remove-this-line-to-prevent-override--
 * last change 2025-03-16
 * author: Ks Tan
 */
import Drawer from 'primevue/drawer';
import TextSubsubtitle from "../text/TextSubsubtitle.vue";
import RendererDateTime from "./RendererDateTime.vue";
import { Documentevent, User } from "~/simpleapp/generate/openapi";
const eventDoc = useNuxtApp().$DocumenteventDoc();
const visibleHistories = ref(false);
const visibleEventData = ref(false)
const eventData = ref()
const eventId = ref('')
const props = defineProps<{ data: any; documentName: string }>();
type EventHistory = {
  _id:string
  status: string;
  eventDate: string;
  uid?: string;  
};
const events = ref<EventHistory[]>([]);
const viewEventData = async(id:string)=>{
  visibleEventData.value = true
  eventData.value = (await eventDoc.getById(id)).data
  console.log("eventData",eventData)
}
const getEvents = async () => {

  const list: Documentevent[] = await eventDoc.search({
    filter: {
      documentName: props.documentName,
      documentId: props.data._id,
    },
    fields: ["created", "createdBy", "eventType"],
    sorts: [["created", "asc"]],    
  });
  
  
    events.value = list.map((item) => ({
      _id: <string>item._id,
      status: t(<string>item.eventType),
      eventDate: <string>item.created,
      uid: <string>item.createdBy,

    }));
  
};
const severity = computed(() => {
  const stat = props.data.docStatus;
  if (props.data.docStatus == "confirm") return "success";
  else if (props.data.docStatus == "void") return "danger";
  else if (props.data.docStatus == "draft") return "secondary";
  else return "warning";
});

const viewHistories = async () => {
  visibleHistories.value = true;
  await getEvents();
  // console.log("histories");
};
</script>
