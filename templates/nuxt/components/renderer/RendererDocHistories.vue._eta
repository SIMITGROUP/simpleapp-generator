<template>
  <div
    class="flex flex-row text-xs cursor-pointer justify-end"
    v-if="data?.updated && data?.updated != ''"
    @click="viewHistories"
  >
    <ImageAvatar
      v-if="data?.updatedBy"
      :id="data.updatedBy"
      :size="36"
    ></ImageAvatar>
    <div class="flex flex-col flex-1">
      <TextDocStatus
        v-if="data?.documentStatus"
        :docStatus="data?.documentStatus"
      />
      <!-- <TextSubsubtitle class="text-gray-400 italic"
        >{{ t("updated") }}:</TextSubsubtitle
      > -->
      <RendererDateAge :value="data?.updated" class="text-gray-400 italic" />
    </div>

    <Dialog
      v-model:visible="visibleHistories"
      modal
      :header="t(documentName) + ' ' + t('histories')"
      :pt="{ root: { class: 'w-1/3' } }"
    >
      <Timeline :value="events" class="w-full md:w-20rem">
        <template #opposite="{ item }">
          <div class="flex flex-row">
            <ImageAvatar :email="item.email" :id="item.uid" />
            <div class="flex flex-col">
              <span>{{ item.fullName }}</span>
              <RendererDateAge
                class="italic text-gray-400 text-xs whitespace-nowrap"
                :value="item.eventDate"
              />
            </div>
          </div>
        </template>
        <template #content="{ item }">
          <div>
            <div>{{ item.status }}</div>
          </div>
        </template>
      </Timeline>
    </Dialog>
  </div>
</template>
<script lang="ts" setup>
/**
 * This file was automatically generated by simpleapp generator during initialization. It is changable.
 * --remove-this-line-to-prevent-override--
 * last change 2024-02-22
 * author: Ks Tan
 */
import TextSubsubtitle from "../text/TextSubsubtitle.vue";
import RendererDateTime from "./RendererDateTime.vue";
import { Documentevent, User } from "~/simpleapp/generate/openapi";
const eventDoc = useNuxtApp().$DocumenteventDoc();
const visibleHistories = ref(false);
const props = defineProps<{ data: any; documentName: string }>();
type EventHistory = {
  status: string;
  eventDate: string;
  uid?: string;
  fullName?: string;
  email?: string;
};
const events = ref<EventHistory[]>([]);
const getEvents = async () => {
  const simplelog = [
    {
      status: t("created"),
      eventDate: props.data.created,
      uid: props.data.createdBy,
    },
  ];
  if (props.data.updated != props.data.created) {
    simplelog.push({
      status: t("lastUpdate"),
      eventDate: props.data.updated,
      uid: props.data.updatedBy,
    });
  }

  // events.value=[];
  // console.log("Renderer getEvents histories");
  const list: (Documentevent & { _user: User })[] = await eventDoc.search({
    filter: {
      documentName: props.documentName,
      documentId: props.data._id,
    },
    fields: ["created", "createdBy", "eventType"],
    sorts: [["created", "asc"]],
    lookup: { "user.uid": "createdBy" },
  });
  if (list.length > 0) {
    events.value = list.map((item) => ({
      _id: <string>item._id,
      status: t(<string>item.eventType),
      eventDate: <string>item.created,
      uid: <string>item.createdBy,
      fullName: <string>item._user.fullName,
      email: <string>item._user.email,
    }));
  } else {
    events.value = simplelog;
  }
};
const severity = computed(() => {
  const stat = props.data.docStatus;
  if (props.data.docStatus == "confirm") return "success";
  else if (props.data.docStatus == "void") return "danger";
  else if (props.data.docStatus == "draft") return "secondary";
  else return "warning";
});

const viewHistories = async () => {
  visibleHistories.value = true;
  await getEvents();
  // console.log("histories");
};
</script>
