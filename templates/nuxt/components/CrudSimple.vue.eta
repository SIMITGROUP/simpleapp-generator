<script setup lang="ts">
/**
* This file was automatically generated by simpleapp generator during initialization.
 * DO NOT MODIFY IT BY HAND.
 * last change 2023-09-09
 * author: Ks Tan
 */
import {ref} from 'vue'
import _ from 'lodash'
import { SimpleAppClient } from  '../simpleapp/generate/clients/SimpleAppClient' //'../SimpleAppClient';
// import SimpleAppForm from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppForm.vue';
// import SimpleAppDatatable from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppDatatable.vue';
import Dialog from 'primevue/dialog';
// import axios from 'axios'
import ProgressSpinner from 'primevue/progressspinner';
import ConfirmPopup from 'primevue/confirmpopup';
import { useConfirm } from "primevue/useconfirm";
import {SearchBody} from '~/types'
const confirm = useConfirm();
const props = defineProps<{
    document:SimpleAppClient<any,any>
    listColumns:string[]
    path:string
    title:string
    sorts?: any
}>()
const resourcename = ref( _.upperFirst(props.document.getDocName()))
const visible = ref(false)
const obj = props.document
const data = obj.getReactiveData()
const disabled=ref(false)
const recordlist = ref();
const router = useRouter()
const route = useRoute()
const filters = ref()
const popuptitle = ref("New "+props.title)
const systemwindows = ref(false)
const {$event} = useNuxtApp()
const currentjsonschema:any = props.document.getSchema()

if(['none'].includes(currentjsonschema['x-isolation-type'])){
  systemwindows.value=true
}
watch(visible,(newvalue )=>{
  if(newvalue == false){
    if(data.value.created!=''){
      newData()
    }    
  }

})
defineShortcuts({
  'ctrl_enter': () => newData()
})

const refresh = () => {
  const searchbody: SearchBody = {
    fields: props.listColumns.concat(['created']),
    sorts:props.sorts
  }
  obj.search(searchbody).then((res:any) => {    
    recordlist.value = res;
    disabled.value=false
  });
};
const newData = () => {
  router.push({ path: `${props.path}` })  
  obj.setNew()    
  visible.value=true;
  $event("newRecord")
};

const triggerEdit = (event: any) => {
  let id = event.data._id.toString()
  router.push({ path: `${props.path}/${id}` })  
};
const editRecord = (id:string) => {
  
  console.log("editRecord",id)
  
  obj.getById(id).then(()=>{
    visible.value=true
    popuptitle.value = "Edit "+props.title
    $event("editRecord",id)
  });
  
};
const createData = async () => {
  disabled.value=true
  
    obj.create().then(()=>{
      visible.value=false
      refresh()
    }).catch(err=>{
      console.error(err)
    }).finally(()=>disabled.value=false)
 
};
const updateData = async () => {
  disabled.value=true
  
    obj.update().then(()=>{
      visible.value=false
      refresh()
    }).catch(err=>{
      console.error(err)
    }).finally(()=>disabled.value=false)
  
};
const deleteData = (event:Event) => {
    
    confirm.require({
        target: event.currentTarget as HTMLElement,
        message:'Delete?',
        icon: 'pi pi-exclamation-triangle',
        acceptClass: 'p-button-danger',
        accept: ()=>{
            disabled.value=true 
            obj.delete(data.value._id ?? "").then(()=>visible.value=false).finally(() => {
                refresh();    
            });
        },
        reject: () => {
            console.log("Cancel delete")
        }
    })  
};

onNuxtReady(()=>{
  refresh()
  if (route.params.id) {
    const recordid:string = route.params.id.toString()
    editRecord(recordid)  
  }
  
})


</script>
 
<template>
    <div class="simpleapp-crudsimple">    
      <h1 v-if="systemwindows" class="error-text text-center">* system administration screen</h1>      
      <Button class=" btn-primary" @click="newData" v-tooltip="'Add new(ctrl+enter)'" v-if="canPerform(resourcename,'create')">New</Button>
      <SimpleAppDatatable
            @row-dblclick="triggerEdit"
            v-model="recordlist"                                 
            :setting="{}"
            :columns="listColumns"
          >         
        </SimpleAppDatatable>

      <DebugDocumentData v-model="data"/>
    </div>

    <Dialog v-model:visible="visible" modal :header="popuptitle" class="crudsimple-dialog" :autoZIndex="false" :style="{zIndex:100, width: '80vw' }">        
        <SimpleAppForm :document="obj"  #default="o">     
            <div class="simpleapp-tool-bar   col-span-4 text-left gap-4"  >
              <Button class=" btn-default" :disabled="disabled" @click="newData" type="button" v-if="canPerform(resourcename,'create')">New</Button>
              <Button class=" btn-primary" :disabled="disabled" @click="createData" type="button" v-if="canPerform(resourcename,'create') && data.created==''">Create</Button>
              <Button class=" btn-primary" :disabled="disabled" @click="updateData" type="button" v-if="canPerform(resourcename,'update') && data.created!=''">Update</Button>
              <Button class=" btn-danger" :disabled="disabled" @click="deleteData($event)" type="button" v-if="canPerform(resourcename,'delete') && data.created!=''">Delete</Button>
              <ProgressSpinner v-if="disabled==true" style="width: 2rem; height: 2rem" ></ProgressSpinner>
              <ConfirmPopup></ConfirmPopup>
              
            </div>
            <div class="grid grid-cols-4 gap-4 w-full">
          <slot :data="o.data" :getField="o.getField" name="default"></slot>
        </div>
      </SimpleAppForm>
    </Dialog>
</template>

<style scoped>
.crudsimple-dialog{
    z-index: 100;
}
</style>