<template>
  <title v-if="!id">{{ t(doc.getDocName()) }}</title>

  <div v-if="isMobile()" class="w-full">
    <div class="p-2 flex flex-row justify-end place-items-center h-14">
      <div class="flex-1">
        <TextMain>{{ t(doc.getDocName()) }}</TextMain>
      </div>
      <div>
        <ButtonText
          v-if="allowAction('create')"
          @click="goTo(doc.getDocName(), 'new')"
          class="pi pi-plus"
        ></ButtonText>
      </div>
    </div>
    <ListDocument
      v-if="recordlist"
      @click="showDialogForm"
      :recordlist="recordlist"
      :unique-key="uniqueKey"
      :document-title="documentTitle"
    >
      <template #default="{ index, item }">
        <slot name="mobileList" :index="index" :item="item"></slot>
      </template>
    </ListDocument>
  </div>
  <div v-else class="simpleapp-crudsimple">
    <ListDocumentTable
      v-if="recordlist"
      :value="recordlist"
      :title="doc.getDocName()"
      :unique-key="<string>uniqueKey"
      :document-title="<string>documentTitle"
      :columns="columns"
    >
      <template #toolbar>
        <div class="w-full text-left">
          <ButtonPrimary          
            @click="newData"
            v-tooltip="t('new')"
            v-if="allowAction('create') && canPerform(resourcename, 'create')"
          >
            <i class="pi pi-plus"></i>
          </ButtonPrimary>
        </div>
      </template>
      <template #default>
        <slot name="dataTableColumns">
          <!-- :sortable="schemacols[col] && schemacols[col].type!='object'" -->
          <template
            v-for="col in columns.filter((item, index) => index < maxcolumns)"
          >
            <Column
              v-if="schemacols[col]"
              :header="t(col)"
              sortable
              :field="schemacols[col]['x-foreignkey'] ? col + '.label' : col"
              :class="`min-w-[5rem] ${getCssClass(col)}`"
              #body="{ index, data }"
            >
              <RendererLink
                v-if="uniqueKey === col || documentTitle === col"
                :value="data"
                :setting="{ path: resourcename.toLocaleLowerCase() }"
                :fields="[col]"
              >
              </RendererLink>
              <TextMain v-else-if="col == 'documentStatus'">{{
                t(data[col])
              }}</TextMain>
              <RendererMoney
                v-else-if="schemacols[col]['format'] == 'money'"
                v-model="data[col]"
              >
              </RendererMoney>
              <span v-else-if="typeof schemacols[col].enum != 'undefined'">
                {{ t(data[col]) }}
              </span>
              <span v-else-if="schemacols[col].type == 'boolean'">
                <RendererBoolean v-model="data[col]" />
              </span>
              <RendererForeignKey
                v-else-if="schemacols[col]['x-foreignkey']"
                v-model="data[col]"
                :setting="{ collection: schemacols[col]['x-foreignkey'] }"
              >
                {{ data[col]?.label ?? data[col]?.code ?? data[col] }}
              </RendererForeignKey>
              <span v-else-if="schemacols[col].format == 'date'">
                <RendererDate v-model="data[col]" />
              </span>
              <span v-else-if="schemacols[col].format == 'datetime'">
                <RendererDateTime v-model="data[col]" />
              </span>
              <span v-else-if="data[col]?.label !== undefined">{{
                data[col].label
              }}</span>
              <span v-else>{{ data[col] }}</span>
            </Column>
          </template>
        </slot>
      </template>
    </ListDocumentTable>
  </div>
  <OverlayPanelWithToolBar
    v-model="showDialog"
    :closeEventName="doc.getDocName()"
    :dismissable="false"
    :position="sidebarposition"
  >
    <template #headerLeft>
      <ButtonText @click="showDialog = false">
        <i class="pi pi-times"></i>
      </ButtonText>
    </template>
    <template #headerCenter>
      <TextTitle class="text-center text-white">{{
        t(doc.getDocName())
      }}</TextTitle>
    </template>
    <template #headerRight>
      <ButtonText
        @click="
          sidebarposition =
            sidebarposition == 'right' ? (sidebarposition = 'full') : 'right'
        "
      >
        <i v-if="sidebarposition == 'right'" class="pi pi-window-maximize" />
        <i v-if="sidebarposition == 'full'" class="pi pi-window-minimize" />
      </ButtonText>
    </template>

    <div class="p-2">
      <slot name="default">
        <NuxtPage :_id="id"></NuxtPage>
      </slot>
    </div>
  </OverlayPanelWithToolBar>
</template>

<script setup lang="ts" generic="T extends { [key: string]: any }">
/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { ref } from "vue";
import _ from "lodash";
import { SearchBody } from "~/types";
import { SimpleAppClient } from "~/simpleapp/generate/clients/SimpleAppClient";
const sidebarposition = ref("right");
const props = defineProps<{
  document: SimpleAppClient<any, any>;
  data: T;
  dismissable?: boolean;
  columns: string[];
  mobileColumns?: string[];
  sorts?: string[][];
  availableActions?:string[]
}>();
const maxcolumns = 16;
const emits = defineEmits(["selectRow"]);
const id = computed(() => getPathPara("id"));
const resourcename = ref(_.upperFirst(props.document.getDocName()));
const visible = ref(false);
const showDialog = ref(false);
const op = ref();
const doc = props.document;
const disabled = ref(false);

const router = useRouter();
const route = useRoute();
const filters = ref();
const popuptitle = ref(t(doc.getDocName()));
const systemwindows = ref(false);
const { $event, $listen } = useNuxtApp();
const recordlist = ref<T[]>();
const uniqueKey = doc.getSchema()["x-simpleapp-config"].uniqueKey;
const documentTitle = doc.getSchema()["x-simpleapp-config"].documentTitle;
const schemacols = doc.getSchema().properties;
const allowAction = (actname:string)=>{
  if(props.availableActions === undefined) return true
  else if(Array.isArray(props.availableActions) &&  props.availableActions.length>0 && !props.availableActions.includes(actname)) 
    return false
  else return true
}
const getCssClass = (col: string) => {
  if (schemacols[col]?.type == "number") return "text-right";
  else if (schemacols[col]?.type == "boolean")
    return "text-center place-items-center";
  else return "text-left";
};
const refresh = () => {
  const searchbody: SearchBody = {
    fields: props.columns,
    sorts: props.sorts,
  };
  doc.search(searchbody).then((res: any) => {
    recordlist.value = res;
    disabled.value = false;
  });
};
const newData = () => {
  router.push({ path: getDocumentUrl(doc.getDocName(), "new") });
  popuptitle.value = t(doc.getDocName());
  doc.setNew();
  visible.value = true;
};

onMounted(() => {
  refresh();
});
$listen("RefreshDocumentList", (data) => {
  if (data.documentName == doc.getDocName()) {
    refresh();
  }
});
const showDialogForm = (item: T) => {
  goTo(doc.getDocName(), item._id);
  popuptitle.value = <string>item[documentTitle as keyof T];
};

watch(showDialog, () => {
  if (!showDialog.value) {
    goTo(props.document.getDocName());
  }
});
watch(
  () => useRoute().path,
  async () => {
    if (!isMobile()) {
      if (getPathPara("id")) {
        showDialog.value = true;
      } else {
        showDialog.value = false;
      }
    }
  },
);

onMounted(() => {
  if (id.value) {
    showDialog.value = true;
  } else {
    showDialog.value = false;
  }

  useNuxtApp().$listen("CloseDialog", (documentName: string) => {
    if (documentName == doc.getDocName()) {
      goTo(resourcename.value);
      showDialog.value = false;
    }
  });
});
</script>
