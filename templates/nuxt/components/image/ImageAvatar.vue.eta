<template>
  <ImageToBase64Uploader
    v-if="changable"
    #default
    :style="`width:${size}px; height:${size} px`"
    :class="`place-content-center `"
    @image-uploaded="handleBase64"
    :imagePath="imagepath"
  >
    <NuxtImg
      class="w-full h-full border-4 rounded-full"
      :src="imagepath"
      :key="imageKey"
    />
  </ImageToBase64Uploader>
  <div
    v-else
    class="inline-block text-black"
    :style="`width:${size}px; height:${size} px`"
  >
    <NuxtImg
      class="w-full h-full border rounded-full"
      :key="refreshkey"
      :src="imagepath"
    />
  </div>
</template>
<script lang="ts" setup>
import { updateAvatarVersion } from "~/composables/stringHelper.generate";

// import {KeyValue} from ''
const props = defineProps<{
  changable?: boolean;
  size?: number;
  uid?: string;
  refreshkey?: number;
}>();
const size = computed(() => props.size ?? 36);
const imageKey = ref(0);
const uid = computed(() => props.uid ?? getUserProfile()?.uid);
// const xorgpath = getCurrentXorg() ? `${getCurrentXorg()}/` : "MC0wLTA/";

const imagepath = computed(() => getAvatarByUid(uid.value)); //`${xorgpath}images/organization/${orgRecordId.value}`;

const handleBase64 = async (data: string) => {
  await fetch(`/api/profile/avatar`, {
    method: "POST",
    body: data.split("base64,")[1],
  }).then(async (res) => {
    await fetch(imagepath.value, { cache: "reload", credentials: "include" });
    imageKey.value++;
    updateAvatarVersion();
    // useNuxtApp().$event('RefreshUser',uid.value)
  });
};
</script>
