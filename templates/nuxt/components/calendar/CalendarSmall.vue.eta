<template>
  <vue-cal
    :id="id"
    class="w-full"
    hide-view-selector
    click-to-navigate
    :time="false"
    today-button
    active-view="month"
    :disable-views="['week', 'day']"
    :selected-date="selectedDate"
    events-count-on-year-view
    @view-change="viewChange"
    :events="allevents"
    @cell-focus="chooseDate"
    xsmall
  >
    <template #today-button>
      <!-- Using Vuetify (but we prefer Wave UI ðŸ¤˜) -->
      <div @click="chooseDate(new Date(), true)">{{ t("today") }}</div>
    </template>
    <template #cell-content="{ cell, events }">
      <div @contextmenu="(mouseevent) => onRightclickDate(mouseevent, cell)">
        <div>
          <s
            v-if="dateExists(new Date(cell.formattedDate), alloffdays)"
            v-tooltip="getHolidayName(new Date(cell.formattedDate))"
            class="text text-red-400 font-bold"
            >{{ cell.content }}</s
          >
          <span v-else>{{ cell.content }} </span>
        </div>
        <div>
          <slot name="default" :cell="cell" events="events">
            <Badge
              v-if="events.length > 0"
              @contextmenu="(mouseevent) => onRightClickDate(mouseevent, cell)"
              severity="info"
              :value="events.length"
            />
          </slot>
        </div>
      </div>
    </template>
  </vue-cal>
</template>
<script lang="ts" setup generic="T">
/**
 * This file was automatically generated by simpleapp generator during initialization.
 * IT IS NOT CHANGABLE
 * last change 2024-02-22
 * author: Ks Tan
 */
import VueCal, { Event, SplitDaysAttributes } from "vue-cal";
import {
  CalEventType,
  CalRightClickEvent,
  OffDay,
  CalViewChange,
} from "~/types";
const viewStatus = ref<CalViewChange>();
const props = defineProps<{
  id: string;
  items: CalEventType<T>[];
  offdays: OffDay[];
}>();
const emits = defineEmits(["chooseDate", "rightClick"]);
const alloffdays = computed(() => props.offdays.map((item) => item.date));
const selectedDate = defineModel<Date>({ required: true });
const getHolidayName = (date: Date) =>
  props.offdays.find((item) => item.date.getTime() == date.getTime())?.title;
const allevents = computed(() => {
  const list = props.items.map((item) => {
    if (item.start instanceof Date)
      item.start = item.start.format("YYYY-MM-DD HH:mm");
    if (item.end instanceof Date)
      item.end = item.end.format("YYYY-MM-DD HH:mm");
    return item;
  });
  return list;
});
const viewChange = (event: CalViewChange) => {
  viewStatus.value = event;
};
const chooseDate = (date1: Date, force?: boolean) => {  
  if (force || !viewStatus.value || viewStatus.value.view == "month") {
    selectedDate.value = date1;    
    emits("chooseDate", date1);
  }
};
const onRightClickDate = (e: MouseEvent, cell: CalRightClickEvent) => {
  emits("rightClick", e, cell);
};
</script>
