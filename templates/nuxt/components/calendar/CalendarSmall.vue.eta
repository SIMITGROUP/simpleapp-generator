<template>    
  <DatePicker 
      v-model="selectedDate"
      inline            
      @update:modelValue="chooseDate"
      :pt="{root:{class:'w-full'}}" 
      @month-change="viewChange"
      @year-change="viewChange"
      class="smallcalendar">
      <template #footer>
          <div class="p-2 flex flex-row justify-between">
              <ButtonPrimary @click="goToday()">{{ t('today') }}</ButtonPrimary>
              <TextSubsubtitle class="text-right"
                  >{{ items.length }} {{ t("records") }}</TextSubsubtitle>

          </div>
      </template>
      <template #date="{date}">
          <div class="flex flex-col text-center" >            
              <s v-if="isHoliday(date)" class="text-red-600">
                  {{ date.day }}                     
              </s>
              <span v-else-if="isOffDay(date)" class="text-gray-400">
                  {{ date.day }}
              </span>
              <template v-else>
                  {{ date.day }}
              </template>
              <Badge
                  v-if="getEventQty(date) > 0"                
                  severity="info"
                  :value="getEventQty(date)"
              />
          </div>
      </template>
  </DatePicker>
</template>
<script setup lang="ts" generic="T">
import { DatePickerDateSlotOptions, DatePickerMonthChangeEvent } from "primevue/datepicker";

import {
CalEventType,
CalRightClickEvent,
OffDay,
CalViewChange,
} from "~/types";

const props = defineProps<{
id: string;
items: CalEventType<T>[];
holidays: OffDay[];
}>();
const emits = defineEmits(["chooseDate", "viewChange"]);


const selectedDate = defineModel<Date>({ required: true });
const offdays = ref<string[]>([]);
type DateType = {
  day: number
  month : number
  otherMonth: boolean
  selectable : boolean
  today : boolean
  year: number
}

const disableDays=computed(()=>{
  return offdays.value.map(item=>{
      if(item=='sun')return 0
      else if(item=='mon')return 1
      else if(item=='tue')return 2
      else if(item=='wed')return 3
      else if(item=='thu')return 4
      else if(item=='fri')return 5
      else if(item=='sat')return 6
  })
})

function isHoliday(date: DatePickerDateSlotOptions) {

  for(let i = 0 ; i<props.holidays.length;i++){
      const item = props.holidays[i]
      const currenyday = getDayJs()(item.date).date()
      const currentmonth = getDayJs()(item.date).month()
      const currentyear = getDayJs()(item.date).year()
      if(currenyday==date.day && currentmonth==date.month && currentyear==date.year){
          return true
      }
  }
  return false   
}
function goToday(){
  selectedDate.value= new Date(today())
  chooseDate(new Date(today()))
}
function chooseDate(date: string | string[] | Date | Date[] | undefined){
  emits('chooseDate',date)
}

const isOffDay = (date:CalendarDateSlotOptions) => {    
const dayname: string = new Date(date.year,date.month, date.day)

  .toLocaleString("en", { weekday: "short" })
  .toLowerCase();
if (offdays.value.includes(dayname)) return true;
else return false;
};

const getEventQty = (date:CalendarDateSlotOptions)=>{
  const checkdate = dateToISOWithoutConvert(new Date(date.year,date.month, date.day)).substring(0,10)    
  const recordlength =  props.items.filter(item=>item.start==checkdate).length
  return recordlength
}
const viewChange = (event: DatePickerMonthChangeEvent) => {    
  emits("viewChange", event);
};


onMounted(() => {
  offdays.value = getCurrentBranch()?.branch.offdays ?? [];
});
</script>
<style >
.smallcalendar td {   
 height: 3rem;
 border: solid 1px #ccc;   
}
.smallcalendar .p-datepicker table td > span {
  widows: initial !important;
  height: initial  !important;
}
</style>