<template> 
    {{ calendarMode }}
    <VueCal
        :id="id"
        :disable-views="['years', 'year', 'month', 'week']"
        :time-from="8 * 60"
        :time-to="20 * 60"
        :time-step="30"
        active-view="day"
        :snap-to-time="15"
        hide-view-selector
        :events="allevents"
        :editable-events="calendarMode"
        :split-days="allresources"
        :min-split-width="100"
        
        :sticky-split-labels="true"
        sticky-split-labels
        
        :selected-date="selectedDate"
        :drag-to-create-threshold="15"        
        @event-drag-create="onDragNew"
        @event-drop="onEventDrop"
        @view-change="viewChange"
        
        @cell-contextmenu="eventHappend"
        
    >
        <!-- header template -->
        <template #split-label="{ split, view }">
        <div
            @click="clickResource(split._id, split.label)"
            class="cursor-pointer"
        >
            <!-- <div
            v-if="resourceType == CalResourceType.teacher && split.email"
            class="w-full text-center"
            >
            <img
                :src="getAvatarLink(split.email, 48)"
                class="overflow-hidden object-cover rounded-full border-2 border-white dark:border-gray-700 shadow"
            /> -->
            <div>{{ split.displayName }} <span v-if="split._id == '?'" class="pi pi-plus"></span></div>
            <!-- </div>
            <div v-else>{{ split.displayName }}</div> -->
            
        </div>
        </template>

        <!-- event template -->
        <!--  @contextmenu="onRightClick($event, event)" -->
        <template #event="{ event, view }">
            <div 
                @click="onRightClick($event,event)"
                class="cursor-pointer"
            >            
            <slot name="default" :event="<CalEventType<T>>event">
                <div>{{ event.title }}</div>
                <div>{{ event.start }}</div>
                <div>{{ event.end }}</div>
            </slot>                
            </div>
        </template>
    </VueCal>
</template>
<script setup lang="ts" generic="T">


import "vue-cal/dist/vuecal.css";
import VueCal, { Event, SplitDaysAttributes } from "vue-cal";
import { CalEventType,CalRightClickEvent,OffDay,CalResource,CalResourceType,RelocateEvent } from '~/types'
import { emit } from "process";

const timezoneoffset = new Date().getTimezoneOffset() 
const eventsdata = ref<CalEventType<T>[]>()
const emits = defineEmits(['eventRghtClick','eventClick','eventDrop','eventDragNew','viewChange','resourceClick'])
const props = defineProps<{
    id:string    
    items:CalEventType<T>[]
    resources:CalResource[]
    resourceType:CalResourceType
}>()
const selectedDate = defineModel<Date>()
const selectedSchedule = ref<CalResource>();



const allevents = computed(()=>{  

    const list =  props.items.map(item=>{                           
        if(item.start instanceof Date) item.start =item.start.addMinutes(timezoneoffset).format('YYYY-MM-DD HH:mm')            
        if(item.end instanceof Date) item.end = item.end.addMinutes(timezoneoffset).format('YYYY-MM-DD HH:mm')
        if(!item.split) item.split='?'         
        return item
    })
    return list
})
const eventHappend  = (e:any)=>{
    console.log("event happen eee",e)
    // alert("event happend")
}
const viewChange = (e:any)=>{
    console.log("calendar view change",e)
    selectedDate.value=e.startDate
    // endDate :  Sat Feb 17 2024 23:59:59 GMT+0800 (Malaysia Time) {}
    // events :  []
    // startDate :  Sat Feb 17 2024 00:00:00 GMT+0800 (Malaysia Time) {}
    // view :  "day"
    emits('viewChange',e)
}
const allresources = computed(()=>{    
    const tmplist = props.resources.map(r=>{
        if(!r.id) r.id =r._id
        if(r.hide===undefined) r.hide=false
        if(!r.displayName) r.displayName=r.label
        return r
    })
    tmplist.push({
        _id:'?',
        id:'?',
        hide:false,
        label:t('unknown'),
        displayName:t('unknown'),
        code:'',
        email:'',
    })
    return tmplist
})
const onEventDrop = async (relocateData: RelocateEvent<T>)=>{
    emits('eventDrop', relocateData)
}
const clickResource = async (splitid:string, splitlabel:string)=> emits('resourceClick', splitid,splitlabel)
const onDragNew = (e: CalEventType<T>)=> emits('eventDragNew', e)

const onRightClick = (clickevent: any, scheduledata: any) => {
  selectedSchedule.value = scheduledata;
  emits('eventRghtClick', clickevent,scheduledata)
};
const onEventClick = (eventdata: CalResource) => {
  selectedSchedule.value = eventdata;
  emits('eventClick',eventdata)
};

const calendarMode = computed(()=>{
    
    if(isMobile()){
        return {
            title: false,
            drag: true,
            resize: false,
            delete: false,
            // create: true,
        }
    }else{
      return  {
            title: false,
            drag: true,
            resize: false,
            delete: false,
            create: true,
        }
    }
    
})


</script>