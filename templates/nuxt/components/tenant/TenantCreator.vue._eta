<template>
  <Dialog
    v-model:visible="visibleCreateTenant"
    v-if="visibleCreateTenant"
    :closable="false"
    :header="t('newBusiness')"
    modal
    :pt="{ root: { class: 'w-full md:w-1/2 lg:w-1/3' } }"
  >
    <form @submit.prevent="true" class="w-full">
      <div class="flex flex-col gap-4">
        <div class="flex flex-col">
          <label for="txtcompany" class="text-xs text-gray-500"
            >{{ t("name") }}<span class="text-red-500 ml-1">*</span></label
          >
          <InputText
            inputId="txtcompany"
            class="flex-1"
            :placeholder="t('enterYourCompanyName')"
            @change="tenantnameerr = ''"
            v-model:model-value="data.tenantName"
          />
          <TextDanger class="text-xs">{{ tenantnameerr }}</TextDanger>
        </div>

        <!-- <SimpleAppInput
          :input-type="SimpleAppInputType.text"
          :setting="o.getField('#/properties/timeZone')"
          v-model="data.timeZone"
        /> -->

        <div class="flex flex-col">
          <label for="timezone" class="text-xs text-gray-500"
            >{{ t("timeZone") }}<span class="text-red-500 ml-1">*</span></label
          >
          <select
            v-model="data.timeZone"
            class="w-full border border-gray-300 rounded-md h-9"
          >
            <!-- <option v-for="tz in timezones" :key="tz.value" :value="tz.value"> -->
            <option
              v-for="tz in timezones"
              :key="tz.value"
              :selected="data.timeZone === tz.value"
              v-bind:value="tz.value"
            >
              {{ tz.label }}
            </option>
          </select>
        </div>

        <div v-if="businesstype == 'others'" class="flex flex-col">
          <InputText
            v-model="otherbusinesstype"
            :placeholder="t('yourBusinessType')"
          />
          <TextDanger class="text-xs">{{ otherbusinesstypeerr }}</TextDanger>
        </div>
      </div>
    </form>

    <template #footer>
      <ButtonDefault @click="closeDialog"> {{ t("cancel") }}</ButtonDefault>
      <ButtonPrimary
        :label="t('create')"
        :loading="onhold"
        @click="createTenant"
      >
        {{ t("create") }}
      </ButtonPrimary>
    </template>
  </Dialog>
</template>

<script setup lang="ts">
/**
 * This file was automatically generated by simpleapp generator during initialization. It is changable.
 * --remove-this-line-to-prevent-override--
 * last change 2025-03-16
 * author: Ks Tan
 */
import { tzRawData } from "timezone-select-js";
import type { AxiosResponse } from "axios";
import { NotificationStatus, Notification } from "~/types";
// import MazPhoneNumberInput from "maz-ui/components/MazPhoneNumberInput";
import type { CountryCode } from "~/types";

const captcharesponse = ref("");
const businesstype = ref("");
const otherbusinesstype = ref("");
const visibleCreateTenant = defineModel<boolean>();
const businesstypeerr = ref("");
const otherbusinesstypeerr = ref("");
const captchaerr = ref("");
const tenantnameerr = ref("");
const tenantmobilenoerr = ref("");
const privacyPolicyAccepted = ref(false);
const salesPermission = ref(false);
const isgenerateSample = ref(false);
const salesPermissionError = ref("");
const privacyPolicyError = ref("");
const countryCode = ref("MY" as CountryCode);

// const options = [
//   "kindergarten",
//   "preschool",
//   "primarySchool",
//   "secondarySchool",
//   "internationalSchool",
//   "college",
//   "university",
//   "tuitionCentre",
//   "languageCentre",
//   "swimmingSchool",
//   "musicSchool",
//   "artSchool",
// ];
// const optionList = computed(() => {
//   const list = options.sort();
//   list.push("others");
//   return list.map((item) => ({ label: t(item), value: item }));
// });

// useRecaptchaProvider();

const data = ref({
  tenantName: "",
  mobileNo: "",
  interestedInSales: true,
  isgenerateSample: false,
  businessType: "",
  timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
  utcOffset: new Date().getTimezoneOffset(),
});

// console.log(data.value.timeZone);

const timezones = tzRawData.map((tz: any) => ({
  label: tz.status === "Deprecated" && tz.link ? tz.link : tz.name,
  value: tz.status === "Deprecated" && tz.link ? tz.link : tz.name,
}));

// console.log(timezones);

const createtitle = ref("Create My Company");
const errCreateTenant = ref();
const onhold = ref(false);
const closeDialog = () => {
  visibleCreateTenant.value = false;
};

watch(visibleCreateTenant, (newvalue) => {
  if (newvalue) {
    data.value.tenantName = "";
    data.value.businessType = "";
    data.value.mobileNo = "";
    data.value.interestedInSales = true;
    privacyPolicyAccepted.value = false;
    salesPermission.value = false;
    isgenerateSample.value = false;
    tenantnameerr.value = "";
    tenantmobilenoerr.value = "";
    captcharesponse.value = "";
    captchaerr.value = "";
  }
});
watch(captcharesponse, (newvalue) => {
  if (captcharesponse.value != "") {
    captchaerr.value = "";
  }
});
const createTenant = async () => {
  data.value.tenantName = data.value.tenantName.trim();

  if (data.value.tenantName == "") {
    tenantnameerr.value = t("undefineTenantName");
    return;
  }

  holdScreenStart();
  onhold.value = true;
  data.value.businessType =
    businesstype.value == "others"
      ? otherbusinesstype.value
      : businesstype.value;
  getProfileApi()
    .createTenant(data.value)
    .then((res: AxiosResponse) => {
      if (res && res.status &&( res.status == 201 ||  res.status == 200)) {
        if (res.data && res.data["xOrg"]) {
          const xorg = res.data["xOrg"];
          navigateTo("/" + xorg, { external: true });
        }
      }
    })
    .catch((err) => {
      errCreateTenant.value = err["message"];
      console.error("errCreateTenant", err.response.data.data);
      const notifieddata: Notification = {
        documentName: "tenant",
        status: NotificationStatus.error,
        summary: t("createError"),
        data: err.response?.data?.data,
      };
      useNuxtApp().$event("Notification", notifieddata);
    })
    .finally(() => {
      onhold.value = false;
      holdScreenEnd();
    });
};

const navigateToPrivacyPolicy = () => {
  window.open("https://simitgroup.com/privacy-policy-1/", "_blank");
};

const navigateToTermsOfService = () => {
  window.open("https://simitgroup.com/terms-of-service/", "_blank");
};

onMounted(() => {
  data.value.timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
});
</script>
