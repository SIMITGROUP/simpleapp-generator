<script setup lang="ts">
/**
* This file was automatically generated by simpleapp generator during initialization.
 * DO NOT MODIFY IT BY HAND.
 * last change 2023-09-09
 * author: Ks Tan
 */
import {ref} from 'vue'
import _ from 'lodash'
import { SimpleAppClient } from  '~/simpleapp/generate/clients/SimpleAppClient' //'../SimpleAppClient';

import {SearchBody,CellSetting} from '~/types'
const props = defineProps<{
    document:SimpleAppClient<any,any>
    columns:CellSetting[]    
    sorts?: string[][]
}>()
const resourcename = ref( _.upperFirst(props.document.getDocName()))
const visible = ref(false)
const doc = props.document
const data = doc.getReactiveData()
const disabled=ref(false)
const recordlist = ref();
const router = useRouter()
const route = useRoute()
const filters = ref()
const popuptitle = ref("New "+doc.getDocName())
const systemwindows = ref(false)
const {$event,$listen} = useNuxtApp()

const refresh = () => {
  const searchbody: SearchBody = {
    fields: getWantedFields(props.columns),
    sorts:props.sorts
  }
  console.log('searchbody',searchbody)
  doc.search(searchbody).then((res:any) => { 
    console.log("refreshrefreshrefresh",recordlist.value)   
    recordlist.value = res;
    disabled.value=false
  });
};
const newData = () => {
  router.push({ path: getDocumentUrl(doc.getDocName(),'new') })  
  doc.setNew()    
  visible.value=true;
};




onNuxtReady(()=>{
  refresh()   
})
$listen('RefreshDocumentList',(data)=>{
  if(data.documentName == doc.getDocName()){
    refresh()
  }
})

const getWantedFields = (selectedCols:CellSetting[]) =>{
        let cols:string[] = []
        
        selectedCols.forEach((item)=>{

            if(typeof item=='string'){
                cols.push(item)
            }else if(typeof item =='object'){
                if(item.field !='*'){
                    cols.push(item.field)
                }
                if(item.moreFields && item.moreFields.length>0){
                    cols = cols.concat(item.moreFields)
                }                
            }
        })        
        return cols
    }

const selectRow =  (data:any) =>{  
  console.log("select row",data)
  goTo(doc.getDocName(),data._id)  
}
</script>
 
<template>
    <div class="simpleapp-crudsimple">    
      <h1 v-if="systemwindows" class="error-text text-center">* system administration screen</h1>      
      <div class="grid grid-cols-2">
        <div v-if="recordlist" class="p-4">
          <TableDocuments :value="recordlist" :columns="columns" :title="t(doc.getDocName())"  @select-row="selectRow"> 
            <template #toolbar>
                <div class="w-full text-left">
                    <Button class=" btn-primary" @click="newData" v-tooltip="'Add new(ctrl+enter)'" v-if="canPerform(resourcename,'create')">{{ t('new') }}</Button>
                </div>                
            </template>
            <template #additionaltoolbar>
                <Button class="bg-secondary-600 hover:bg-secondary-400 text-white" @click="refresh()" type="button" >{{ t('refresh') }}</Button>                                                                            
            </template>
        </TableDocuments>  
      
        </div>
        <div class="p-4">
          <slot>
              undefine page content
          </slot> 
        </div>
      </div>
      
      <DebugDocumentData v-model="data" :label="doc.getDocName()"/>
    </div>
</template>
