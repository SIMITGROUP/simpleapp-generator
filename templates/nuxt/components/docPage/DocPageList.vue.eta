<script setup lang="ts">
/**
* This file was automatically generated by simpleapp generator during initialization.
 * DO NOT MODIFY IT BY HAND.
 * last change 2023-09-09
 * author: Ks Tan
 */
import {ref} from 'vue'
import _ from 'lodash'
import { SimpleAppClient } from  '~/simpleapp/generate/clients/SimpleAppClient' //'../SimpleAppClient';
import Dialog from 'primevue/dialog';
// import axios from 'axios'
import ProgressSpinner from 'primevue/progressspinner';
import ConfirmPopup from 'primevue/confirmpopup';
import { useConfirm } from "primevue/useconfirm";

import {SearchBody,CellSetting} from '~/types'
const confirm = useConfirm();
const props = defineProps<{
    document:SimpleAppClient<any,any>
    columns:CellSetting[]    
    sorts?: string[][]
}>()
const resourcename = ref( _.upperFirst(props.document.getDocName()))
const visible = ref(false)
const doc = props.document
const data = doc.getReactiveData()
const disabled=ref(false)
const recordlist = ref();
const router = useRouter()
const route = useRoute()
const filters = ref()
const popuptitle = ref("New "+doc.getDocName())
const systemwindows = ref(false)
const {$event,$listen} = useNuxtApp()

const refresh = () => {
  const searchbody: SearchBody = {
    fields: getWantedFields(props.columns),
    sorts:props.sorts
  }
  console.log('searchbody',searchbody)
  doc.search(searchbody).then((res:any) => { 
    console.log("refreshrefreshrefresh",recordlist.value)   
    recordlist.value = res;
    disabled.value=false
  });
};
const newData = () => {
  router.push({ path: getDocumentUrl(doc.getDocName(),'new') })  
  doc.setNew()    
  visible.value=true;
};

const triggerEdit = (data: any) => {
  let id = data._id
  router.push({ path: getDocumentUrl(doc.getDocName(),id) })  
};
const editRecord = (id:string) => {
  
  console.log("editRecord",id)
  
  doc.getById(id).then(()=>{
    visible.value=true
    popuptitle.value = "Edit "+doc.getDocName()
  });
  
};
const createData = async () => {
  disabled.value=true
  
    doc.create().then(()=>{
      visible.value=false
      refresh()
    }).catch((err:any)=>{
      console.error(err)
    }).finally(()=>disabled.value=false)
 
};
const updateData = async () => {
  disabled.value=true
  
  doc.update().then(()=>{
      visible.value=false
      refresh()
    }).catch((err:any)=>{
      console.error(err)
    }).finally(()=>disabled.value=false)
  
};
const deleteData = (event:Event) => {
    
    confirm.require({
        target: event.currentTarget as HTMLElement,
        message:'Delete?',
        icon: 'pi pi-exclamation-triangle',
        acceptClass: 'p-button-danger',
        accept: ()=>{
            disabled.value=true 
            doc.delete(data.value._id ?? "").then(()=>visible.value=false).finally(() => {
                refresh();    
            });
        },
        reject: () => {
            console.log("Cancel delete")
        }
    })  
};

onNuxtReady(()=>{
  refresh()
  if (route.params.id) {
    const recordid:string = route.params.id.toString()
    editRecord(recordid)  
  }
  
})
$listen('RefreshDocumentList',(data)=>{
  if(data.documentName == doc.getDocName()){
    refresh()
  }
})


</script>
 
<template>
    <div class="simpleapp-crudsimple">    
      <h1 v-if="systemwindows" class="error-text text-center">* system administration screen</h1>      
      
      <TableDocuments :value="recordlist" :columns="columns" :title="t(doc.getDocName())"> 
            <template #toolbar>
                <div class="w-full text-left">
                    <Button class=" btn-primary" @click="newData" v-tooltip="'Add new(ctrl+enter)'" v-if="canPerform(resourcename,'create')">New</Button>      
                    <slot>
                        undefine page content
                    </slot>                     
                </div>                
            </template>
            <template #additionaltoolbar>
                <Button class="bg-secondary-600 hover:bg-secondary-400 text-white" @click="refresh()" type="button" >Refresh</Button>                                                                            
            </template>
            <Column header=" ">
                <template #body="{index,data}">                    
                        <Button @click="goTo(doc.getDocName(),data._id)" icon="pi pi-pencil" class="btn btn-primary" >Edit</Button>                    
                </template>
            </Column>
        </TableDocuments>  
      
      <DebugDocumentData v-model="data" :label="doc.getDocName()"/>
    </div>
</template>

<style scoped>
.crudsimple-dialog{
    z-index: 100;
}
</style>