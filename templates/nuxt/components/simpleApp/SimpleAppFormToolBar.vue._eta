<template>
  <div v-if="isMobile()" class="w-full">
    <MobileToolbar class="bg-gray-800 text-white">
      <template #start>
        <slot name="start" :menu="menu">
          <ButtonText class="text-xl" @click="callClose"
            ><i class="pi pi-times"></i
          ></ButtonText>
        </slot>
      </template>
      <template #center>
        <slot name="center" :menu="menu">
          <TextMain class="text-white line-clamp-2">{{ title }}</TextMain>
        </slot>
      </template>
      <template #end>
        <slot name="end" :menu="menu">
          <div class="flex flex-row w-full">
            <ButtonText
              class="text-xl"
              @click="emitEvent(menus[0], $event)"
              v-if="isShow"
              v-tooltip="menus[0].label"
            >
              <i :class="menus[0].icon"></i>
            </ButtonText>

            <ButtonText class="text-xl" @click="toggleMenu" v-if="isShow">
              <i class="pi pi-ellipsis-v"></i>
            </ButtonText>
          </div>
        </slot>
        <ContextMenu ref="menu" :model="menus as MenuItem[]" />
      </template>
    </MobileToolbar>
  </div>
  <div v-else class="simpleapp-tool-bar">
    <!--  <div class="flex flex-row justify-end p-2">
      <TextTitle class="dark:text-white line-clamp-2 flex-1">{{
        title
      }}</TextTitle>
      <ButtonText @click="callClose"><i class="pi pi-times" /></ButtonText>
    </div> -->
    <div class="flex flex-row gap-2 mb-2 p-0 justify-between">
      <!-- left -->
      <div class="flex flex-row gap-2">
        <div v-for="(menu, index) in menus" :key="index">
          <div v-if="menu.label && menu.type == 'crud'">
            <ButtonAction
              v-if="menu.action == 'print'"
              :disabled="!canPerform(doc.getDocName(true), 'access')"
              @click="emitEvent(menu, $event)"
              :action-name="menu.action"
              >{{ menu.label }}</ButtonAction>
            <ButtonAction
              v-else
              :disabled="!canPerform(doc.getDocName(true), menu.action)"
              @click="emitEvent(menu, $event)"
              :action-name="menu.action"
              >{{ menu.label }}</ButtonAction
            >
          </div>
        </div>
      </div>

      <!-- center -->
      <div class="flex flex-row"></div>
      <!-- right -->
      <div class="flex flex-row gap-2">
        <DebugDocumentData v-model="data" :label="t(doc.getDocName())" />
        <div v-if="data.documentStatus">
          <RendererDocHistories :data="data" />
        </div>
        <div v-for="(menu, index) in menus" :key="index">
          <div v-if="menu.label && menu.type == 'docstatus'">
            <ButtonAction
              :disabled="!canPerform(doc.getDocName(true), menu.action)"
              @click="emitEvent(menu, $event)"
              :action-name="menu.action"
              >{{ menu.label }}</ButtonAction
            >
          </div>
        </div>
      </div>
    </div>
  </div>

  <OverlayPanelWithToolBar
    v-if="visiblePrintPreview"
    v-model="visiblePrintPreview"
    close-event-name="closePrintPreview"
  >
    <template #headerLeft>
      <ButtonText @click="visiblePrintPreview = false"
        ><i class="pi pi-times"
      /></ButtonText>
    </template>
    <template #headerCenter>
      <div class="flex flex-row gap-2 justify-center">
        <Dropdown
          :options="printformats"
          option-label="formatName"
          option-value="formatId"
          v-model="currentprintformat"
          @change="printPdf"
        ></Dropdown>
        <ButtonPrimary @click="showPrintFormats"
          ><i class="pi pi-refresh"
        /></ButtonPrimary>
      </div>
    </template>
    <template #headerRight>
      <div v-if="isMobile()">
        <ButtonText class="text-xl" @click="sendToPrint">
          <i class="pi pi-print"></i>
        </ButtonText>
        <ButtonText class="text-xl" v-if="sharable" @click="togglePdfMenu">
          <i class="pi pi-ellipsis-v"></i>
        </ButtonText>
      </div>
      <div v-else></div>
    </template>
    <!-- :header="t('printPreview')"
    position="bottom" -->
    <!-- {{pdfReady}} -->

    <!-- <div v-if="!pdfReady">
      <div class="flex flex-col justify-center">
        <div class="pi pi-spin pi-spinner" style="font-size: 8rem"></div>
        <div>{{ t("loading") + "..." }}</div>
      </div>
    </div>     -->
    <TextDanger v-if="printservererror || !printstr">
      {{ t("printServerError") }}
    </TextDanger>
    <vue-pdf-embed
      ref="pdfrenderer"
      class="w-11/12"
      v-else-if="isMobile()"
      :source="printstr"
      :disableTextLayer="true"
      @loading-failed="console.log"
      @rendering-failed="console.log"
    />
    <div class="p-0 w-full h-screen" v-else>
      <iframe width="100%" height="100%" :src="printstr"></iframe>
    </div>
  </OverlayPanelWithToolBar>
</template>
<script setup lang="ts">
/**
 * This file was automatically generated by simpleapp generator during initialization. It is changable.
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-04-02
 * author: Ks Tan
 */
import VuePdfEmbed from "vue-pdf-embed";

// import VuePdfKit from 'vue-pdf-kit'
// import 'vue-pdf-kit/dist/style.css'

import { SimpleAppClient } from "~/simpleapp/generate/clients/SimpleAppClient";
import { useConfirm } from "primevue/useconfirm";
import {
  FormActions,
  FormCrudEvent,
  FormMenu,
  SchemaPrintFormat,
} from "~/types";
import { DropdownChangeEvent } from "primevue/dropdown";
import { MenuItem } from "primevue/menuitem";
import { MenuItemCommandEvent } from "primevue/menuitem";
const currentprintformat = ref();
const pdfrenderer = ref();
const confirm = useConfirm();
const emits = defineEmits(["on", "close"]);
const visiblePrintFormats = ref(false);
const visiblePrintPreview = ref(false);
const printstr = ref();
const printservererror = ref(false);
const pdfReady = ref(false);
const props = defineProps<{
  document: SimpleAppClient<any, any>;
  disableaction?: string[];
}>();
const doc = props.document;
const data = doc.getReactiveData();

const createData = async () => {
  try {
    setRecentDocument(data.value._id, {
      docName: doc.getDocName(),
      label: title.value,
      branchId: data.value.branchId,
      time: new Date().toISOString(),
    });
    return await doc.create();
  } catch (e) {
    console.debug("validation error:", e);
  }
};
const updateData = async () => {
  try {
    setRecentDocument(data.value._id, {
      docName: doc.getDocName(),
      label: title.value,
      branchId: data.value.branchId,
      time: new Date().toISOString(),
    });
    return await doc.update();
  } catch (e) {
    console.debug("validation error:", e);
  }
};
const deleteData = async () => {
  try {
    getRecently().delete(data.value._id);
    return await doc.delete();
  } catch (e) {
    console.debug("validation error:", e);
  }
};

type Datatype = keyof typeof data.value;
const config = doc.getSchema()["x-simpleapp-config"];
const titlefield = (
  config.allStatus && config.allStatus.length > 0
    ? config.uniqueKey
    : config.documentTitle
) as Datatype;
const title = computed(() =>
  data.value[titlefield as Datatype]
    ? data.value[titlefield as Datatype]
    : t(doc.getDocName()),
);
const printformats = computed(() => {
  const formats = doc.getSchema()["x-simpleapp-config"]?.printFormats;
  if (Array.isArray(formats)) {
    return formats.map((item) => {
      item.formatName = t(item.formatName);
      return item;
    });
  } else {
    return [];
  }
});
const menu = ref();
const menus = computed(() =>
  [...getActions(), ...getDocActions()].filter((item) => showMenuButton(item)),
);

const isShow = computed(
  () => menus.value.filter((item) => item.action != undefined).length > 0,
);
const toggleMenu = (event: MouseEvent) => {
  menu.value.toggle(event);
};

const callClose = (e: MouseEvent) => {
  useNuxtApp().$event("CloseDialog", doc.getDocName());
  emitEvent({ action: "exit", type: "menu", label: "" }, e);
  // async (menu: FormMenu, clickEvent: MouseEvent)
};
const emitMobileEvent = (itemevent: MenuItemCommandEvent) => {
  const actionname: string = itemevent.item.action;
  const event = itemevent.originalEvent;
  // emitEvent({ action: actionname, type: "crud", label: "" }, event);
  emitEvent(itemevent.item, event);
};

const printPdf = async (dropdown?: DropdownChangeEvent) => {
  let index = 0;
  setRecentDocument(data.value._id, {
    docName: doc.getDocName(),
    label: title.value,
    branchId: data.value.branchId,
    time: new Date().toISOString(),
  });
  if (printformats && printformats.value.length > 0 && dropdown !== undefined) {
    index = printformats.value.findIndex(
      (item) => item.formatId == dropdown.value,
    );
  }
  let format: SchemaPrintFormat = printformats.value[index];
  printservererror.value = false;
  const formatid: string = format.formatId;
  currentprintformat.value = formatid;
  visiblePrintPreview.value = true;
  // console.log("formatidformatid", format);
  // pdfReady.value=false
  try {
    const tmp: any = await doc
      .getApi()
      .runPrint(data.value._id ?? "", formatid);
    // pdfReady.value=true
    printstr.value = "data:application/pdf;base64," + tmp.data;
  } catch (e) {
    pdfReady.value = true;
    printservererror.value = true;
    // printstr.value = "";
    console.error("error from print server", e);
  }
};
const getActions = () => {
  const actions = doc.getActions();
  // const printformats = doc.getSchema()["x-simpleapp-config"]?.printFormats;

  const crudmenus: any[] = [];

  // Object.keys(actions).forEach((key)=>{ //crud, api, docstatus
  actions["crud"].forEach((item) => {
    if (props.disableaction && props.disableaction.includes(item)) {
      /*skip this item*/
    } else {
      crudmenus.push({
        action: item,
        label: t(item),
        type: "crud",
        icon: getActionIcon(item),
        command: emitMobileEvent,
      });
    }
  });
  if (printformats && printformats.value.length > 0) {
    crudmenus.push({
      action: "print",
      label: t("preview"),
      type: "crud",
      icon: "pi pi-file-pdf",
      command: showPrintFormats,
    });
  }
  // console.log("crudmenus", crudmenus);

  // })
  return crudmenus;
};

const showPrintFormats = async () => {
  await printPdf();
};
const emitEvent = async (menu: FormMenu, clickEvent: Event | MouseEvent) => {
  if (menu.action == "delete") {
    confirm.require({
      target: clickEvent.target as HTMLElement,
      header: t("deleteRecord"),
      message: `${t("deleteThisRecord?")}`,

      // icon: "pi pi-exclamation-triangle gap-4",
      acceptClass: "bg-danger-600 text-white",
      accept: async () => {
        if (await deleteData()) emits("on", FormCrudEvent.delete);
      },
    });
  } else {
    if (menu.action == "print") {
      showPrintFormats();
    } else if (menu.action == "create") {
      if (await createData()) emits("on", FormCrudEvent.create);
    } else if (menu.action == "update") {
      if (await updateData()) emits("on", FormCrudEvent.update);
    } else if (menu.type == "docstatus") {
      setRecentDocument(data.value._id, {
        docName: doc.getDocName(),
        label: title.value,
        branchId: data.value.branchId,
        time: new Date().toISOString(),
      });
      emits("on", FormCrudEvent.setDocStatus, menu.action);
    } else if (menu.action == FormCrudEvent.exit)
      emits("on", FormCrudEvent.exit);
  }
};

const getDocActions = () => {
  const docstatus: string = data.value.documentStatus;
  const allstatus = doc.getSchema()["x-simpleapp-config"].allStatus;
  let docactionmenus: FormMenu[] = [];
  type stringlist = { [key: string]: string };
  const statusNames: stringlist = {};
  allstatus?.forEach((item) => {
    statusNames[item.status] = t(item.statusName);
  });
  if (allstatus) {
    const stateconfig = allstatus.find((item) => item.status === docstatus);
    docactionmenus =
      stateconfig?.actions.map((item) => ({
        action: item,
        label: statusNames[item],
        type: "docstatus",
        icon: getActionIcon(item),
        command: emitMobileEvent,
      })) ?? [];
  }
  return docactionmenus;
};
const showMenuButton = (menu: FormMenu) => {
  if (menu.separator) return true;

  if (menu.action == "print" && !doc.isNew()) return true;
  //all document status cannot direct apply regardless new or draft
  if (menu.type == "docstatus") return true;

  // afterward, new document only acces create action
  if (doc.isNew() && menu.action == "create") return true;
  if (doc.isNew() && menu.action != "create") return false;

  //start from here, readonly document all action not allow
  if (doc.isReadOnly()) return false;

  //edit draft document, only create not allow
  if (!doc.isNew() && menu.action == "create") return false;
  if (!doc.isNew() && menu.action != "create") return true;

  return false;
};

const getActionIcon = (actionName: string) => {
  let icon = "";
  switch (actionName) {
    case "create":
      icon = "pi-save";
      break;
    case "update":
      icon = "pi-save";
      break;
    case "delete":
      icon = "pi-trash";
      break;
    case "confirm":
      icon = "pi-check";
      break;
    case "void":
      icon = "pi-ban";
      break;
    case "print":
      icon = "pi-print";
      break;
    case "draft":
      icon = "pi-pencil";
      break;
    default:
      icon = "pi-question-circle";
      break;
  }
  return `pi ${icon}`;
};

const sendToPrint = () => {
  // window.print()
  pdfrenderer.value.print();
};

const sharable = computed(() => typeof navigator.share != "undefined");
const togglePdfMenu = async () => {
  const blob = await (await fetch(printstr.value)).blob();
  const file = new File([blob], "fileName.pdf", { type: blob.type });

  navigator.share({
    title: "Title to be shared",
    text: "Text to be shared",
    files: [file],
  });
};
</script>
<style>
.vue-pdf-embed {
  @apply p-4;
}
.vue-pdf-embed > div {
  @apply mb-4;
  /* margin-bottom: 8px;
    box-shadow: 0 2px 8px 4px rgba(0, 0, 0, 0.1); */
}
</style>
