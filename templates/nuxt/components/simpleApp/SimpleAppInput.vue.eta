<template>
    <SimpleAppFieldContainer :hidelabel="hidelabel" v-model="modelValue" 
                :label="label" :description="description" :pt="pt"
                :setting="setting" :instancepath="instancepath" :error="error" #default="slotprops">        
        <!-- binary input -->
        <component :is="inputComponent" :readonly="isReadonly" :pt="pt"
                v-if="[SimpleAppInputType.checkbox,SimpleAppInputType.switch ].includes(inputType)" 
                :inputId="slotprops.uuid" :path="setting.instancepath"
                v-model="modelValue" :binary="true"
                v-bind="componentProps"/>

        <!-- date component -->        
        <component :is="inputComponent" type="date" :pt="pt" 
            v-else-if="inputType == SimpleAppInputType.date"            
            :inputId="slotprops.uuid" :path="setting.instancepath"
            v-model="datevalue" @update:modelValue="updateDate" :readonly="isReadonly"
            :placeholder="placeholder"
            v-bind="componentProps"/>
        <!-- calendar component -->        
        <component :is="inputComponent" type="date" :pt="pt" :class="'flex flex-col yyy-'+modelValue+ ' xxx-'+datevalue"
            v-else-if="SimpleAppInputType.calendar==inputType"
            :inputId="slotprops.uuid" :path="setting.instancepath"
            v-model="datevalue" @update:modelValue="updateDate" :readonly="isReadonly"
            :placeholder="placeholder"
            v-bind="componentProps"/>
        <!-- time component -->        
        <component :is="inputComponent" :pt="pt" 
            v-else-if="inputType == SimpleAppInputType.time"            
            :inputId="slotprops.uuid" :path="setting.instancepath"
            v-model="modelValue" :readonly="isReadonly"
            :placeholder="placeholder"
            v-bind="componentProps"/>
        <!-- select/list component -->                
        <component :is="inputComponent" v-model="modelValue"  :pt="pt"
            v-else-if="[SimpleAppInputType.select,SimpleAppInputType.list].includes(inputType)"
            :inputId="slotprops.uuid" :path="setting.instancepath"  
            :readonly="isReadonly"
            class="w w-full lg:w-full"
            :disabled="isReadonly"
            :options="getListOptions()" optionLabel="label" optionValue="value"
            :placeholder="placeholder"
            v-bind="componentProps"/>
        
        <!-- radio component -->                
        <div v-else-if="inputType == SimpleAppInputType.radio" >
            <div v-for="(item,index) in getListOptions()">
                <component :pt="pt" :is="inputComponent" v-model="modelValue" 
                        :inputId="setting.key+'-'+index" name="smaple" :value="item.value"
                        :readonly="isReadonly"
                        />  {{ ' ' }}
                <label :for="setting.key+'-'+index"> {{ item.label  }} </label>
            </div>            
        </div>
        
        <!-- autocomplete, need do more enterprise grade component-->
        <SimpleAppAutocomplete     v-else-if="inputType==SimpleAppInputType.autocomplete"  
                v-model="modelValue"                          
                :pt="pt"
                :setting="setting"
                :disabled="isReadonly"                                                             
                :inputId="slotprops.uuid"
                :path="setting.instancepath"
                :readonly="isReadonly"                
                :placeholder="placeholder"
                 />
        <!-- v-bind:attributes="componentProps" -->
        <!--  document no input-->
        <SimpleAppDocumentNo v-else-if="inputType == SimpleAppInputType.documentno" 
            :setting="setting" v-model="modelValue" :inputId="slotprops.uuid"
            :readonly="isReadonly" @update:docNoFormat="triggerDocNoFormatChange"     
            :pt="pt"
             :path="setting.instancepath"
             v-bind:attributes="componentProps"/>
           
        
        <!-- password -->
        <component :is="inputComponent"
                v-else-if="inputType == SimpleAppInputType.password" 
                :type="type" v-model="modelValue" :pt="pt" 
                :readonly="isReadonly" class="flex flex-col"
                :inputId="slotprops.uuid" :path="setting.instancepath"
                :placeholder="placeholder"
                v-bind="componentProps"/>

        <!-- rating -->
        <component v-else-if="inputType == SimpleAppInputType.rating" 
          :type="type" v-model="modelValue" :pt="pt" 
                :readonly="isReadonly"                 
                :inputId="slotprops.uuid" :path="setting.instancepath"
                v-bind="componentProps"/>
            
        <!-- chip -->
        <component  v-else-if="inputType == SimpleAppInputType.chip" 
         :is="inputComponent" :type="type" v-model="modelValue"
                 :pt="pt" 
                :disabled="isReadonly"                                 
                :inputId="slotprops.uuid" :path="setting.instancepath"
                :placeholder="placeholder"
                v-bind="componentProps"
                />
        <!-- simple component -->        
        <InputNumber v-else-if="inputType == SimpleAppInputType.number" 
                :type="type" v-model="modelValue"
                :readonly="isReadonly"        
                :pt="pt"
                :class="!pt ? 'w-full flex flex-col' :''"
                :inputId="slotprops.uuid" :path="setting.instancepath"
                v-bind="componentProps"
                :placeholder="placeholder"
                />

        <component v-else
            v-model="modelValue"
                :is="inputComponent"
                :readonly="isReadonly"        
                :pt="pt"
                :type="type"
                class="w-full flex flex-col"
                :inputId="slotprops.uuid" 
                :path="setting.instancepath"
                :placeholder="placeholder"
                v-bind="componentProps"
                />
            
        
        <!-- component require special treatment -->
        
    </SimpleAppFieldContainer>    
</template>

<script lang="ts" setup>
import moment from 'moment'
import AutoComplete,{ AutoCompleteProps } from 'primevue/autocomplete';
import Calendar,{ CalendarProps } from 'primevue/calendar';
import Checkbox,{ CheckboxProps } from 'primevue/checkbox';
import Chips,{ ChipsProps } from 'primevue/chips';
import SimpleAppDocumentNo from './SimpleAppDocumentNo.vue';
import SimpleAppAutocomplete from './SimpleAppAutocomplete.vue'
import Dropdown,{ DropdownProps } from 'primevue/dropdown';
import InputNumber, { InputNumberProps } from 'primevue/inputnumber';
import InputSwitch, { InputSwitchProps } from 'primevue/inputswitch';
import InputText, { InputTextProps } from 'primevue/inputtext';
import Listbox,{ ListboxProps } from 'primevue/listbox';
import MultiSelect,{ MultiSelectProps } from 'primevue/multiselect';
import Password,{ PasswordProps } from 'primevue/password';
import RadioButton,{ RadioButtonProps } from 'primevue/radiobutton';
import Rating,{ RatingProps } from 'primevue/rating';
import Slider,{ SliderProps }  from 'primevue/slider';
import Textarea, { TextareaProps } from 'primevue/textarea';
import {SimpleAppInputType} from '~/types'


let inputComponent :Component


const datevalue = ref('')
const modelValue = defineModel()

if(modelValue.value){
    datevalue.value = moment(modelValue.value as string ).format('YYYY-MM-DD')
}else{
    datevalue.value = ''
}
const props = withDefaults( defineProps<{
    inputType:SimpleAppInputType,
    label?:string,
    description?:string,
    error?:string,
    setting:any,
    type?:string,
    instancepath?:string,
    hidelabel?: boolean
    readonly?: boolean
    pt?:any,
    placeholder?:string
    componentProps?: InputNumberProps | InputSwitchProps | InputTextProps | TextareaProps | DropdownProps | CalendarProps | RatingProps

}>(),{type:'text'})


switch(props.inputType){
    case SimpleAppInputType.text:
        inputComponent = InputText
        break;
    case SimpleAppInputType.textarea:
        inputComponent = Textarea
        break;
    case SimpleAppInputType.number:
        inputComponent = InputNumber
    break   
    case SimpleAppInputType.date:
        inputComponent = InputText
    break;
    case SimpleAppInputType.time:
        inputComponent = InputText
    break;
    case SimpleAppInputType.calendar:
        inputComponent = Calendar
        break;
    case SimpleAppInputType.autocomplete: 
        inputComponent = AutoComplete
        break;
    case SimpleAppInputType.autocompletemultiple: //*
        inputComponent = AutoComplete
        break;
    case SimpleAppInputType.selectmultiple: //*
        inputComponent = MultiSelect
        break;
    case SimpleAppInputType.listmultiple: //*
        break;    
    case SimpleAppInputType.radio: //*
        inputComponent = RadioButton
        break;
    case SimpleAppInputType.select: //*
        inputComponent = Dropdown
        break;
    case SimpleAppInputType.list: //*
        inputComponent = Listbox
        break;
    case SimpleAppInputType.chip: //*
        inputComponent = Chips
        break;
    case SimpleAppInputType.checkbox:
        inputComponent = Checkbox
        break;
    case SimpleAppInputType.switch:
        inputComponent = InputSwitch
        break;    
    case SimpleAppInputType.documentno:  //*
        break;
    case SimpleAppInputType.password: 
        inputComponent = Password
        break;    
    case SimpleAppInputType.rating:
        inputComponent = Rating
        break;
    case SimpleAppInputType.slider:
        inputComponent = Slider
        break;

}
const isReadonly = computed(()=>{
    if(props.readonly){
        return props.readonly
    }else if(props.setting.readonly){
        return props.setting.readonly
    }else{
        return false
    }
})

const updateDate = (value:any)=>{
    
    if(value){
        modelValue.value = moment(value).format('YYYY-MM-DD')
    }else{
        modelValue.value=''
    }
    
}


const getListOptions = () =>{
    
    const options = []
    if(props.setting.fieldsetting.enum){
        for(let i=0;i<props.setting.fieldsetting.enum.length;i++){
            const v = props.setting.fieldsetting.enum[i]
            options.push({value:v, label: camelCaseToWords(v)})
        }


    }
    return options
}


const emits = defineEmits(['change','update:modelValue','update:docNoFormat'])

watch(modelValue ,(newvalue:any)=>{

    if([SimpleAppInputType.date,SimpleAppInputType.calendar].includes(props.inputType)){
        if(modelValue.value){
            datevalue.value = moment(modelValue.value as string ).format('YYYY-MM-DD')
        }else{
            datevalue.value = ''
        }
        
    }
    // else if(props.inputType==SimpleAppInputType.autocomplete){            
    //         modelValue.value=autocompleteitem.value                
    // }

    emits('change',modelValue.value)
    emits('update:modelValue',modelValue.value)    
})


/************ start autocomplete only ***************/

/************ end autocomplete only ***************/





const triggerDocNoFormatChange=(formatdata:any)=>{
    emits('update:docNoFormat',formatdata)
}
</script>
<style scoped>
</style>