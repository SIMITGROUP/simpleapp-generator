
<template>
    
        <div class="p-inputgroup w-full flex flex-row">
            <InputText class="flex-1 rounded-tr-none rounded-br-none" 
                :readonly="readonly"
                v-model="modelValue"    
                :placeholder="placeholder"
            />
            <span class="p-inputgroup-addon p p-0">
                <button  type="button" @click="toggle" 
                    :disabled="readonly"
                    class="border rounded-tl-none rounded-bl-none btn btn-primary -ml-1 h-full  p-3 rounded-r-md">
                    <i class="pi pi-angle-down"></i>
                </button>
                <OverlayPanel ref="op" class="p-4">           
                    <div class="m-4">
                        <ul>                      
                            <li v-for="docno in docFormatlist" class="hover-list-primary p-2" >
                                <a class="flex-row p-2 mt-4" @click="chooseFormat(docno)">
                                    <span class="pi pi-hashtag mr-2"></span>
                                    <span class="">{{docno.docNoFormatName}}</span>
                                    <span class="ml-2 text text-green-600">{{docno.sample}}</span>
                                </a>
                            </li>                    
                        </ul>
                    </div>         
                </OverlayPanel>
            </span>
            <!-- {{ Object.getOwnPropertyNames(setting) }} -->
        </div>
    
</template>
<script lang="ts" setup>
import {ForeignKey} from '~/types'
import OverlayPanel from 'primevue/overlaypanel';
import InputText from 'primevue/inputtext';
import {DocNoFormat} from "~/types"
const props = defineProps<{
    setting:any    
    readonly?:boolean
}>()
const op = ref();
const placeholder = ref('')
const docFormatlist = ref()
const modelValue = defineModel<string>()
const docNoFormat = props.setting.document.getReactiveData().value.docNoFormat
const emits = defineEmits(['update:docNoFormat'])

const documenttype = props.setting.document.doctype

const toggle = async (event:any) => {
    op.value.toggle(event);            
}

const chooseFormat =  (item:any) =>{
    placeholder.value = item.sample    
    const f = item
    docNoFormat.value = { _id : f._id, label : f.docNoFormatName}
    op.value.toggle();
    emits('update:docNoFormat',item)
}

const loadDocFormats = async () =>{
    docFormatlist.value= await getDocFormats(documenttype)    
    if(docFormatlist.value.length>0){
        const f = docFormatlist.value[0]
        docNoFormat.value = { _id : f._id, label : f.docNoFormatName}
        placeholder.value = docFormatlist.value[0].sample        
    }
}

onMounted(()=>{
    loadDocFormats()

})
</script>