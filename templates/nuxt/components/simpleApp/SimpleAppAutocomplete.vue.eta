<template>
  <div
    v-if="readonly"
    class="p-2 border rounded-lg border-gray-300 flex h-input items-center"
  >
    <button
      type="button"
      :readonly="readonly"
      class="cursor-pointer text-primary-600"
      tabindex="0"
      @click="openViewer(true)"
    >
      {{ modelValue && modelValue.label ? modelValue.label : "-" }}
    </button>
  </div>
  <div
    v-else-if="modelValue !== undefined"
    class="px-3 border rounded-lg border-gray-300 flex h-input items-center"
  >
    <!-- readonly -->
    <button
      :id="inputId"
      ref="autocompleteinput"
      type="button"
      class="cursor-pointer text-primary-600 flex-1 text-left"
      @click="openViewer(false)"
    >
      {{ modelValue && modelValue.label ? modelValue.label : "-" }}
    </button>

    <div
      class="text-right text-white align-middle"
    >
      <button
        type="button"
        class="pi pi-times rounded-full bg-slate-500 p-1 cursor-pointer text-xs"
        tabindex="0"
        @click="clear"
      />
    </div>
  </div>
  <div v-else class="relative">
    <div
      v-if="modelValue?._id"
      class="absolute h-full top-0 right-10 text-right text-white z-10 align-middle py-2 px-3"
    >
      <span
        class="pi pi-times rounded-full bg-slate-500 p-1 cursor-pointer text-xs"
        @click="clear"
      />
    </div>

    <AutoComplete
      v-if="!isMobile()"
      ref="autocompleteinput"
      v-model="autocompleteitem"
      pt:root="w-full"
      pt:pcInputText:root="w-full rounded-r-none"
      pt:dropdown="min-w-10"
      force-selection
      option-label="label"
      :placeholder="placeholdertxt"
      :dropdown="true"
      :dropdown-mode="'current'"
      :readonly="readonly"
      :pt="pt"
      :delay="500"
      :disabled="readonly"
      :suggestions="list"
      :input-id="inputId"
      :path="setting.instancepath"
      @focus="setFocus"
      @item-select="pickAutoComplete"
      @complete="getListFromAutocompleteApi"
      @clear="clear"
      @click="clickAutocomplete"
      @blur="onBlurAutocomplete"
    >
      <template #header>
        <slot name="header">
          <div
            class="flex flex-row font font-semibold text-sm gap-2 p-2"
          >
            <div class="w w-1/3 line-clamp-1">
              {{ t(codefield) ?? t("code") }}
            </div>
            <div class="w w-2/3 line-clamp-1">
              {{ t(labelfield) ?? t("label") }}
            </div>
          </div>
        </slot>
      </template>
      <template #content>
        <div class="bg-red-300">content</div>
      </template>
      <template #option="{ index, option }">
        <slot name="option" :index="index" :option="option">
          <div class="flex flex-row text-sm gap-2">
            <div class="w w-1/3 line-clamp-1">{{ option.code }}</div>
            <div class="w w-2/3 line-clamp-1">{{ option.label }}</div>
          </div>
        </slot>
      </template>
      <!-- </slot> -->
    </AutoComplete>
    <div v-else>
      <InputGroup class="w-full flex flex-row">
        <InputText
          :value="modelValue?.label"
          :placeholder="placeholdertxt"
          class="rounded-r-none"
          @focus="showAutocompleteDialog(false)"
        />
        <InputGroupAddon
          v-ripple
          class="bg bg-primary-600 text-white rounded-r-lg p-3"
          @click="showAutocompleteDialog(true)"
        >
          <i :class="`pi ${modelValue ? 'pi-link' : 'pi-angle-down'}`" />
        </InputGroupAddon>
      </InputGroup>

      <OverlaySideBarCrud
        v-model="mobileVisible"
        close-event-name="autocompleteoverlay"
      >
        <template v-if="mobileListMode == 'list'">
          <mobile-toolbar>
            <template #start>
              <ButtonText @click="mobileVisible = false">
                <i class="pi pi-times"/>
              </ButtonText>
            </template>
            <template #center>
              <TextTitle class="text-white">{{ t(docname) }}</TextTitle>
            </template>
            <template #end>
              <div/>
              <!-- <ButtonText @click="openViewer(false)">
            <i class="pi pi-plus"></i>
            </ButtonText>  -->
            </template>
          </mobile-toolbar>
          <ListView
            :list="list"
            :with-filter="true"
            :default-filter-value="defaultFilterValue"
            id-field="_id"
            #default="{ item, index }"
            title-field="code"
            sub-title-field="label"
            @click="onClickInMobile"
          >
            <div class="flex flex-row justify-end">
              <div class="flex-1">{{ item.label }}</div>
              <div>{{ item.code }}</div>
            </div>
          </ListView>
        </template>
        <template v-else>
          <component
            :is="
              defineAsyncComponent(
                getDocument(setting.fieldsetting['x-foreignkey']).viewer,
              )
            "
            @after="
              async (eventType: FormCrudEvent, data: any, result: any) =>
                await afterRenderMobileForm(eventType, data)
            "
          />
        </template>
      </OverlaySideBarCrud>
    </div>
  </div>
</template>
<script setup lang="ts">
/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { isNull } from "lodash";
import jsonpath from "jsonpath";
import {
  AutoCompleteDropdownClickEvent,
  AutoCompleteProps,
} from "primevue/autocomplete";
import {
  autocompletetype,
  ForeignKey,
  FormCrudEvent,
  SchemaConfig,
  SchemaType,
} from "~/types";
const mobileVisible = ref(false);
const autocompleteinput = ref();
const { $event } = useNuxtApp();
const list = ref<any[]>([]);
const props = withDefaults(
  defineProps<{
    setting: any;
    allowAddNew?: boolean;
    showNull?: boolean;
    readonly?: boolean;
    placeholder?: string;
    hidelabel?: boolean;
    inputId: string;
    componentProps?: AutoCompleteProps;
    autocompleteFilter?: any;
    pt?: any;
  }>(),
  {
    allowAddNew: true,
    showNull: true,
  },
);

const mobileListMode = ref("list");
const defaultFilterValue = ref("");
const path = "$" + props.setting.instancepath;
const modifiedpath = path.replaceAll("/", ".");
const queryresult = jsonpath.query(props.setting.defaultValue, modifiedpath)[0];
const remotedoc = getDocument(props.setting.fieldsetting["x-foreignkey"]);
const schema: SchemaType = <SchemaType>remotedoc?.docClass.getSchema();
const labelfield = schema["x-simpleapp-config"].documentTitle as string;
const codefield = schema["x-simpleapp-config"].uniqueKey as string;
const docname = props.setting.fieldsetting["x-foreignkey"];
const placeholdertxt = computed(() => props.placeholder ?? t(docname));
const emptyautocomplete = computed(() => undefined); //((): autocompletetype => queryresult);
const cancelShowList = ref(false);
const autocompleteitem = ref<autocompletetype | undefined>(
  emptyautocomplete.value,
);
const modelValue = defineModel<autocompletetype | undefined>({
  required: true,
});
if (modelValue.value && modelValue.value._id) {
  autocompleteitem.value = { ...modelValue.value };
}
//clear auto complete auto set value = empty
const clear = () => {
  autocompleteitem.value = undefined;
  modelValue.value = undefined;
  if (!isMobile()) {
    setTimeout(() => {
      const autoel = autocompleteinput.value.$el;
      autoel?.firstElementChild?.focus();
    }, 100);
  }
};

//if record picked, click button show record info instead
const openlink = () => {
  if (modelValue.value?._id) {
    openViewer(true);
  }
};

//recorrect data if lose focus
const onBlurAutocomplete = () => {
  if (autocompleteitem.value === null) {
    autocompleteitem.value = emptyautocomplete.value;
  }
  if (isNull(modelValue.value)) {
    modelValue.value = autocompleteitem.value;
  } else if (typeof modelValue.value == "object") {
  } else {
    modelValue.value = autocompleteitem.value;
  }
};

const showAutocompleteDialog = (isbutton: boolean) => {
  mobileListMode.value = "list";
  if (modelValue.value && isbutton) {
    openViewer(false);
  } else {
    //  if(!modelValue.value && !isbutton ){
    mobileVisible.value = true;
    defaultFilterValue.value =
      modelValue.value && modelValue.value?._id ? modelValue.value.label : "";
    getListFromAutocompleteApi({ query: "" });
  }
};
//obtain remote data
const getListFromAutocompleteApi = (event: any) => {
  const keyword = event?.query ?? "";
  const defaultfilter: any = schema.properties["active"]
    ? { active: true }
    : {};
  const morefilter = props.autocompleteFilter ?? defaultfilter;
  const targetDocument = props.setting.fieldsetting["x-foreignkey"];
  getDocumentApi(targetDocument)
    .autoComplete(keyword, morefilter)
    .then((res: any) => {
      // console.log("Run autocomplete?");
      list.value = res.data;

      if (
        props.allowAddNew &&
        canPerform(upperFirst(targetDocument), "create")
      ) {
        list.value = list.value.concat({
          _id: "new",
          label: "<" + t("new") + ">",
        });
      }
    });
};

//on select
const pickAutoComplete = (event: any) => {
  if (event.value._id === "") {
    modelValue.value = undefined; //emptyautocomplete.value;
    autocompleteitem.value = undefined; //emptyautocomplete.value;
  } else if (event.value._id === "new") {
    modelValue.value = undefined; // emptyautocomplete.value;
    autocompleteitem.value = undefined; //emptyautocomplete.value;
    if (isMobile()) {
      mobileListMode.value = "form";
      return;
    } else openViewer(false);
  } else if (typeof event.value.query == "undefined") {
    modelValue.value = event.value;
    autocompleteitem.value = event.value;
  }
  mobileVisible.value = false;
};

const emits = defineEmits([
  "change",
  "update:modelValue",
  "update:docNoFormat",
]);
watch(modelValue, (newvalue: any) => {
  emitChanges();
});
const emitChanges = () => {
  emits("change", modelValue.value);
  if (!isMobile()) {
    setTimeout(() => {
      const autoel = autocompleteinput.value;
      autoel?.firstElementChild?.focus();
    }, 100);
  }
};

const setFocus = (ev: any) => {
  if (!isMobile()) ev.target.select();
};

//pop up records
const openViewer = (readonly: boolean) => {
  if (remotedoc) {
    $event("ViewRecord", {
      _id: (modelValue.value?._id ?? "") as string,
      eventId: randomUUID(),
      label: (readonly
        ? modelValue.value?.label
        : `${t("new") + " " + t(docname)}`) as string,
      readonly: readonly,
      viewer: getDocument(docname)?.viewer,
      documentName: docname,

      //after create, auto copy value into auto complete
      after: async (eventType: FormCrudEvent, data: any) => {
        if (
          eventType == FormCrudEvent.create ||
          eventType == FormCrudEvent.update
        ) {
          autocompleteitem.value = {
            _id: data._id,
            code: data[codefield],
            label: data[labelfield],
          };
          if (schema["x-simpleapp-config"].additionalAutoCompleteFields) {
            const addfields =
              schema["x-simpleapp-config"].additionalAutoCompleteFields;
            for (let i = 0; i < addfields.length; i++) {
              const fieldname = addfields[i] as string;
              autocompleteitem.value[fieldname] = data[fieldname];
            }
          }
          modelValue.value = { ...autocompleteitem.value };
          emitChanges();
        }
      },
    });
  }
};

const onClickInMobile = (id: string, item: ForeignKey) => {
  pickAutoComplete({ value: item });
};

const afterRenderMobileForm = async (
  eventType: FormCrudEvent,
  data: any,
  result: any,
) => {
  // console.log("afterRenderMobileForm", eventType);
  if (eventType == FormCrudEvent.create || eventType == FormCrudEvent.update) {
    autocompleteitem.value = {
      _id: data._id,
      code: data[codefield],
      label: data[labelfield],
    };
    if (schema["x-simpleapp-config"].additionalAutoCompleteFields) {
      const addfields =
        schema["x-simpleapp-config"].additionalAutoCompleteFields;
      for (let i = 0; i < addfields.length; i++) {
        const fieldname = addfields[i] as string;
        autocompleteitem.value[fieldname] = data[fieldname];
      }
    }
    modelValue.value = { ...autocompleteitem.value };
    emitChanges();
    mobileVisible.value = false;
  } else if (eventType == FormCrudEvent.exit) {
    mobileVisible.value = false;
  }
};

const clickAutocomplete = (a, b) => {
  // console.log("clickAutocomplete", a, b);
  return false;
};
</script>
