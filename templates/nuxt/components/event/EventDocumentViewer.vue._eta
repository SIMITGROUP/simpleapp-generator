<template>
  <OverlayViewer v-model="visible">
    <template #header>
      <div class="flex flex-row gap-4">
        <Chip
          v-for="(v, k) in allview"
          :label="v.label"
          @remove="deleteTab"
          :removable="lastDocumentName == v.documentName"
        />
      </div>
    </template>
    <div class="w-full h-full">
      <div
        v-for="(v, k) in allview"
        v-memo="[k]"
        class="viewer-item flex flex-col"
      >
        <div>
          <component
            :is="defineAsyncComponent(v.viewer)"
            :_id="v._id"
            :readonly="v.readonly"
            :paras="v.paras"
            @after="
              (eventType: FormCrudEvent, data: any, result: any) =>
                after(v, eventType, data, result)
            "
          />
        </div>
      </div>
    </div>
  </OverlayViewer>
</template>
<script setup lang="ts">
/*
 * This file was automatically generated by simpleapp generator during initialization. It is changable.
 * last change 2024-02-22
 * author: Ks Tan
 */
import { onKeyStroke } from "@vueuse/core";
import { useDialog } from "primevue/usedialog";
import { defineAsyncComponent } from "vue";
import { ViewRecord, FormCrudEvent } from "~/types";
// import TabView from 'primevue/tabview';
import Chip from "primevue/chip";
const lastDocumentName = computed(() => {
  const keys = Object.keys(allview.value);

  if (keys.length == 0) return "";

  const keyname = keys[keys.length - 1];

  return allview.value[keyname].documentName;
});
const { $listen } = useNuxtApp();
const visible = ref(false);
const autodeletetab = ref(true);
const allview = ref<{ [key: string]: ViewRecord }>({});
const after = (
  v: ViewRecord,
  eventType: FormCrudEvent,
  data: any,
  result: any,
) => {
  if (v.after) {
    v.after(eventType, data, visible);
   
    //only after mount consider no remove tab
    if (eventType == "mount") return;
    else if(eventType=='setDocStatus') return;
    deleteTab();
  }
};

onKeyStroke("Escape", (e) => {
  e.preventDefault();
  deleteTab();
});

const deleteTab = () => {
  const keys = Object.keys(allview.value);
  const lastkey = keys[keys.length - 1];
  // console.log("Trigger delete tab");
  if (keys.length == 1) {
    const callback = allview.value[lastkey]?.after;
    if (typeof callback == "function") {
      callback(FormCrudEvent.exit, undefined, visible);
    }

    if (autodeletetab.value) {
      delete allview.value[lastkey];
      visible.value = false;
      useNuxtApp().$event("CloseDialog", "viewer");
    }
  } else {
    // console.log("Trigger delete tab2");
    delete allview.value[lastkey];
  }
};

$listen("ViewRecord", (setting) => {
  visible.value = true;
  if (setting["autoclose"] != undefined) {
    autodeletetab.value = setting["autoclose"] == 0 ? false : true;
  }
  allview.value[setting.eventId] = setting;
});

$listen("CloseDialog", (documentName: string) => {
  if (!documentName) return;
  const keys = Object.keys(allview.value);
  const lastkey = keys[keys.length - 1];
  if (
    allview.value[lastkey] &&
    allview.value[lastkey].documentName == documentName
  ) {
    deleteTab();
  }
});
// $listen('C' (setting) => {
//   if(initDocumentName.value=='') initDocumentName.value= setting.documentName
//   visible.value = true;
//   allview.value[setting.eventId] = setting;
// });
//
const clearView = () => {
  const firstId = Object.keys(allview.value)[0];
  // console.log("clear view", allview.value);
  const callback = allview.value[firstId]?.after;
  if (typeof callback == "function") {
    callback(FormCrudEvent.exit, undefined, visible);
  }
  allview.value = {};
};
// watch(visible,()=>{
//       if(visible.value==false){
//         v.after(FormCrudEvent.exit, data,visible);
//       }
//     })
watch(visible, () => {
  if (!visible.value) {
    clearView();
  }
});
</script>

<style scoped>
.viewer-item {
  display: none;
}
.viewer-item:last-child {
  display: flex;
}
</style>
