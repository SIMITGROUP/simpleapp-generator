<template>  
    <Listbox      
      ref="listview"
      :options="filterlist" 
      v-model="selectedItem" 
      :optionLabel="titleField" 
      :filter="withFilter"
      :optionValue="idField"
      
      :filterFields="filterFields"
      :pt="{filterContainer:{class:'p-inputgroup'}}"
      >          
      <template #empty>
          <slot name="nodata">
              <NodataLarge/>
          </slot>
      </template> 
      <template #filtericon="sss">
        <!-- <i class="pi pi-refresh"/> -->
        <InputGroupAddon v-if="filter !== undefined && Object.keys(filter).length > 0"
          :pt="{
            root: {
              class:
                'p-0 pi pi-filter cursor-pointer bg-warning-400 text-white p-3',
            },
          }"
          @click="showMoreFilter"
        >
      </InputGroupAddon>
      <InputGroupAddon
        v-else-if="filter !== undefined"
        :pt="{ root: { class: 'p-0 pi pi-filter cursor-pointer p-3' } }"
        @click="showMoreFilter"
      >
      </InputGroupAddon>
        <slot name="filterInputGroupAddon"></slot>
        
        <InputGroupAddon
          :pt="{
            root: {
              class:
                'p-0 cursor-pointer bg-primary-400 pi pi-plus p-3 text-white',
            },
          }"
          v-if="withAddNew"
          @click="emits('add')"
        >
        </InputGroupAddon>
      </template>
      
      <template #header="{options,value}">                
          <div>
            <slot name="header">
              <TextMain class="text-gray-800 pl-2 pt-2">{{ header }}</TextMain>
            </slot>
            <hr class="mt-2" />
          </div>          
      </template>

      <template #option="{option,index}">
        <div
          :id="titleField && option[titleField] && option[titleField][0]"
        ></div>
        <div
          class="w-full bg-gray-400 dark:bg-gray-500 p-1 pl-2 top-0 sticky opacity-90"
          v-if="
            showIndex && titleField && showCategoryBar(option[titleField][0])
          "
        >
          <span>{{ option[titleField][0] }}</span>
        </div>
        <div class="border-l-none border-r-none listview-item">
        <!--     :to="getUrl(option)" -->
          <div
        
            :class="`p-2 ${showClickEffect ? 'listlink' : ''}`"
          >
            <slot name="default" :item="option" :index="index">
              <div class="flex flex-row">
                <div class="flex-1 mr-2 dark:text-white">
                  {{ option[titleField ?? ""] }}
                </div>
                <div class="text-right dark:text-gray-400 text-gray-600">
                  {{ option[subTitleField ?? ""] }}
                </div>
              </div>
            </slot>
          </div>
        </div>
      </template>        
    </Listbox>        
  
    
  

    <Dialog
      v-model:visible="visibleMoreFilter"
      :header="t('filter')"
      :pt="{ root: { class: 'w-1/3' } }"
    >
      <slot name="filter"> define filter in #filter </slot>
      <template #footer>
        <div class="flex flex-row gap-4">
          <ButtonDefault @click="clearFilter" class="flex flex-row p-2">
            <i class="pi pi-times mr-1" />
            <span class="mr-1">{{ t("clear") }}</span>
          </ButtonDefault>
          <ButtonPrimary @click="runFilter" class="flex flex-row p-2">
            <i class="pi pi-filter mr-1" />
            <span class="mr-1">{{ t("ok") }}</span>
          </ButtonPrimary>
        </div>
      </template>
    </Dialog>
  
</template>
<script setup lang="ts" generic="T extends { [key: string]: any }">
/**
 * This file was automatically generated by simpleapp generator during initialization. It is changable.
 * --remove-this-line-to-prevent-override--
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { ref } from "vue";
import { ListItem } from "~/types/listview";
import _ from "lodash";
const listview = ref(null)
const visibleMoreFilter = ref(false);
const listviewfilter = ref();
const selectedItem = ref('')
const props = withDefaults(
  defineProps<{
    list: T[];
    url?: string;
    urlsuffix?: string;
    header?: string;
    titleField?: string;
    idField: string;
    subTitleField?: string;
    withFilter?: boolean;
    filter?: { [key: string]: any };
    withAddNew?: boolean;
    showIndex?: boolean;
    showClickEffect?: boolean;
    
  }>(),
  {
    idField: "_id",
  },
);
const filterFields=computed(()=>{
  const fields:string[] = []
  if(props.titleField) fields.push(props.titleField)
  if(props.subTitleField) fields.push(props.subTitleField)
  return fields
})
const letters = ref<string[]>([]);
let lastchar = "";

const emits = defineEmits(["add", "runFilter", "clearFilter", "click"]);
const searchvalue = ref("");

const filterlist = computed(() => {
  let newlist: T[] = [];
  if (!Array.isArray(props.list)) {
    return [];
  }
  if (props.list !== undefined) {
    const searchstr = searchvalue.value.toLowerCase();

    newlist = props.list.filter((item: T) => {
      let res = false;
      if (searchstr.length == 0) return true;
      if (props.titleField && item[props.titleField]) {
        res = item[props.titleField].toLowerCase().includes(searchstr);
      }
      if (res) return true;

      if (props.subTitleField && item[props.subTitleField])
        res = item[props.subTitleField].toLowerCase().includes(searchstr);
      if (res) return true;

      return false;
    });
  }

  return newlist;
});

const allLetters = computed(() => {
  if (props.titleField && props.list) {
    return props.list
      .filter((item) => {
        const titlevalue: string = item[props.titleField as keyof typeof item];
        if (titlevalue[0] != lastchar) {
          lastchar = item[props.titleField as keyof typeof item][0];
          return true;
        }
      })
      .map((item) => item[props.titleField as keyof typeof item][0]);
  } else {
    return [];
  }
});

const showCategoryBar = (letter: string) => {
  if (lastchar != letter && letter.length > 0) {
    lastchar = letter;
    return true;
  } else {
    return false;
  }
};


const showMoreFilter = () => {
  visibleMoreFilter.value = true;
};
const clearFilter = () => {
  visibleMoreFilter.value = false;
  emits("clearFilter");
};
const runFilter = () => {
  visibleMoreFilter.value = false;
  emits("runFilter");
};

watch(selectedItem,(newvalue)=>{
  if(newvalue){
    emits("click",newvalue);
    if(props.url){
      navigateTo(props.url+'/'+newvalue)
    }
    
  }
})

function setFocus(){
  const listbodyid = listview.value?.$el?.id
  document.querySelector(`#${listbodyid} .p-listbox-list`)?.focus()
}
defineExpose({setFocus})
</script>
