<template>
  <div class="relative">
    <div v-if="header">
      <slot name="header">
        <TextMain class="text-gray-800 pl-2 pt-2">{{ header }}</TextMain>
      </slot>
      <hr class="mt-2" />
    </div>
    <div v-if="withFilter" class="flex flex-row p-2">
      <InputGroup :pt="{ root: { class: 'p-0' } }">
        <InputGroupAddon
          v-if="filter !== undefined && Object.keys(filter).length > 0"
          :pt="{
            root: {
              class:
                'p-0 pi pi-filter cursor-pointer bg-warning-400 text-white p-3',
            },
          }"
          @click="showMoreFilter"
        >
        </InputGroupAddon>
        <InputGroupAddon
          v-else
          :pt="{ root: { class: 'p-0 pi pi-filter cursor-pointer p-3' } }"
          @click="showMoreFilter"
        >        
        </InputGroupAddon>
        <InputText
          :placeholder="t('searchKeyword')"
          v-model="searchvalue"
          type="search"
          :pt="{ root: { class: 'p-1' } }"
          ref="listviewfilter"
        />
        <InputGroupAddon
          :pt="{
            root: {
              class:
                'p-0 cursor-pointer bg-primary-400 pi pi-plus p-3 text-white',
            },
          }"
          v-if="withAddNew"
          @click="emits('add')"
        >

        </InputGroupAddon>
        <slot name="inputAddOn"></slot>
      </InputGroup>
    </div>

    <div
      v-if="showIndex"
      class="flex flex-col fixed left-1 top-1/5 gap-2 z-10 rounded border bg-white dark:bg-black opacity-90"
    >
      <NuxtLink
        class="text-primary-600 dark:text-primary-400 text-lg p-2"
        :url="'#' + l"
        v-for="l in allLetters"
        >{{ l }}</NuxtLink
      >
    </div>

    <div v-if="filterlist && filterlist.length > 0">
      <div>
        <div v-for="(item, index) in filterlist">
          <!-- :class="isMobile() ? '' : 'overflow overflow-y-scroll overflow-auto '" -->
          <div
            :id="titleField && item[titleField] && item[titleField][0]"
          ></div>
          <div
            class="w-full bg-gray-400 dark:bg-gray-500 p-1 pl-2 top-0 sticky opacity-90"
            v-if="
              showIndex && titleField && showCategoryBar(item[titleField][0])
            "
          >
            <span>{{ item[titleField][0] }}</span>
          </div>
          <div
            @click="onClick(index, item, $event)"
            :class="`border-l-none border-r-none listview-item dark:border-t-gray-700 ${
              index > 0 ? 'border-t-2' : ''
            }`"
          >
            <NuxtLink
              :to="getUrl(item)"
              :class="`p-2 ${showClickEffect ? 'listlink' : ''}`"
            >
              <slot name="default" :item="item" :index="index">
                <div class="flex flex-row">
                  <div class="flex-1 mr-2 dark:text-white">
                    {{ item[titleField ?? ""] }}
                  </div>
                  <div class="text-right dark:text-gray-400 text-gray-600">
                    {{ item[subTitleField ?? ""] }}
                  </div>
                </div>
              </slot>
            </NuxtLink>
          </div>
        </div>
      </div>
    </div>
    <div v-else>
      <div class="w-full h-20 p-2 border-l-none border-r-none">
        <slot name="nodata">
          <div class="border-round border-1 surface-border p-4 surface-card">
            {{ t("noDataFound") }}
          </div>
        </slot>
      </div>
    </div>

    <Dialog
      v-model:visible="visibleMoreFilter"
      :header="t('filter')"
      :pt="{ root: { class: 'w-1/3' } }"
    >
      <slot name="filter"> define filter in #filter </slot>
      <template #footer>
        <div class="flex flex-row gap-4">
          <ButtonDefault @click="clearFilter" class="flex flex-row p-2">
            <i class="pi pi-times mr-1" />
            <span class="mr-1">{{ t("clear") }}</span>
          </ButtonDefault>
          <ButtonPrimary @click="runFilter" class="flex flex-row p-2">
            <i class="pi pi-filter mr-1" />
            <span class="mr-1">{{ t("ok") }}</span>
          </ButtonPrimary>
        </div>
      </template>
    </Dialog>
  </div>
</template>
<script setup lang="ts" generic="T extends { [key: string]: any }">
/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { ref } from "vue";
import { ListItem } from "~/types/listview";
import _ from "lodash";
const visibleMoreFilter = ref(false);
const listviewfilter = ref();
const props = withDefaults(
  defineProps<{
    list: T[];
    url?: string;
    urlsuffix?: string;
    header?: string;
    titleField?: string;
    idField?: string;
    subTitleField?: string;
    withFilter?: boolean;
    filter?: { [key: string]: any };
    withAddNew?: boolean;
    showIndex?: boolean;
    showClickEffect?: boolean;
  }>(),
  {
    idField: "_id",
  },
);
const letters = ref<string[]>([]);
let lastchar = "";

const emits = defineEmits(["add", "runFilter", "clearFilter", "click"]);
const searchvalue = ref("");
const selecteditem = ref("");
const clickRow = (item: ListItem) => {
  // emit('clickitem',item)
  // selecteditem.value = item.code
};
const getUrl = (item: any) => {
  const urlsuffix =
    props.urlsuffix === undefined || props.urlsuffix == ""
      ? ""
      : "/" + props.urlsuffix;
  if (props.url && props.idField) {
    if (_.last(props.url) == "/")
      return `${props.url}${item[props.idField]}${urlsuffix}`;
    else return `${props.url}/${item[props.idField]}${urlsuffix}`;
  } else return undefined;
  // :to="url ? `${url}/${item[idField]}` : undefined"
};
const filterlist = computed(() => {
  let newlist: T[] = [];
  if (!Array.isArray(props.list)) {
    return [];
  }
  if (props.list !== undefined) {
    const searchstr = searchvalue.value.toLowerCase();

    newlist = props.list.filter((item: T) => {
      let res = false;
      if (searchstr.length == 0) return true;
      if (props.titleField && item[props.titleField]) {
        res = item[props.titleField].toLowerCase().includes(searchstr);
      }
      if (res) return true;

      if (props.subTitleField && item[props.subTitleField])
        res = item[props.subTitleField].toLowerCase().includes(searchstr);
      if (res) return true;

      return false;
    });
  }

  return newlist;
});

const allLetters = computed(() => {
  if (props.titleField && props.list) {
    return props.list
      .filter((item) => {
        const titlevalue: string = item[props.titleField as keyof typeof item];
        if (titlevalue[0] != lastchar) {
          lastchar = item[props.titleField as keyof typeof item][0];
          return true;
        }
      })
      .map((item) => item[props.titleField as keyof typeof item][0]);
  } else {
    return [];
  }
});

const showCategoryBar = (letter: string) => {
  if (lastchar != letter && letter.length > 0) {
    lastchar = letter;
    return true;
  } else {
    return false;
  }
};

const onClick = (index: number, data: T, event: Event | MouseEvent) => {
  emits("click", index, data, event);
};

const showMoreFilter = () => {
  visibleMoreFilter.value = true;
};
const clearFilter = () => {
  visibleMoreFilter.value = false;
  emits("clearFilter");
};
const runFilter = () => {
  visibleMoreFilter.value = false;
  emits("runFilter");
};
onMounted(() => {
  // if(props.withFilter) listviewfilter.value.$el.focus()
});
</script>
