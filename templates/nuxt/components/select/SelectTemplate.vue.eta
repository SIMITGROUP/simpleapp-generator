<template>
  <div class="w-full">
    <div class="flex flex-row">
      <label v-if="!hideLabel" :for="fieldid">
        {{ t(documentName) }}
      </label>
      <div
        v-if="allowAddNew"
        @click="addnew"
        class="cursor-pointer ml-2 pt-1 text-xs text-blue-600"
      >
        <span>{{ t("new") }}</span>
      </div>
    </div>
    <MultiSelect
      class="w-full md:w-full"
      :input-id="fieldid"
      v-if="multiple"
      display="chip"
      @update:modelValue="change"
      v-model="modelValue"
      :options="options"
      optionLabel="label"
      optionValue="value"
      filter
      :placeholder="placeholder"
    >
      <template #value="slotProps">
        <slot name="value" :slotProps="slotProps"> </slot>
      </template>
      <template #option="slotProps">
        <slot
          name="default"
          :option="slotProps.option"
          :index="slotProps.index"
        >
        </slot>
      </template>
    </MultiSelect>
    <Dropdown
      class="w-full md:w-full"
      :input-id="fieldid"
      v-else
      @update:modelValue="change"
      filter
      v-model="modelValue"
      :options="options"
      optionLabel="label"
      optionValue="value"
      :placeholder="placeholder"
    >
      <template #value="slotProps">
        <slot name="value" :item="getItem(modelValue)"></slot>
      </template>
      <template #option="slotProps">
        <slot
          name="default"
          :option="slotProps.option"
          :index="slotProps.index"
        ></slot>
      </template>
    </Dropdown>
  </div>
</template>
<script setup lang="ts">
/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-26
 * Author: Ks Tan
 */
import Dropdown from "primevue/dropdown";

import { ForeignKey, SimpleAppDocuments, FormCrudEvent } from "~/types";
const emits = defineEmits(["change"]);

const props = defineProps<{
  documentName: keyof SimpleAppDocuments;
  placeholder?: string;
  showNull?: boolean;
  allowAddNew?: boolean;
  filter?: any;
  multiple?: boolean;
  hideLabel?: boolean;
}>();
// const initvalue = props.multiple==true ? [] : ''
const modelValue = defineModel<string | string[]>();
const allowAddNew = computed(()=> props.allowAddNew && canPerform(props.documentName,'create'))
const list = ref<ForeignKey[]>([]);
const fieldid = randomUUID();

const options = ref<
  {
    value: string;
    label: string;
    more: any;
  }[]
>([]);
const getListOptions = async () => {
  const filter = props.filter ?? {};
  const res = await getDocumentApi(props.documentName).autoComplete("", filter);
  list.value = res.data as ForeignKey[];
  // if (!props.multiple && props.allowAddNew)
  //   list.value.unshift({ _id: "new", code: "", label: t("addNew") });
  if (!props.multiple && props.showNull)
    list.value.unshift({ _id: "", code: "", label: t("null") });
  options.value = list.value.map((item) => ({
    value: item._id,
    label: item.label,
    more: item,
  }));
};
onMounted(async () => {
  await getListOptions();
  if (modelValue.value) change(modelValue.value);
});
const getItem = (id: string) =>
  list.value?.find((item) => {
    return item._id == id;
  });

const change = (id: string | string[]) => {
  const selectedItem = getItem(id);
  emits("change", id, selectedItem);
  // console.log("changed",selectedItem)
};

const addnew = () => {
  const doc = getDocument(props.documentName)?.docClass;
  if (doc) {
    const tmpdata = doc?.getReactiveData();
    type DataType = typeof tmpdata.value;
    onScreenAddDocument<DataType>(
      props.documentName,
      undefined,
      async (eventType: FormCrudEvent, data: DataType) => {
        if (eventType == FormCrudEvent.create) {
          await getListOptions();
          if (props.multiple) {
            if (modelValue.value === undefined) modelValue.value = [data._id];
            else if (Array.isArray(modelValue.value))
              modelValue.value.push(data._id);
          } else modelValue.value = data._id;
          refreshDocumentList(props.documentName);
          emits("change", data._id, getItem(data._id));
        }
      },
    );
  }
};
</script>
