/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { defineNuxtPlugin } from "#app";
import axios, { Axios, AxiosResponse } from 'axios'
import {Notification,EventType} from '~/types'
// import PrimeVue from "primevue/config";
import mitt from 'mitt'
// import ToastService from 'primevue/toastservice';
// import ConfirmationService from 'primevue/confirmationservice';
// import Tooltip from 'primevue/tooltip';
const emitter = mitt<EventType>()
export default defineNuxtPlugin( async(nuxtApp) => {
    //hide __NUXT__ at client side.
    onNuxtReady(()=>{
      window.__NUXT__ = undefined;
    })
    //const { csrf } = useCsrf()    
    //axios.defaults.headers.common = {"CSRF-TOKEN": csrf};
    const myaxios = axios.create({timeout:5000})
    myaxios.interceptors.response.use((response) => response, (error) => {
      if(error.code && error.code["ECONNABORTED"]){
        console.error("Failed to reach backend server")
        // navigateTo("/error503")
        createError({statusCode:503,statusMessage:"Backend server timeout, verify it is up and running!"})
        
      }
      else if(error.response.status==401){        
        console.error("axios 401 session expired, redirect to logout page1")
        logout()
      }else if(error.response && error.response.status){
        console.error("have error response")
        createError({
          statusCode:error.response.status,
          statusMessage:error.response.message})
          return Promise.reject(error)
      }else{
        console.error("unknown error")
        createError({statusCode:500,statusMessage:"Internal server error"})
      }
    });
    
    // nuxtApp.vueApp.use(PrimeVue, { ripple: true,Tailwind:true, pt: Tailwind});
    // nuxtApp.vueApp.use(PrimeVue,  { unstyled: true, pt: {} });
    // nuxtApp.vueApp    
    // .use(ToastService)
    // .use(ConfirmationService)
    // .directive('tooltip', Tooltip)
    // ;    

  
    return {
        provide: {
          event: emitter.emit, // Will emit an event
          listen: emitter.on, // Will register a listener for an event
          axios: myaxios,
        } 
    }
    //other components that you need
});
