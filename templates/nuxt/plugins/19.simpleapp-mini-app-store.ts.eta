/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2025-06-09
 */

import _, { min } from "lodash";
import {
  Miniapp,
  MiniAppDetail,
  MiniAppDetailPermission,
  MiniappIntegrationCustomPagePages,
  MINIAPPMANAGERApi,
} from "~/simpleapp/generate/openapi";
import { MiniAppFormWithMiniAppCode } from "~/simpleapp/generate/features/miniApp/app/types/miniApp";

export default defineNuxtPlugin(async () => {
  /**
   * Mini app directory
   */
  const MINI_APP_PAGE_PATH_PREFIX = "miniapp";

  const config = getAxiosConfig();

  const miniAppManager = new MINIAPPMANAGERApi(config);

  const MINI_APP_BUILT_IN_SETTING_NAME = "mini-app-setting";

  const useMiniAppStore = defineStore("mini-app", {
    state: () => ({
      permissions: {} as MiniAppDetailPermission,

      /**
       * Store all installed miniApps
       */
      installedMiniApps: [] as MiniAppDetail[],

      /**
       * Is fetching installed miniApps
       */
      isFetchingInstalledMiniApps: true,
    }),

    getters: {
      getForm: (state) => (formCode: string) => {
        return state.installedMiniApps.flatMap((miniApp) => {
          return (miniApp.integration?.customField?.fields ?? [])
            .filter((form) => form.code == formCode)
            .map((form) => {
              return {
                ...form,
                miniAppCode: miniApp.code,
              } as MiniAppFormWithMiniAppCode;
            });
        });
      },

      showMiniAppMoreMenuButton: (state) => {
        const filtered = state.installedMiniApps.filter(
          (item) =>
            item.integration?.customPage?.pages &&
            (item.integration?.customPage?.pages?.length > 0 ||
              (item.integration?.customPage?.setting?.jsonSchema &&
                Object.keys(item.integration.customPage.setting.jsonSchema)
                  .length > 0)),
        );

        return _.isEmpty(filtered) ? false : true;
      },

      // ================================= Permission =================================
      canInstall: (state) => state.permissions.canInstall,
      canUninstall: (state) => state.permissions.canUninstall,
      canUpdateSetting: (state) => state.permissions.canUpdateSetting,
      hasMiniAppFeature: (state) => state.permissions.hasMiniAppFeature,
    },

    actions: {
      // ================================= Finder =================================
      findMiniApp(miniApps: MiniAppDetail[], miniAppCode: string) {
        return miniApps.find((item) => item.code === miniAppCode);
      },

      findPage(miniApp: MiniAppDetail, pageCode: string) {
        return miniApp.integration?.customPage?.pages.find(
          (item) => item.code === pageCode,
        );
      },

      // ================================= Permission =================================
      hasPermission(requiredPermissions: string[]) {
        const userRoles = getUserProfile().roles ?? [];
        return requiredPermissions.some((permission) =>
          userRoles.includes(permission),
        );
      },

      validatePageAccess(miniAppCode: string, pageCode: string) {
        const miniApp = this.findMiniApp(this.installedMiniApps, miniAppCode);
        if (!miniApp) {
          return {
            valid: false,
            type: "unknownMiniApp",
          };
        }

        const page = this.findPage(miniApp, pageCode);
        if (!page) {
          return {
            valid: false,
            type: "unknownPage",
          };
        }

        if (hasHighPrivilege()) {
          return {
            valid: true,
            type: "highPrivilege",
          };
        }

        if (!this.isInstalled(miniApp.code)) {
          return {
            valid: false,
            type: "notInstalled",
          };
        }

        if (!miniApp.hasRequiredPlan) {
          return {
            valid: false,
            type: "requiredPlan",
          };
        }

        if (!this.hasPermission(page.requiredPermissions ?? [])) {
          return {
            valid: false,
            type: "requiredPermission",
          };
        }

        return {
          valid: true,
          type: "",
        };
      },

      validation(type: string) {
        switch (type) {
          case "miniAppFeature":
            return {
              valid: this.hasMiniAppFeature,
              type,
            };

          case "install":
            return {
              valid: this.canInstall,
              type,
            };

          case "uninstall":
            return {
              valid: this.canUninstall,
              type,
            };

          case "updateSetting":
            return {
              valid: this.canUpdateSetting,
              type,
            };
        }

        return {
          valid: true,
          type: "",
        };
      },

      isInstalled(miniAppCode: string) {
        const miniApp = this.installedMiniApps.find(
          (item) => item.code === miniAppCode,
        );

        return miniApp?.miniAppInstallation?.isActive === true ? true : false;
      },

      canAccessPage(miniAppCode: string, pageCode: string): boolean {
        const validation = this.validatePageAccess(miniAppCode, pageCode);

        return validation.valid;
      },

      enabledMiniAppFeature(
        miniApp: MiniAppDetail,
        feature: keyof MiniAppDetail["integration"]["enabled"],
      ) {
        return miniApp.integration.enabled[feature];
      },

      // ================================= Menu =================================

      hasSettingPage(miniApp: MiniAppDetail) {
        const enabled = this.enabledMiniAppFeature(miniApp, "customPage");
        if (!enabled) return false;

        if (_.isEmpty(miniApp.integration?.customPage?.setting?.jsonSchema)) {
          return false;
        }

        return true;
      },

      getSettingPageMenu(miniApp: MiniAppDetail) {
        if (!this.canUpdateSetting) {
          return null;
        }

        if (!this.enabledMiniAppFeature(miniApp, "customPage")) {
          return null;
        }

        if (_.isEmpty(miniApp.integration?.customPage?.setting?.jsonSchema)) {
          return null;
        }

        return {
          code: MINI_APP_BUILT_IN_SETTING_NAME,
          title: t("miniAppLang.setting"),
          description: "",
          sources: {
            development: "",
            production: "",
          },
          requiredPermissions: [],
          iconType: "class",
          icon: "pi pi-cog",
        };
      },

      shouldShowPageOnMenu(page: MiniappIntegrationCustomPagePages) {
        return page.isHideOnMenu === true ? false : true;
      },

      getPages(miniApp: MiniAppDetail, withSettingPage: boolean = true) {
        const pages = (miniApp.integration?.customPage?.pages ?? []).filter(
          (page) => {
            return (
              this.canAccessPage(miniApp.code, page.code) &&
              this.shouldShowPageOnMenu(page)
            );
          },
        );

        if (withSettingPage) {
          const settingPage = this.getSettingPageMenu(miniApp);
          if (settingPage) {
            pages.push(settingPage);
          }
        }

        return pages ?? [];
      },

      getMenuItems() {
        return this.installedMiniApps.flatMap((miniApp) => {
          const pages = this.getPages(miniApp);
          if (_.isEmpty(pages)) {
            return [];
          }

          return {
            _id: miniApp._id,
            code: miniApp.code,
            name: miniApp.name,
            logo: miniApp.logo,
            pages,
          };
        });
      },

      // ================================= Separator =================================

      // ============================ Load Function ============================
      async loadInstalledMiniApps() {
        this.isFetchingInstalledMiniApps = true;

        const resp = await miniAppManager
          .runGetInstalledMiniApps()
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });

        this.installedMiniApps = resp.installedMiniApps;
        this.permissions = resp.permissions;

        this.isFetchingInstalledMiniApps = false;
      },

      async loadMiniAppDetail(miniAppCode: string) {
        return await miniAppManager
          .runGetMiniAppDetail(miniAppCode)
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });
      },

      async loadCategorizedMiniApps() {
        return await miniAppManager
          .runGetCategorizedMiniApps()
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });
      },

      // ============================ Path & Navigation ============================

      getMiniAppSettingPath(miniAppCode: string) {
        return `${MINI_APP_PAGE_PATH_PREFIX}/${miniAppCode}/setting`;
      },

      getMiniAppPageUrlPath(miniAppCode: string, pageCode: string): string {
        const page = pageCode === "index" ? "" : "/" + pageCode;
        return `${MINI_APP_PAGE_PATH_PREFIX}/${miniAppCode}/app${page}`;
      },

      getMiniAppPageUrl(
        miniAppCode: string,
        pageCode: string,
        querystr?: string,
      ): string {
        const path = this.getMiniAppPageUrlPath(miniAppCode, pageCode);
        return getDocumentUrl(path, "", querystr);
      },

      getMiniAppSettingPageUrl(miniAppCode: string, querystr?: string): string {
        const path = this.getMiniAppSettingPath(miniAppCode);
        return getDocumentUrl(path, "", querystr);
      },

      navigateToMiniAppInstall(miniAppCode: string) {
        goTo(`integrations/${miniAppCode}`);
      },

      navigateToMiniAppPage(miniAppCode: string, pageCode: string) {
        if (pageCode === MINI_APP_BUILT_IN_SETTING_NAME) {
          goTo(this.getMiniAppSettingPath(miniAppCode));
        } else {
          goTo(this.getMiniAppPageUrlPath(miniAppCode, pageCode));
        }
      },

      // ============================ Validation ============================

      isMiniAppInstalled(miniAppCode: string) {
        const miniApp = this.installedMiniApps.find(
          (item) => item.code === miniAppCode,
        );

        return miniApp ? true : false;
      },

      // ============================ miniApp Action ============================

      async installMiniApp(miniAppCode: string) {
        const miniAppInstallation = await miniAppManager
          .runInstallMiniApp(miniAppCode)
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });

        this.loadInstalledMiniApps();

        return miniAppInstallation;
      },

      async uninstallMiniApp(miniAppCode: string) {
        const miniAppInstallation = await miniAppManager
          .runUninstallMiniApp(miniAppCode)
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });

        this.loadInstalledMiniApps();

        return miniAppInstallation;
      },

      async updateMiniAppSetting(
        miniAppCode: string,
        data: { [key: string]: any },
      ) {
        const miniAppInstallation = await miniAppManager
          .runUpdateMiniAppSetting(miniAppCode, data)
          .then((res) => {
            return res.data;
            ``;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });

        this.loadInstalledMiniApps();

        return miniAppInstallation;
      },

      openMiniAppSetting(miniAppCode: string | undefined) {
        if (miniAppCode && miniAppCode != "") {
          this.navigateToMiniAppPage(
            miniAppCode,
            MINI_APP_BUILT_IN_SETTING_NAME,
          );
        }
      },
    },
  });

  return {
    provide: {
      miniAppStore: useMiniAppStore(),
    },
  };
});
