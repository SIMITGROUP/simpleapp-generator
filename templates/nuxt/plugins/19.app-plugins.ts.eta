/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2025-06-09
 */
import { defineNuxtPlugin } from "#app";
import _ from "lodash";
import { PlugininstallationsDoc } from "~/simpleapp/docs/PlugininstallationsDoc";
import { PluginsDoc } from "~/simpleapp/docs/PluginsDoc";
import {
  type Plugins,
  type PluginDetail,
  PLUGINMANAGERApi,
  PluginDetailActionAccess,
} from "~/simpleapp/generate/openapi";
import type {
  PluginBlockWithPluginId,
  PluginFormWithPluginId,
  PluginMenuItem,
} from "~/types/app-plugins.type";
import { PluginFrameworkCompatibility } from "~/types/app-plugins.type";

export default defineNuxtPlugin(async () => {
  /**
   * App plugin directory
   */
  const PLUGIN_PAGE_PATH_PREFIX = "app-plugins";

  /**
   * To totally block plugin if plugin's framework compability lower than this.
   * To support backward compatibility, with deprecation notice,
   * if plugin's framework compability higher than this, but lower than MIN_FRAMEWORK_COMPATIBLE_VERSION.
   */
  const MIN_FRAMEWORK_VERSION = "1.0";

  /**
   * The minimum version that is compatible with the current framework.
   */
  const MIN_FRAMEWORK_COMPATIBLE_VERSION = "1.0";

  const config = getAxiosConfig();

  const pluginManager = new PLUGINMANAGERApi(config);

  const useAppPluginsStore = defineStore("app-plugins", {
    state: () => ({
      actionAccess: {} as PluginDetailActionAccess,

      /**
       * Store all installed plugins
       */
      installedPlugins: [] as PluginDetail[],

      /**
       * Is fetching installed plugins
       */
      isFetchingInstalledPlugins: true,
    }),
    getters: {
      getForm: (state) => (formCode: string) => {
        return state.installedPlugins.flatMap((plugin) => {
          return plugin.integration.forms
            .filter((form) => form.code == formCode)
            .map((form) => {
              return {
                ...form,
                pluginCode: plugin.code,
              } as PluginFormWithPluginId;
            });
        });
      },

      getBlock:
        (state) =>
        (pluginCode: string, blockCode: string): PluginBlockWithPluginId => {
          const plugin = state.installedPlugins.find(
            (plugin) => plugin.code === pluginCode,
          );
          if (!plugin) {
            throw new Error(
              `[app-plugins] Plugin with ${pluginCode} not found`,
            );
          }
          const block = plugin.integration.blocks.find(
            (block) => block.code === blockCode,
          );
          if (!block) {
            throw new Error(`[app-plugins] Block with ${blockCode} not found`);
          }

          return {
            ...block,
            pluginCode: plugin.code,
          };
        },

      getDocumentBlocks:
        (state) =>
        (document: string): PluginBlockWithPluginId[] => {
          return state.installedPlugins.flatMap((plugin) => {
            return plugin.integration.blocks
              .filter((block) => block.targetDocuments.includes(document))
              .map((block) => {
                return {
                  ...block,
                  pluginCode: plugin.code,
                };
              });
          });
        },

      isHavePluginFeature: (state) => {
        if (state.isFetchingInstalledPlugins) {
          // if still fetching, return true 1st, else will immediate show restricted warning
          return true;
        }

        return state.actionAccess.isHavePluginFeature ?? false;
      },

      isShowPluginMoreMenuButton: (state) => {
        const filtered = state.installedPlugins.filter(
          (item) =>
            item.integration?.pages?.length > 0 ||
            (item.integration?.settings?.jsonSchema &&
              Object.keys(item.integration.settings.jsonSchema).length > 0),
        );

        return _.isEmpty(filtered) ? false : true;
      },

      isCanInstall: (state) => state.actionAccess.isAllowInstall,
      isCanUninstall: (state) => state.actionAccess.isAllowUninstall,
      isCanUpdateSetting: (state) => state.actionAccess.isAllowUpdateSetting,
      isHasPluginFeature: (state) => state.actionAccess.isHavePluginFeature,
    },

    actions: {
      getMenuItems() {
        return this.installedPlugins.flatMap((plugin) => {
          const pages = plugin.integration.pages.filter((page) => {
            return this.checkIsAllowAccessPluginPage(plugin.code, page.code);
          });

          if (this.isCanUpdateSetting) {
            if (
              plugin.integration.settings?.jsonSchema &&
              !_.isEmpty(plugin.integration.settings.jsonSchema)
            ) {
              pages.push({
                code: "setting",
                title: t("appPlugin.setting"),
                description: "",
                sourceType: "",
                source: "",
                requiredPermissions: [],
                iconType: "class",
                icon: "pi pi-cog",
              });
            }
          }

          // Only return plugin if pages not empty
          if (_.isEmpty(pages)) {
            return [];
          }

          return {
            _id: plugin._id,
            code: plugin.code,
            name: plugin.name,
            logo: plugin.logo,
            pages,
          };
        });
      },

      // ============================ Load Function ============================
      /**
       * Load all installed plugins and store in store
       */
      async loadInstalledPlugins() {
        this.isFetchingInstalledPlugins = true;

        const resp = await pluginManager
          .runGetInstalledPlugins()
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });

        this.installedPlugins = resp.installedlugins;
        this.actionAccess = resp.actionAccess;

        this.isFetchingInstalledPlugins = false;
      },

      /**
       * Load plugin detail
       * Use in integrations/[pageCode]
       * @param pluginCode
       * @returns
       */
      async loadPluginDetail(pluginCode: string) {
        return await pluginManager
          .runGetPluginDetail(pluginCode)
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });
      },

      /**
       * Load Categorized Plugins
       * Use in integrations
       * @returns
       */
      async loadCategorizedPlugins() {
        return await pluginManager
          .runGetCategorizedPlugins()
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });
      },

      // ================================ Permission ===============================

      getActionAccess(
        type: "install" | "uninstall" | "updateSetting" | "plan",
      ) {
        switch (type) {
          case "install":
            return {
              isAllow: this.isCanInstall,
              reason: "insufficientInstallPermission",
            };

          case "uninstall":
            return {
              isAllow: this.isCanUninstall,
              reason: "insufficientUninstallPermission",
            };

          case "updateSetting":
            return {
              isAllow: this.isCanUpdateSetting,
              reason: "insufficientChangeSettingPermission",
            };

          case "plan":
            return {
              isAllow: this.isHasPluginFeature,
              reason: "packageTypeRestricted",
            };
        }
      },

      // ============================ Path & Navigation ============================

      getPluginSettingPath(pluginCode: string) {
        return `${PLUGIN_PAGE_PATH_PREFIX}/${pluginCode}/setting`;
      },

      getPluginPageUrlPath(pluginCode: string, pageCode: string): string {
        const page = pageCode === "index" ? "" : "/" + pageCode;
        return `${PLUGIN_PAGE_PATH_PREFIX}/${pluginCode}/app${page}`;
      },

      getPluginPageUrl(
        pluginCode: string,
        pageCode: string,
        querystr?: string,
      ): string {
        const path = this.getPluginPageUrlPath(pluginCode, pageCode);
        return getDocumentUrl(path, "", querystr);
      },

      getPluginSettingPageUrl(pluginCode: string, querystr?: string): string {
        const path = this.getPluginSettingPath(pluginCode);
        return getDocumentUrl(path, "", querystr);
      },

      navigateToPluginInstall(pluginCode: string) {
        goTo(`integrations/${pluginCode}`);
      },

      navigateToPluginPage(pluginCode: string, pageCode: string) {
        if (pageCode === "setting") {
          goTo(this.getPluginSettingPath(pluginCode));
        } else {
          goTo(this.getPluginPageUrlPath(pluginCode, pageCode));
        }
      },

      // ============================ Validation ============================

      checkIsPluginInstalled(pluginCode: string) {
        const plugin = this.installedPlugins.find(
          (item) => item.code === pluginCode,
        );

        return plugin ? true : false;
      },

      checkIsAllowAccessPluginPage(pluginCode: string, pageCode: string) {
        const plugin = this.installedPlugins.find(
          (item) => item.code === pluginCode,
        );
        if (!plugin) {
          return false;
        }

        const page = plugin.integration.pages.find(
          (item) => item.code === pageCode,
        );
        if (!page) {
          return false;
        }

        if (checkHasHighPrivilege()) {
          return true;
        }

        const userRoles = getUserProfile().roles;

        if (page.requiredPermissions && !_.isEmpty(page.requiredPermissions)) {
          return page.requiredPermissions.some((permission) =>
            userRoles.includes(permission),
          );
        }
        return true;
      },

      getPageInfo(plugin: Plugins, pageCode: string) {
        return plugin.integration.pages.find((item) => item.code === pageCode);
      },

      checkPluginFrameworkCompatibility: (
        plugin: Plugins,
      ): PluginFrameworkCompatibility => {
        if (plugin.frameworkCompatibility < MIN_FRAMEWORK_VERSION) {
          return PluginFrameworkCompatibility.DEPRECATED;
        }

        if (plugin.frameworkCompatibility < MIN_FRAMEWORK_COMPATIBLE_VERSION) {
          return PluginFrameworkCompatibility.TO_BE_DEPRECATED;
        }

        return PluginFrameworkCompatibility.COMPATIBLE;
      },

      // ============================ Plugin Action ============================

      async installPlugin(pluginCode: string) {
        const pluginInstallation = await pluginManager
          .runInstallPlugin(pluginCode)
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });

        this.loadInstalledPlugins();

        return pluginInstallation;
      },

      async uninstallPlugin(pluginCode: string) {
        const pluginInstallation = await pluginManager
          .runUninstallPlugin(pluginCode)
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });

        this.loadInstalledPlugins();

        return pluginInstallation;
      },

      async updatePluginSetting(
        pluginCode: string,
        data: { [key: string]: any },
      ) {
        const pluginInstallation = await pluginManager
          .runUpdatePluginSetting(pluginCode, data)
          .then((res) => {
            return res.data;
          })
          .catch((res: any) => {
            return Promise.reject(res);
          });

        this.loadInstalledPlugins();

        return pluginInstallation;
      },

      openPluginSetting(pluginCode: string | undefined) {
        if (pluginCode && pluginCode != "") {
          goTo(`app-plugins/${pluginCode}/setting`);
        }
      },
    },
  });

  return {
    provide: {
      appPluginsStore: useAppPluginsStore(),
    },
  };
});
