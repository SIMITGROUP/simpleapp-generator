/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-01-23
 * Author: Ks Tan
 */
import { defineNuxtPlugin } from "#app";
import {PROFILEApi} from '../simpleapp/generate/openapi'
import {UserProfile} from '~/types'
import axios, { Axios, AxiosResponse } from 'axios'
import _ from 'lodash'


export default defineNuxtPlugin( async(nuxtApp) => {
    console.log("start plugin 20")
    const useUserStore = defineStore('userstore', {
        state: ()=>({      
          _id: ref(''),  
          sessionId:ref(''),
          tenantId:ref(0),
          orgId:ref(0),
          branchId:ref(0),
          branchRecordId:ref(''),
          branchCode:ref(''),
          branchName:ref(''),
          orgRecordId:ref(''),
          orgCode:ref(''),
          orgName:ref(''),
          uid: ref(''),
          email: ref(''),
          fullName: ref(''),
          roles:ref<string[]>([]),
          group:ref(''),
          branches:ref([]),
          invites : ref([]),
          time:ref(''),
          moreProps:ref()
        }),
        
        actions:{    
          async loadRemoteUserInfo(){
            // console.log('loadRemoteUserInfo')
            
            const {$axios} = useNuxtApp()
            const route = useRoute();
            let xorg = this.getCurrentXorg()            
            
            let apiurl=''
            if(xorg===undefined){
              apiurl = `${useRuntimeConfig().public.APP_URL}/api`
            }else{
              apiurl = `${useRuntimeConfig().public.APP_URL}/api/${xorg}`
            }
          
            return await new PROFILEApi(undefined,apiurl,$axios).getProfile().then((res:AxiosResponse)=>{            
              if(!res){
                return
              }
              this._id = res.data._id
              this.sessionId = res.data.sessionId
              this.tenantId = res.data.tenantId              
              this.orgId = res.data.orgId
              this.orgRecordId = res.data.orgRecordId
              this.branchId = res.data.branchId
              this.branchRecordId = res.data.branchRecordId
              this.branchCode = res.data.branchCode
              this.branchName = res.data.branchName
              this.orgCode = res.data.orgCode
              this.orgName = res.data.orgName
              this.uid = res.data.uid
              this.email = res.data.email
              this.fullName = res.data.fullName              
              this.branches = res.data.branches
              this.group = res.data.group
              this.roles = res.data.roles
              this.time = res.data.time              
              this.invites = res.data.invites
              this.moreProps = res.data.morePros
              return Promise.resolve(true)
                // return true
            }).catch((err:any)=>{
              if(err.response=== undefined){
                // console.error("no backend server")
                const errdata = createError({statusCode:503,statusMessage:"Backend server timeout, verify it is up and running!"})
                return Promise.reject(errdata)
              }
              else if(err.response && err.response.status==401){
                console.error("Unauthorise(plugin-userstore)")
              }else{
                const errdata = createError({statusCode:500,statusMessage:"Unknown error"})                
                return Promise.reject(errdata)
              }
            })            
          },                  
          getCurrentXorg(){
            return  (useRoute().params.xorg) ? String(useRoute().params.xorg) : undefined            
          },
          async pingSession(){
            let xorg = this.getCurrentXorg()    
            let apiurl=''
            if(xorg===undefined){
              apiurl = `${useRuntimeConfig().public.APP_URL}/api`
            }else{
              apiurl = `${useRuntimeConfig().public.APP_URL}/api/${xorg}`
            }
            const {$axios} = useNuxtApp()
            return await new PROFILEApi(undefined,apiurl,$axios).getSession()
          },
          async decideInvitation(id:string,decision:string){
            const apiurl = `${useRuntimeConfig().public.APP_URL}/api`
            const {$axios} = useNuxtApp()
            console.log("decideInvitation",id,decision)
            const result = await new PROFILEApi(undefined,apiurl,$axios).decideInvitation(id,decision)
            
            if(result){
              console.log(result)
            }else{
              console.log(result)
            }
            //().then((res:AxiosResponse)=>{ }
          },
          canPerform(resourcename:string,action:string):boolean{

            if(
              this.roles.includes('superadmin') ||
              this.roles.includes('tenantowner') ||
              this.roles.includes('superuser') 
              ){
              return true
            }else{
              const checkstr= `${resourcename}:${action}`
              // console.log("verify",checkstr)
              return this.roles.includes(checkstr)
            }
          },
          haveAccess(resourcename:string){          
            //super admin always full access right
            resourcename = _.upperFirst(resourcename)
            // console.log("have access",resourcename)
            if(
              this.roles.includes('superadmin') ||
              this.roles.includes('tenantowner') ||
              this.roles.includes('superuser') 
              ){
              return true
            }
            for(let i=0; i< this.roles.length; i++){
            const role:string = this.roles[i]
             if(role.includes(resourcename)){
                return true
              }
            }
            return false                        
          },
          async logout (redirecturl:string){
            const redirectdata = encodeURIComponent(redirecturl)
            const { signOut } = useAuth();    
            const { data } = await <any>useFetch('/api/auth/logout');    
            // remove session
            await signOut({redirect:false});
            let addPath = encodeURIComponent(`/login?callbackUrl=${redirectdata}`);    
            const tourl= `${data.value.path}${addPath}`            
            navigateTo(tourl,{external:true})
          },
          getUserInfo(){
            const userinfo:UserProfile = {
              _id : this._id,
              sessionId : this.sessionId,
              tenantId : this.tenantId,
              orgId : this.orgId,
              branchId : this.branchId,
              orgRecordId: this.orgRecordId,
              branchRecordId: this.branchRecordId,
              uid : this.uid,
              email : this.email,
              branchCode: this.branchCode,
              branchName: this.branchName,
              orgCode: this.orgCode,
              orgName: this.orgName,
              fullName : this.fullName,        
              branches:this.branches??[],
              invites: this.invites ?? [],
              roles:this.roles,
              group:this.group,
              time:this.time,
              moreProps: this.moreProps
              
            }
            return userinfo
          }
        }        
      })
    console.log("after define user store")
    
    if( useRoute().meta.auth !==false){
      
      if(await useUserStore().pingSession()){
        console.log("ping session ok")
        await useUserStore().loadRemoteUserInfo()
        console.log("load remote user info ok")
        
      }else{
        console.log("No login session", useRoute().path)
        await useUserStore().logout(useRoute().path)        
      }    
    }else{
      // if(await useUserStore().pingSession()){

      // }else{

      // }
    }
    
    return {

        
        provide: {
            userstore:useUserStore()
          // base64url: Base64URL
        }
    }
    
});
