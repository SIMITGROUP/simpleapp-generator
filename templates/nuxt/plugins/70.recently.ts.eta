/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
import { defineNuxtPlugin } from "#app";
import { LRUCache } from 'lru-cache'
import {RecentlyValue} from "~/types"
export default defineNuxtPlugin( async(nuxtApp) => {
    const options = {
        max: 20,
      
        // for use with tracking overall storage size
        maxSize: 5000,
        sizeCalculation: (value, key) => {
          return 1
        },
      
        dispose: (value, key) => {
          //freeFromMemoryOrWhatever(value)
        },
      
        // how long to live in ms
        ttl: 1000 * 60 * 5,
      
        // return stale items before removing from cache?
        allowStale: false,
      
        updateAgeOnGet: false,
        updateAgeOnHas: false,
      
        fetchMethod: async (
          key,
          staleValue,
          { options, signal, context }
        ) => {},
      }
      
      const recently = new LRUCache<string,RecentlyValue>(options)
      const tmp = localStorage.getItem('recently' ); // Store keys as an array
      if(tmp){
        const histories = JSON.parse(tmp)
        const keys=Object.keys(histories)
        keys.forEach(key=>{
            recently.set(key,histories[key])
        })            
      }
      
    return {        
        provide: {
            recently:recently
        }
    }    
});
