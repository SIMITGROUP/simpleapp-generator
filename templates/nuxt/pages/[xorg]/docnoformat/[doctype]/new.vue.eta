<script setup lang="ts">
import {SimpleAppInputType} from '~/types'
import ConfirmPopup from "primevue/confirmpopup";
import { useConfirm } from "primevue/useconfirm";
import moment from "moment";
const confirm = useConfirm();
const isReadOnly = ref(true);
const { $event, $listen, $DocnoformatDoc } = useNuxtApp();
const doc = $DocnoformatDoc();
const data = doc.getReactiveData();
const list = ref([]);
const sample = ref("");
const refresh = async () => {
  $event("RefreshDocumentList", { documentName: doc.getDocName() });
  isReadOnly.value = true;
};

const updateSample = () => {
  sample.value = "Example: " + previewDocNo();
};
const createData = async () => {
  // disabled.value=true

  doc
    .create()
    .then((res) => {
      refresh();
      newData();
    })
    .catch((err) => {
      console.error(err);
    });
};
const updateData = async () => {
  doc
    .update()
    .then(() => {
      // visible.value=false
      refresh();
    })
    .catch((err) => {
      console.error(err);
    });
};
const deleteData = (el: any) => {
  confirm.require({
    target: el.currentTarget as HTMLElement,
    message: "Delete?",
    icon: "pi pi-exclamation-triangle",
    acceptClass: "p-button-danger",
    accept: () => {
      // disabled.value=true
      doc.delete(data.value._id ?? "").then((res) => {
        newData();
        refresh();
      });
    },
    reject: () => {
      console.log("Cancel delete");
    },
  });
};
const newData = () => {
  doc.setNew();
  goTo(doc.getDocName(), String(useRoute().params.doctype) + "/new");
};

const id = computed(() => String(useRoute().params.id ?? ""));

const fetchRecord = async () => {
  if (id.value) {
    isReadOnly.value = true;
    await doc.getById(id.value);
  } else {
    isReadOnly.value = false;
    data.value.docNoType = String(useRoute().params.doctype);
  }
};

const previewDocNo = (): string => {
  const pattern = data.value.docNoPattern;
  if (pattern) {
    const numberReg: RegExp = /\[(.*?)\]/g;
    const dateReg: RegExp = /\{(.*?)\}/g;
    let newvalue = pattern;
    const numberpattern = pattern.match(numberReg);
    const datepattern = pattern.match(dateReg);

    if (numberpattern && numberpattern.length > 0) {
      const numberlength = numberpattern[0]
        .replace("[", "")
        .replace("]", "").length;

      let nextnumber = (data.value.nextNumber ?? 0).toString();

      const numberdiff = numberlength - nextnumber.length;

      for (let n = 0; n < numberdiff; n++) {
        nextnumber = "0" + nextnumber;
      }
      newvalue = newvalue.replace(numberpattern[0], nextnumber);
    }

    if (datepattern && datepattern.length > 0) {
      for (let d = 0; d < datepattern.length; d++) {
        const dpattern = datepattern[d];
        const date = new Date();
        const formatteddate = moment().format(
          dpattern.replace("{", "").replace("}", ""),
        );
        newvalue = newvalue.replace(dpattern, formatteddate);
      }
    }
    return newvalue;
  } else {
    return "";
  }
};

fetchRecord();
</script>
<template>
  <DebugDocumentData v-model="data" label="docnoformat" />
  <div class="p-4">
    <div v-if="isReadOnly" class="col-span-4 ">
        <Button
          class="btn-default"
          @click="newData"
          type="button"
          v-if="canPerform(doc.getDocName(), 'create')"
          >New
        </Button>
      <Button class="btn btn-primary" @click="isReadOnly = false">Edit</Button>
    </div>
    <div v-else class="simpleapp-tool-bar col-span-4 text-left gap-4">
      <Button
        class="btn-default"
        @click="newData"
        type="button"
        v-if="canPerform(doc.getDocName(), 'create')"
        >New
      </Button>
      <Button
        class="btn btn-primary"
        @click="createData"
        type="button"
        v-if="canPerform(doc.getDocName(), 'create') && doc.isNew()"
      >
        Create
      </Button>
      <Button
        class="btn btn-primary"
        @click="updateData"
        type="button"
        v-if="canPerform(doc.getDocName(), 'update') && !doc.isNew()"
      >
        Update
      </Button>
      <Button
        class="btn btn-danger"
        @click="deleteData($el)"
        type="button"
        v-if="canPerform(doc.getDocName(), 'delete') && !doc.isNew()"
      >
        Delete
      </Button>
      <ConfirmPopup></ConfirmPopup>
    </div>
    <SimpleAppForm :document="doc" #default="o" :readonly="isReadOnly">
      <div class="grid grid-cols-4 gap-4">
        <SimpleAppInput
          autofocus
          :input-type="SimpleAppInputType.text"
          :setting="o.getField('#/properties/docNoFormatNo')"
          v-model="data.docNoFormatNo"
        />
        <SimpleAppInput
          :input-type="SimpleAppInputType.text"
          :setting="o.getField('#/properties/docNoFormatName')"
          v-model="data.docNoFormatName"
        />
        <SimpleAppInput
          :input-type="SimpleAppInputType.autocomplete"
          v-model="data.branch"
          :setting="o.getField('#/properties/branch')"
        />
        <SimpleAppInput
          :input-type="SimpleAppInputType.checkbox"
          :setting="o.getField('#/properties/active')"
          v-model="data.active"
        />

        <SimpleAppInput
          :input-type="SimpleAppInputType.checkbox"
          :setting="o.getField('#/properties/default')"
          v-model="data.default"
        />

        <SimpleAppInput
          :input-type="SimpleAppInputType.text"
          :setting="o.getField('#/properties/docNoPattern')"
          v-model="data.docNoPattern"
          @change="updateSample"
          :description="sample"
          v-tooltip="'Examples: PO-<00000>, SI{YY}/<000>, SI{YYMM}/<000>'"
        />
        <SimpleAppInput
          :readonly="true"
          :input-type="SimpleAppInputType.text"
          :setting="o.getField('#/properties/docNoType')"
          v-model="data.docNoType"
          description="Document Type"
        />
        <SimpleAppInput
          :input-type="SimpleAppInputType.number"
          :setting="o.getField('#/properties/nextNumber')"
          v-model="data.nextNumber"
        />
      </div>
    </SimpleAppForm>
  </div>
</template>
