<template>
  <Button class="btn-primary" @click="newRecord">New</Button>
  <ConfirmPopup></ConfirmPopup>
  <DebugDocumentData v-model="data"></DebugDocumentData>
  <SimpleAppDatatable
    v-model="recordlist"
    :setting="{}"
    :columns="[
      'branch.label',
      'docNoFormatNo',
      'docNoFormatName',
      'active',
      'docNoPattern',
      'nextNumber',
    ]"
  >
    <Column header="action">
      <template #body="{ data, index }">
        <Button
          class="pi pi-pencil btn-primary"
          @click="triggerEdit(data)"
        ></Button>
        <Button
          class="pi pi-times btn-danger"
          @click="triggerDelete(data)"
        ></Button>
      </template>
    </Column>
  </SimpleAppDatatable>
  <Dialog
    v-model:visible="visible"
    modal
    :header="popuptitle"
    class="crudsimple-dialog"
    :autoZIndex="false"
    :style="{ zIndex: 100, width: '80vw' }"
  >
    <div class="simpleapp-tool-bar col-span-4 text-left gap-4">
      <Button
        class="btn-default"
        :disabled="disabled"
        @click="newRecord"
        type="button"
        v-if="canPerform(resourcename, 'create')"
      >
        New
      </Button>
      <Button
        class="btn-primary"
        :disabled="disabled"
        @click="createData"
        type="button"
        v-if="canPerform(resourcename, 'create') && data.created == ''"
      >
        Create
      </Button>
      <Button
        class="btn-primary"
        :disabled="disabled"
        @click="updateData"
        type="button"
        v-if="canPerform(resourcename, 'update') && data.created != ''"
      >
        Update
      </Button>
      <Button
        class="btn-danger"
        :disabled="disabled"
        @click="deleteData($event)"
        type="button"
        v-if="canPerform(resourcename, 'delete') && data.created != ''"
      >
        Delete
      </Button>
      <ProgressSpinner
        v-if="disabled == true"
        style="width: 2rem; height: 2rem"
      ></ProgressSpinner>
      <ConfirmPopup></ConfirmPopup>
    </div>
    <SimpleAppForm :document="doc" #default="o" title="Document No">
      <div class="grid grid-cols-4 gap-4">
        <SimpleAppText
          autofocus
          :setting="o.getField('#/properties/docNoFormatNo')"
          v-model="data.docNoFormatNo"
        />
        <SimpleAppText
          autofocus
          :setting="o.getField('#/properties/docNoFormatName')"
          v-model="data.docNoFormatName"
        />
        <SimpleAppAutocomplete
            v-model="data.branch"
            :setting="o.getField('#/properties/branch')"
            :remoteSrc="getAutocomplete('branch')"
            optionLabel="label"                        
          />
        <SimpleAppCheckbox
          autofocus
          :setting="o.getField('#/properties/active')"
          v-model="data.active"
        />

        <SimpleAppCheckbox
          autofocus
          :setting="o.getField('#/properties/default')"
          v-model="data.default"
        />

        <SimpleAppText
          autofocus
          :setting="o.getField('#/properties/docNoPattern')"
          v-model="data.docNoPattern"
          @change="updateSample"
          :description="sample"
          v-tooltip="'Examples: PO-<00000>, SI{YY}/<000>, SI{YYMM}/<000>'"
        />

        <SimpleAppNumber
          autofocus
          :setting="o.getField('#/properties/nextNumber')"
          v-model="data.nextNumber"
        />
      </div>
    </SimpleAppForm>
  </Dialog>
</template>
<script setup lang="ts">
import _ from "lodash";
import moment from "moment";
import Dialog from "primevue/dialog";
import Column from "primevue/column";
import { ListItem } from "@/types/listview";
import ProgressSpinner from "primevue/progressspinner";
import ConfirmPopup from "primevue/confirmpopup";
import { useConfirm } from "primevue/useconfirm";
const { $event, $listen, $DocnoformatDoc } = useNuxtApp();
const doc = $DocnoformatDoc();
const data = doc.getReactiveData();

const visible = ref(false);
const disabled = ref(false);
const popuptitle = ref("edit");
const recordlist = ref();
const selectedDoctype = ref("");
const havedocdate = ref(false);
const confirm = useConfirm();
// This will work in both `<script setup>` and `<script>`
if(data.value.created==''){
  definePageMeta({
  layout: "sidelistcrud",
});
}

const sample = ref("");
const resourcename = ref(_.upperFirst(doc.getDocName()));

const refresh = async () => {
  const filter = { docNoType: selectedDoctype.value };

  console.log("selectedDoctype", selectedDoctype.value);

  const results = await doc.search({ filter: filter });
  recordlist.value = results;
};
$listen("itemselected", (item: ListItem) => {
  selectedDoctype.value = item.code;
  havedocdate.value = item.data.documentDate != "";
  refresh();
});

const updateSample = () => {
  sample.value = "Example: " + previewDocNo();
};
onMounted(() => {
  const doclist = getDocTypes();
  console.log(doclist);
  const listdata: ListItem[] = getDocTypes()
    .filter((item) => item.docNumber)
    .map(
      (item) =>
        ({ name: item.docName, code: item.docType, data: item }) as ListItem,
    );
  $event("listloaded", listdata);
});
const newRecord = () => {
  //   useRouter().push({ path: `${props.path}` })
  doc.setNew();
  data.value.docNoType = selectedDoctype.value;

  visible.value = true;
  $event("newRecord");
};
const createData = () => {
  disabled.value = true;

  doc
    .create()
    .then(() => {
      visible.value = false;
      refresh();
    })
    .catch((err) => {
      console.error(err);
    })
    .finally(() => (disabled.value = false));
};
const updateData = () => {
  disabled.value = true;

  doc
    .update()
    .then(() => {
      visible.value = false;
      refresh();
    })
    .catch((err) => {
      console.error(err);
    })
    .finally(() => (disabled.value = false));
};
const deleteData = (e: any) => {
  confirm.require({
    target: e.currentTarget as HTMLElement,
    message: "Delete?",
    icon: "pi pi-exclamation-triangle",
    acceptClass: "p-button-danger",
    accept: () => {
      disabled.value = true;
      doc
        .delete(data.value._id ?? "")
        .then(() => (visible.value = false))
        .finally(() => {
          refresh();
        });
    },
    reject: () => {
      console.log("Cancel delete");
    },
  });
};

const triggerDelete = async (event: any) => {
  let id = event._id.toString();
  await doc.delete(id);
  refresh();
};
const triggerEdit = async (event: any) => {
  let id = event._id.toString();
  await doc.getById(id);
  console.log(id);
  visible.value = true;
  // useRouter().push({ path: `/${useRoute().params.xorg}/docnoformat/${id}` });
};

const previewDocNo = (): string => {
  const pattern = data.value.docNoPattern;
  if (pattern) {
    const numberReg: RegExp = /\[(.*?)\]/g;
    const dateReg: RegExp = /\{(.*?)\}/g;
    let newvalue = pattern;
    const numberpattern = pattern.match(numberReg);
    const datepattern = pattern.match(dateReg);

    if (numberpattern && numberpattern.length > 0) {
      const numberlength = numberpattern[0]
        .replace("[", "")
        .replace("]", "").length;

      let nextnumber = (data.value.nextNumber ?? 0).toString();

      const numberdiff = numberlength - nextnumber.length;

      for (let n = 0; n < numberdiff; n++) {
        nextnumber = "0" + nextnumber;
      }
      newvalue = newvalue.replace(numberpattern[0], nextnumber);
    }

    if (datepattern && datepattern.length > 0) {
      for (let d = 0; d < datepattern.length; d++) {
        const dpattern = datepattern[d];
        const date = new Date();
        const formatteddate = moment().format(
          dpattern.replace("{", "").replace("}", ""),
        );
        newvalue = newvalue.replace(dpattern, formatteddate);
      }
    }
    return newvalue;
  } else {
    return "";
  }
};
</script>
