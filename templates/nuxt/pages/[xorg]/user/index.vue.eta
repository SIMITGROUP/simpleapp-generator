<template>
  <div class="grid grid-cols-2">
    <Card>
      <template #header>
        <h1 class="font-bold">{{ usertitle }}</h1>
      </template>
      <template #content>
        <SimpleAppForm :document="userdoc" #default="o">
          <div class="flex flex-col gap-2">
            <SimpleAppInput
              :input-type="SimpleAppInputType.text"
              autofocus
              :setting="o.getField('#/properties/fullName')"
              v-model="userdata.fullName"
            />

            <SimpleAppInput
              :input-type="SimpleAppInputType.text"
              type="email"
              :setting="o.getField('#/properties/email')"
              v-model="userdata.email"
            />

            <SimpleAppInput
              :input-type="SimpleAppInputType.checkbox"
              :setting="o.getField('#/properties/active')"
              v-model="userdata.active"
            />
            <SimpleAppInput
              :input-type="SimpleAppInputType.textarea"
              :setting="o.getField('#/properties/description')"
              v-model="userdata.description"
            />
            <div>
              <Button @click="saveUser" class="btn btn-primary">Save</Button>
              <Button
                v-if="canPerform('user', 'delete')"
                @click="deleteUser"
                class="btn btn-danger"
                >Delete</Button
              >
            </div>
          </div>
        </SimpleAppForm>
      </template>
    </Card>

    <Card class="m-2">
      <template #header>
        <div class="relative w-full ...">
          <h1 class="font-bold">{{ permissiontitle }}</h1>
          <div class="absolute top-0 right-0 h-16 w-16 ...">
            <UserButtonPermissionInfo></UserButtonPermissionInfo>
          </div>
        </div>
      </template>
      <template #content>
        <BlockUI :blocked="blockscreen">
          <!-- <div class="text-right m mr-2">
            
          </div> -->

          <div class="">
            <Card
              v-if="currentpermissions.length > 0"
              v-for="o in orglist"
              class="m-2"
            >
              <template #title>{{ o.orgName }}</template>
              <template #content>
                <table class="w w-full">
                  <tr v-for="(b, index) in branchlist">
                    <td v-if="checkBranchInOrg(o, b)" class="text-center">
                      {{ b.branchCode }}
                    </td>
                    <td
                      v-if="checkBranchInOrg(o, b)"
                      class="text-center flex flex-row"
                    >
                      <div>
                        <SelectButton
                          v-model="currentpermissions[index]['group']"
                          :options="grouplist"
                          option-label="label"
                          option-value="value"
                          @change="applyPermission(currentpermissions[index])"
                        ></SelectButton>
                      </div>
                    </td>
                  </tr>
                </table>
              </template>
            </Card>
          </div>
        </BlockUI>
      </template>
    </Card>
  </div>
</template>
<script setup lang="ts">
// import Card from "primevue/card";
import { SimpleAppInputType } from "~/types";
import { Permission, User } from "../../../simpleapp/generate/openapi/api";
import _ from "lodash";
import SelectButton from "primevue/selectbutton";
import { SearchBody, EventType } from "~/types";

import {
  UserListItem,
  NotificationStatus,
  Notification,
  BranchListItem,
  OrgListItem,
  PermissionListItem,
} from "~/types";
const {
  $event,
  $PermissionDoc,
  $OrganizationDoc,
  $BranchDoc,
  $UserDoc,
  // $InvitationDoc,
} = useNuxtApp();
const userdoc = $UserDoc();
const userdata = userdoc.getReactiveData();
const currentpermissions = ref<Permission[]>([]);
currentpermissions.value = [];
const blockscreen = ref(false);
const permlist = ref<PermissionListItem[]>([]);
// const userlist = ref<UserListItem[]>([]);
const orglist = ref<OrgListItem[]>([]);
const branchlist = ref<BranchListItem[]>([]);
const permdoc = $PermissionDoc();
const orgdoc = $OrganizationDoc();
const branchdoc = $BranchDoc();
const permissiontitle = "Permission Information";
const usertitle = "User Information";
const grouplist = getAllGroups().map((item) => {
  return { value: item, label: _.capitalize(item) };
});

/**
 * delete user
 * @param user:User object
 */
const deleteUser = async (user: any) => {
  await userdoc.delete(String(userdata.value._id));
  //NotificationEvent
  $event("RefreshUser", "");
  goTo("user");
};

/**********applPermission ******/
/**
 * apply permission:
 * _id:'', group:'' => skip
 * _id: '', group:'something' => create
 * _id:'something', 'group':'something' => update
 * _id:'something', group:'' => remove
 */
const applyPermission = async (d: Permission) => {
  let result;
  // console.log("apply permission", d);
  blockscreen.value = true;
  d._id = String(d._id ?? "");
  d.group = String(d.group ?? "");
  permdoc.setNew();
  const data = permdoc.getReactiveData();
  data.value = {
    orgId: d.orgId,
    branchId: d.branchId,
    group: d.group,
    userId: d.userId,
  };
  // console.log("apply permission", data.value);
  if (!d._id && !d.group) {
    //no changes
  } else if (!d._id && d.group) {
    result = await permdoc.create();
  } else if (d._id && d.group) {
    data.value = d;
    result = await permdoc.update();
  } else if (d._id && !d.group) {
    d.group = "";
    data.value = d;
    result = await permdoc.delete(d._id);
  } else {
    console.warn("unknown apply permission", result);
  }
  //   refreshList(false);
  onSelectUser(String(d.userId));
  blockscreen.value = false;
};

const checkBranchInOrg = (org: OrgListItem, branch: BranchListItem) => {
  return org.orgId === branch.orgId;
};

const saveUser = async () => {
  await userdoc.update();
  $event("RefreshUser", "");
  onSelectUser(String(userdata.value._id));
};

const onSelectUser = async (userId: string) => {
  console.log("onSelectUser", userId);
  // .addRoute()
  // const user: UserListItem = { ...menuitem };
  const orgsearchbody: SearchBody = {
    fields: ["orgId", "orgCode", "orgName", "active"],
  };
  const branchsearchbody: SearchBody = {
    fields: ["orgId", "branchId", "branchCode", "branchName", "active"],
  };
  const permsearchbody: SearchBody = {
    filter: { userId: userId },
    fields: [
      "uid",
      "userId",
      "branchId",
      "tenantId",
      "orgId",
      "active",
      "group",
      "created",
    ],
  };

  orglist.value = await orgdoc.search(orgsearchbody);
  branchlist.value = await branchdoc.search(branchsearchbody);
  permlist.value = await permdoc.search(permsearchbody);
  await userdoc.getById(userId);
  // console.log("orglist.value", orglist.value);
  // console.log("branchlist.value", branchlist.value);
  // console.log("permlist.value", permlist.value);
  // selected.value = String(user._id);

  // activeuser.value = user.fullName;
  //sso id from keycloak
  // const uid = String(user.uid);
  //_id from mongodb

  currentpermissions.value = [];

  for (let i = 0; i < branchlist.value.length; i++) {
    const b = branchlist.value[i];
    const permdata = getPermssionData(userId, b.branchId);
    const tmp: Permission = {
      _id: permdata?._id,
      userId: userId,
      tenantId: b.tenantId,
      orgId: b.orgId,
      branchId: b.branchId,
      group: permdata.group,
    };
    currentpermissions.value.push(tmp);
  }
  // console.log("currentpermissions", currentpermissions);
  blockscreen.value = false;
};
/**
 * prepare dataobj (existing or empty dummy data) for each branch permission
 * @param uid
 * @param branchId
 */
const getPermssionData = (userId: string, branchId: number) => {
  // console.log("getPermssionData", userId, branchId);
  const result = permlist.value.find((item: any) => {
    // console.log(
    //   item.userId,
    //   "== ",
    //   userId,
    //   " &&",
    //   item.branchId,
    //   "==",
    //   branchId,
    // );
    return item.userId == userId && item.branchId == branchId;
  });

  //  console.log("permlist.value.",permlist.value,result)
  let pm: Permission = {
    _id: result?._id ?? "",
    orgId: result?.orgId ?? 0,
    tenantId: result?.tenantId ?? 0,
    branchId: branchId,
    userId: userId,
    group: result?.group ?? "",
  };
  return pm;
};

onMounted(async () => {
  const id = getPathPara('id')
  if(id){
    await onSelectUser(id);
  }
  
});
</script>
