<template>
  <div class="w-full flex-col flex">
    <title>{{ t("organization") }}</title>
    <MobileToolbar class="bg-gray-600" v-if="isMobile()">
      <template #center
        ><TextTitle class="text-white">{{
          t("organization")
        }}</TextTitle></template
      >
      <template #end>
        <ButtonText @click="showEditOrg = true" class="text-white"
          ><i class="pi pi-pencil"></i
        ></ButtonText>
      </template>
    </MobileToolbar>

    <div class="w-full flex flex-row p-2 border-b border-gray-300">
      <div class="">
        <!--  -->
        <!-- <div class="border w-12 h-12 md:w-24 md:h24"> -->
        <ImageOrganization></ImageOrganization>
        <!-- </div> -->
      </div>
      <div class="flex flex-col flex-1">
        <TextTitle>
           {{ data.orgName }} / {{ data.orgCode }}
           
         </TextTitle>
        <TextSubtitle>
          {{ data.description }}
        </TextSubtitle>
        <div>
          <ButtonDefault @click="showEditOrg = true" class="text-sm">
                <i class="pi pi-pencil mr-1"/> <span>{{t('edit')}}</span>
          </ButtonDefault>
        </div>
      </div>
    </div>

    <div class="w-full p-2 flex flex-col">
      <div class="flex flex-row justify-end">
        <TextTitle class="flex-1 p-2">{{ t("branches") }}</TextTitle>
        <div>
          <ButtonPrimary @click="goBranch('new')">
            <i class="pi pi-plus"></i> <span>{{ t("addBranches") }}</span>
          </ButtonPrimary>
        </div>
      </div>
      <ListView
        class="border rounded-lg border-gray-400 dark:border-gray-600"
        :list="branchlist"
        title-field="branchName"        
        sub-title-field="branchCode"
        :url="getDocumentUrl('organization', id)"
        #default="{ item }"
      >
        <div class="flex flex-row">
          <div class="flex-col flex flex-1">
            <TextPrimary>{{ item.branchName }}</TextPrimary>
            <TextSubsubtitle>{{ item.street1 }}</TextSubsubtitle>
            <TextSubsubtitle>{{ item.street2 }}</TextSubsubtitle>
            <TextSubsubtitle>{{ item.description }}</TextSubsubtitle>
          </div>
          <div class="flex-col flex text-right">
            <div>{{ item.branchCode }}</div>
            <renderer-boolean v-model="item.active"></renderer-boolean>
          </div>
        </div>
      </ListView>
    </div>

    <OverlayPanelWithToolBar v-model="showEditOrg" close-event-name="organization">
      <template #headerLeft>
        <ButtonText @click="showEditOrg = false">
          <i class="pi pi-times"></i>
        </ButtonText>
      </template>
      <template #headerCenter>{{data.orgName}}</template>
      <template #headerRight></template>
      <FormOrganization
        :_id="getUserProfile()?.orgRecordId"
        @after="afterOrganization"
      ></FormOrganization>
    </OverlayPanelWithToolBar>

    <OverlayPanelWithToolBar v-model="showEditBranch" close-event-name="branch">
      <template #headerLeft>
        <ButtonText @click="closeBranch">
          <i class="pi pi-times"></i>
        </ButtonText>
      </template>
      <template #headerCenter>{{t('branch')}}</template>
      <template #headerRight></template>

      <NuxtPage :_id="id"></NuxtPage>
    </OverlayPanelWithToolBar>
  </div>
</template>

<script setup lang="ts">
/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { FormCrudEvent, SimpleAppInputType } from "~/types";
import { Branch } from "~/simpleapp/generate/openapi";
import ConfirmPopup from "primevue/confirmpopup";
import { useConfirm } from "primevue/useconfirm";
const confirm = useConfirm();
const showEditOrg = ref<boolean>(false);
const showEditBranch = ref<boolean>(false);

const { $OrganizationDoc, $BranchDoc, $event, $listen } = useNuxtApp();

const orgId = computed(() => <string>getUserProfile()?.orgRecordId);
const doc = $OrganizationDoc();
const brancdoc = $BranchDoc();
const data = doc.getReactiveData();
const branchlist = ref<Branch[]>([]);
const isReadOnly = ref(true);
const getCurrentOrg = async () => {
  await doc.getById(orgId.value);
  await fetchRecord();
};
const fetchRecord = async () => {
  //fetch org
  // await doc.getById(data.value.orgId);
  //fetch branch
  branchlist.value = await brancdoc.search({
    filter: { orgId: data.value.orgId },
  });

  console.log("reload data", branchlist);
};

const id = computed((): string => String(useRoute().params.id ?? ""));

definePageMeta({
  menuPath: "systemconfig/setting/organization",
});

//branch record update then reload
$listen("RefreshDocumentList", async (data) => {
  console.log("trigger RefreshDocumentList", data);
  if (data.documentName == "branch" || data.documentName == "organization") {
    await fetchRecord();
  }
});

const closeBranch = ()=>{
  showEditBranch.value=false
  goTo('organization')
}
const showBranchDialogIfRequired = () => {
  if (useRoute().path.includes("/new") || id.value) showEditBranch.value = true;
};

const afterOrganization = (actionName: FormCrudEvent) => {
  if (actionName == FormCrudEvent.update) {
    showEditOrg.value = false;
    getCurrentOrg();
  }
};

watch(
  () => useRoute().path,
  () => showBranchDialogIfRequired(),
);
onMounted(() => showBranchDialogIfRequired());
getCurrentOrg();
</script>
