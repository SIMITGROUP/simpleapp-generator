/**
 * This file was automatically generated by simpleapp generator during initialization.
 * DO NOT MODIFY IT BY HAND.
 * last change 2025-03-16
 * author: Ks Tan
 */
 
import * as o from "~/simpleapp/generate/openapi";
import axios from 'axios'


export const getAxiosConfig = () => {
  const xorg = getCurrentXorg()
  const xorgdecode = xorg!==undefined ? atob(<string>xorg) :''

  const suffix = xorgdecode.includes('-') ?  '/'+getCurrentXorg() : ''
  const config: o.Configuration = {
    basePath: `${useRuntimeConfig().public.APP_URL}/api${suffix}`,
    isJsonMime: () => true,
  };
  return config
}

//get apisession exclude from shared axios to separate handle session
export const getApiSession = async ()=> {
  console.log("getApiSession from computable")
  return getUserStore().pingSession()
  //,useNuxtApp().$axios)
  // const  profileapi = new o.PROFILEApi(getAxiosConfig(),undefined)
  // const res = await profileapi.getSession()
  // return res
}

export const getDocumentApi = (documentName: string): any => {
  //const { csrf } = useCsrf()    
  //axios.defaults.headers.common = {"CSRF-TOKEN": csrf};
  const route = useRoute();

  const config = getAxiosConfig()
  const docsOpenapi: any = {
       <% for(let i=0;i<it.modules.length; i++){ %>
                '<%=it.modules[i].docname.toLowerCase()%>': new o.<%=it.modules[i].docname.toUpperCase()%>Api(config),                
              <%}%>                             
    };

  if (!docsOpenapi[documentName]) {
    console.error(
      `api for '${documentName}' does not exists, most probably define wrong x-foreignkey`,
    );
    return undefined;
  } else {
    return docsOpenapi[documentName];
  }
};


export const getAllApi=()=>{
    return o
}

//export const getWorkflowApi = () => {
  //return new o.WorkflowApi(getAxiosConfig())  
//}

export const getProfileApi = () => {
  return new o.PROFILEApi(getAxiosConfig())
}
