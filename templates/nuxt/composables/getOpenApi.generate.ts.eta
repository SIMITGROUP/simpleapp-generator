/**
 * This file was automatically generated by simpleapp generator during initialization.
 * DO NOT MODIFY IT BY HAND.
 * last change 2024-01-24
 * author: Ks Tan
 */
 
import * as o from "../simpleapp/generate/openapi";
import axios from 'axios'


const getAxiosConfig = () => {
  const config: o.Configuration = {
    basePath: `${useRuntimeConfig().public.APP_URL}/api/${getCurrentXorg()}`,
    isJsonMime: () => true,
  };
  return config
}
export const getApiSession = async ()=> {
  const res = await (new o.PROFILEApi(getAxiosConfig(),undefined,useNuxtApp().$axios)).getSession()
  return res
}

export const getDocumentApi = (documentName: string): any => {
  //const { csrf } = useCsrf()    
  //axios.defaults.headers.common = {"CSRF-TOKEN": csrf};
  const route = useRoute();

  const config = getAxiosConfig()
  const docsOpenapi: any = {
            'tenant': new o.TENANTApi(config),

            'organization': new o.ORGApi(config),

            'branch': new o.BRANCHApi(config),

            'permission': new o.PERMApi(config),

            'autoincreament': new o.AUTOINCApi(config),

            'docnoformat': new o.DOCNOApi(config),

            'category': new o.CATApi(config),

            'customer': new o.CUSTApi(config),

            'enrollment': new o.ENROLLApi(config),

            'invoice': new o.INVApi(config),

            'level': new o.LVLApi(config),

            'payment': new o.PAYApi(config),

            'paymentmethod': new o.PAYMETHODApi(config),

            'period': new o.PERIODApi(config),

            'product': new o.PRDApi(config),

            'room': new o.ROOMApi(config),

            'schedule': new o.SCHEDULEApi(config),

            'school': new o.SCHOOLApi(config),

            'student': new o.STUApi(config),

            'studentgroup': new o.STUGROUPApi(config),

            'teacher': new o.TEACHERApi(config),

            'tuitionclass': new o.TUITIONApi(config),

            'user': new o.USERApi(config),

                  
    };
  if (!docsOpenapi[documentName]) {
    console.error(
      `api for '${documentName}' does not exists, most probably define wrong x-foreignkey`,
    );
    return undefined;
  } else {
    return docsOpenapi[documentName];
  }
};


export const getAllApi=()=>{
    return o
}

export const getWorkflowApi = () => {
  return new o.WorkflowApi(getAxiosConfig())
  
}