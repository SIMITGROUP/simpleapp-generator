/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import _ from 'lodash'
import {Md5} from 'ts-md5'
import { v4 as uuidv4 } from 'uuid';
const myAvatarVersion = ref(0)
let orgLogo = ""
export const camelCaseToWords = (s: string) =>{
    const result = s.replace(/([A-Z])/g, ' $1');
    return result.charAt(0).toUpperCase() + result.slice(1);
  }
  
export const randomUUID = ()=> uuidv4() 
export const md5=(s:string)=>  new Md5().appendStr(s).end()

// export const getAvatarLink = (email:string, size:number):string=>{
  // return `https://gravatar.com/avatar/${md5(email)}?size=${size}`;
  // return useRuntimeConfig().public.AVATAR_URL+`${md5(email)}?size=${size}`
// }
export const getAvatarByUid = (id:string, size?:number):string=>{  
  if(size===undefined)size=160
  return `${useRuntimeConfig().public.avatarUrl}/${md5(id)}?size=${size}`
}
export const updateAvatarVersion = ()=>{
  myAvatarVersion.value++
  useNuxtApp().$event('RefreshUser',getUserProfile().uid)
  }
export const getAvatarVersion = ()=>myAvatarVersion

export const getDefaultLocale =()=> useNuxtApp().$i18n.defaultLocale
export const t = (txt:string,options?:any):string => {
  if (!txt || typeof txt !='string') return ''
  return useNuxtApp().$i18n.t(txt.trim(),options)
}
export const upperFirst = (str:string) => _.upperFirst(str)
export const labelSorter = (a,b)=>{
   const nameA = a.label.toUpperCase(); // ignore upper and lowercase
   const nameB = b.label.toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }

  // names must be equal
  return 0;
}

export const valueSorter = (a,b)=>{
  const vA = a.value
  const vB = b.value
   if (vA < vB) {
     return -1;
   }
   if (vA > vB) {
     return 1;
   }

 return 0;
}
export const valueSorterDesc = (a,b)=>{
  const vA = a.value
  const vB = b.value
   if (vA < vB) {
     return 1;
   }
   if (vA > vB) {
     return -1;
   }

 return 0;
}
export const numberToMoneyString = (value:number)=>{
  const options = {
    style: "decimal", // Other options: 'currency', 'percent', etc.
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  };
  return value.toLocaleString(useI18n().defaultLocale, options)
}