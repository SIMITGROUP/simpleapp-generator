import _ from 'lodash'

type roletype = {resource:string, action:string}
type grouptype = {[key:string]:roletype[]}            

export const allgroups:grouptype = {
<% Object.getOwnPropertyNames(it.allroles).forEach((key)=>{ %>
<%=key%>:[
    <%for(let i=0; i <it.allroles[key].length; i++){%>
    <% const arr = it.allroles[key][i].split('_') %>
    {resource:'<%=arr[0]%>',action:'<%=arr[1]%>'},
    <%}%>
],
<%})%>
}
export const getAllRoles = () => allroles
export const getUniqueResource = () => _.uniqBy(allroles,'resource').map((item,index)=>item.resource)
export const getActionFromResource = (resource:string)=>_.filter(allroles,{resource:resource})
                    .map((item,index)=>item.action)
export const getAllGroups = () =>Object.getOwnPropertyNames(allgroups)
export const getGroupRoles = (groupname:string) => allgroups[groupname]
export const getGroupResourcePermission= (groupname:string,targetresource:string) => 
            allgroups[groupname].filter((r)=>r.resource==targetresource)
export const canPerformAction =(groupname:string,resource:string,actionname:string)=>{
    const grouppermissions = getGroupResourcePermission(groupname,resource)    
    return grouppermissions.map((r)=>r.action).includes(actionname)    
}
