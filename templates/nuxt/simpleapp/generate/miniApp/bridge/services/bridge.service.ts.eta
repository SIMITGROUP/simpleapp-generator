/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2025-06-18
 * Author: --
 */

import { SimpleAppDocumentType } from "~/types";
import {
  MiniAppBridgeMessageApi,
  MiniAppBridgeMessageNavigate,
  MiniAppBridgeMessageNavigateCurrentMiniApp,
  MiniAppBridgeMessageOpenOnScreenResourceForm,
} from "../types/bridge.type";
import { AxiosError } from "axios";
import { MINI_APP_BRIDGE_MESSAGES } from "../constants/common.constant";
import { MiniAppResourceMap } from "../types/resource-mapper.type";
import { MiniAppBridgeResourceAccessor } from "./bridge-resource-accessor.service";
import { MINI_APP_API_RESOURCES } from "../constants/resource.constant";

export class MiniAppBridgeService extends MiniAppBridgeResourceAccessor {
  /**************************************** Bridge Handler ***************************************/

  handleBridgeNavigate(message: MiniAppBridgeMessageNavigate) {
    goTo(message.params.target, message.params.id, message.params.query);
  }

  handleBridgeNavigateCurrentMiniApp(
    message: MiniAppBridgeMessageNavigateCurrentMiniApp,
    pluginCode: string,
  ) {
    const target = message.params.target;
    const { $appPluginsStore } = useNuxtApp();
    let targetUrl = "";
    if (target === "setting") {
      targetUrl = $appPluginsStore.getPluginSettingPath(pluginCode);
    } else {
      targetUrl = $appPluginsStore.getPluginPageUrlPath(pluginCode, "");
      targetUrl = targetUrl.replace(/^\/|\/$/g, "");
      targetUrl = `${targetUrl}/${message.params.target}`;
    }

    goTo(targetUrl, undefined, message.params.query);
  }

  handleBridgeOpenOnScreenResourceForm(
    message: MiniAppBridgeMessageOpenOnScreenResourceForm,
  ) {
    if (message.params.resource.id) {
      onScreenEditDocument(
        message.params.resource.name as SimpleAppDocumentType,
        message.params.resource.id,
      );
      return;
    }

    onScreenAddDocument(message.params.resource.name as SimpleAppDocumentType, {
      paras: message.params.data,
    });
    return;
  }

  async handleBridgeApi(
    messageEvent: MessageEvent,
    message: MiniAppBridgeMessageApi<any>,
  ) {
    try {
      const data = await this.handleBridgeCallApi(message);

      messageEvent.source?.postMessage(
        {
          type: MINI_APP_BRIDGE_MESSAGES.API_RESPONSE,
          success: true,
          requestId: message.requestId,
          data,
        },
        {
          targetOrigin: messageEvent.origin,
        },
      );
    } catch (e) {
      const err = e as AxiosError;

      messageEvent.source?.postMessage(
        {
          type: MINI_APP_BRIDGE_MESSAGES.API_RESPONSE,
          success: false,
          requestId: message.requestId,
          error: {
            code: err.code,
            message: err.message,
            status: err.status,
            response: err.response
              ? {
                  data: err.response?.data
                    ? {
                        data: (err.response.data as any)?.data ?? "",
                        error: (err.response.data as any)?.error ?? "",
                        message: (err.response.data as any)?.message ?? "",
                        statusCode:
                          (err.response.data as any)?.statusCode ?? "",
                        statusMessage:
                          (err.response.data as any)?.statusMessage ?? "",
                      }
                    : {},
                  status: err.response.status,
                  statusText: err.response.statusText,
                }
              : {},
          },
        },
        {
          targetOrigin: messageEvent.origin,
        },
      );
    }
  }

  private async handleBridgeCallApi(message: MiniAppBridgeMessageApi<any>) {
    const resourceName = message.params.resource.name;

    if (!MINI_APP_API_RESOURCES.includes(resourceName)) {
      throw new Error(`Unknown resource name: ${resourceName}`);
    }

    const bridge = this[resourceName as keyof MiniAppResourceMap];
    return await bridge.handleApi(message);
  }
}
