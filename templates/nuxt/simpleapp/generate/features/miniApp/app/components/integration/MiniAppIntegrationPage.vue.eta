<template>
  <title>{{ miniApp?.name }} - {{ t("miniAppLang.miniApp") }}</title>
  <LoadingLine :loading="isFetching" />

  <div
    v-if="miniApp && !_.isEmpty(miniApp)"
    class="p-8 max-w-4xl mx-auto mb-10 space-y-4"
  >
    <div class="flex items-start">
      <img :src="miniApp.logo" class="size-16 mr-8 object-contain" />

      <div class="space-y-1">
        <h1 class="text-3xl font-bold mb-1">{{ miniApp.name }}</h1>
        <div class="text-gray-400 text-sm flex items-center gap-2">
          <div class="flex items-center gap-2">
            <i class="pi pi-user" />
            <span>{{ miniApp.author.team ?? miniApp.author.name }}</span>
          </div>
          <span>|</span>
          <div>v {{ miniApp.version }}</div>

          <div
            v-if="!_.isEmpty(miniApp.access.requiredPlans)"
            class="flex items-center gap-2"
          >
            <span>|</span>
            <span
              v-for="permission in miniApp.access.requiredPlans ?? []"
              class="px-3 py-0.5 bg-slate-100 text-surface-500 font-semibold text-xs rounded uppercase"
            >
              {{ permission }}
            </span>
          </div>
          <div v-else class="flex items-center gap-2">
            <span>|</span>
            <span
              v-for="permission in ['lite', 'pro', 'enterprise']"
              class="px-3 py-0.5 bg-slate-100 text-surface-500 font-semibold text-xs rounded uppercase"
            >
              {{ permission }}
            </span>
          </div>
        </div>
        <p class="text-gray-600">{{ miniApp.intro.description }}</p>

        <div class="flex items-center gap-1">
          <template
            v-for="[feature, enabled] in Object.entries(
              miniApp.integration.enabled,
            )"
          >
            <span
              v-if="enabled"
              class="px-3 py-0.5 bg-primary-50 text-primary-500 font-semibold text-xs rounded uppercase"
            >
              {{ t(`miniAppLang.integrationFeature.${feature}`) }}
            </span>
          </template>

          <ButtonText
            v-if="!_.isEmpty(miniApp.integration.scopes)"
            class="!text-primary-500 hover:!underline !text-sm !font-medium"
            @click="() => (isShowScopeDialog = true)"
          >
            {{ t("miniAppLang.integrationFeature.scopes") }}
          </ButtonText>
        </div>
      </div>
    </div>

    <div class="space-y-6">
      <template v-if="$miniAppStore.isFetchingInstalledMiniApps">
        <div class="flex items-center h-10">
          <i class="pi pi-spinner animate-spin" />
        </div>
      </template>
      <MiniAppPermissionWrapper
        v-else
        :validation="$miniAppStore.validation('miniAppFeature')"
      >
        <div class="flex items-center space-x-2">
          <template v-if="$miniAppStore.isMiniAppInstalled(miniApp.code)">
            <!-- Installed -->
            <MiniAppPermissionWrapper
              :validation="$miniAppStore.validation('uninstall')"
              class="!mt-0"
            >
              <ButtonDefault
                :label="t('miniAppLang.uninstallApp')"
                :loading="isAppInstallationInProgress"
                :disabled="isAppInstallationInProgress"
                @click="handleUninstallApp"
              />
            </MiniAppPermissionWrapper>

            <MiniAppPermissionWrapper
              v-if="$miniAppStore.hasSettingPage(miniApp)"
              :validation="$miniAppStore.validation('updateSetting')"
              class="!mt-0"
            >
              <ButtonSecondary
                :label="t('miniAppLang.openSetting')"
                :disabled="isAppInstallationInProgress"
                icon="pi pi-cog"
                @click="handleOpenSetting"
              />
            </MiniAppPermissionWrapper>
          </template>
          <template v-else>
            <!-- Not yet install -->
            <MiniAppPermissionWrapper
              :validation="$miniAppStore.validation('install')"
              class="!mt-0"
            >
              <ButtonPrimary
                :label="t('miniAppLang.installApp')"
                :loading="isAppInstallationInProgress"
                :disabled="isAppInstallationInProgress"
                @click="handleInstallApp"
              />
            </MiniAppPermissionWrapper>
          </template>
        </div>
      </MiniAppPermissionWrapper>

      <div v-if="miniApp.intro.previewImages.length > 0">
        <h2 class="text-xl font-semibold mb-2">Overview:</h2>
        <div class="card flex justify-center py-4">
          <Galleria
            :value="miniApp.intro.previewImages"
            :numVisible="5"
            containerStyle="max-width: 640px"
            :showThumbnails="false"
            :showIndicators="true"
          >
            <template #item="slotProps">
              <img
                :src="slotProps.item"
                :alt="miniApp.name"
                style="width: 100%; display: block"
              />
            </template>
          </Galleria>
        </div>
      </div>

      <div>
        <h2 class="text-xl font-semibold mb-2">Key Features:</h2>
        <div class="mt-6 space-y-2 text-gray-700">
          <div
            v-for="feature in miniApp.intro.features"
            :key="feature.title"
            class="flex space-x-2"
          >
            <div>âœ…</div>
            <div>
              <div>
                <span class="font-semibold">{{ feature.title }}</span> -
                {{ feature.description }}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Dialog
      v-model:visible="isShowScopeDialog"
      :modal="true"
      maximizable
      :header="t('scopes')"
      class="!w-1/2 !h-2/3"
    >
      <div class="mb-8">
        {{ t("miniAppLang.scopeDescription") }}
      </div>
      <div class="space-y-3">
        <div
          v-for="(scopeList, resourceName) in scopes"
          class="bg-slate-100 rounded-lg px-4 py-3 space-y-2"
        >
          <div class="font-semibold">
            {{ t(resourceName.toLowerCase()) }}
          </div>

          <div class="grid grid-cols-2 gap-2">
            <div v-for="scope in scopeList" class="space-x-2 text-sm">
              <i class="pi pi-check text-primary-500" />
              <span>{{ _.startCase(scope) }}</span>
            </div>
          </div>
        </div>
      </div>
    </Dialog>
  </div>
  <div v-else>
    <template v-if="!isFetching">
      <NodataLarge
        :label="t('noDataFound')"
        :icon="UndrawNodata"
        class="my-24"
      />
    </template>
  </div>
</template>

<script setup lang="ts">
import _, { min } from "lodash";
import { MiniAppDetail } from "~/simpleapp/generate/openapi";
import MiniAppPermissionWrapper from "../MiniAppPermissionWrapper.vue";
import UndrawNodata from "~/components/icon/UndrawNodata.vue";

const props = defineProps<{
  miniApp?: MiniAppDetail;
  isFetching: boolean;
  isAppInstallationInProgress: boolean;
}>();

const emits = defineEmits<{
  (e: "installApp"): void;
  (e: "uninstallApp"): void;
  (e: "openSetting"): void;
  (e: "upgradePlan"): void;
}>();

const isShowScopeDialog = ref(false);

const scopes = computed(() => {
  if (!props?.miniApp?.integration?.scopes) {
    return {};
  }

  const grouped: Record<string, string[]> = {};

  for (const item of props?.miniApp?.integration?.scopes) {
    const [prefix, suffix] = item.split(".");
    if (!grouped[prefix]) {
      grouped[prefix] = [];
    }
    grouped[prefix].push(suffix);
  }

  return grouped;
});

function handleInstallApp() {
  emits("installApp");
}

function handleUninstallApp() {
  emits("uninstallApp");
}

function handleOpenSetting() {
  emits("openSetting");
}
</script>
