/**
 * This file was automatically generated by simpleapp generator during initialization.
 * DO NOT MODIFY IT BY HAND.
 * last change 2023-09-09
 * author: Ks Tan
 */

 
import axios, {AxiosResponse} from 'axios';
import { getServerSession } from '#auth'
import type { Session } from 'next-auth';

export default defineEventHandler(async (event) => {
    type additionalprops = {accessToken?:string} 
    let session:any=null    
    
    try {
        session = await getServerSession(event)
        
    } catch (error) {
        return sendRedirect(event, '/login', 401)
    }

    if(!session) {
        throw createError({ statusMessage: 'Unauthorized', statusCode: 401 })
    }
    // console.log("------hihi------")
    const seperateSymbol = '.';
    // const seperateSymbol = '&';
    const xOrg = event.context.params?.xorg ?? ''
    const documentLink = event.context.params?._ ?? ''
    const accessToken = session?.accessToken;
    
    let forwardData: any = {};

    const req = event.node.req;

    if(req.method == 'POST' || req.method == 'PUT') {

        forwardData = await readBody(event);
    } else {
        forwardData = getQuery(event);
    }

    const frontEndRes = event.node.res;
    const url = process.env.SIMPLEAPP_BACKEND_URL + '/' + documentLink;
    // console.warn('backend server-----',req.method,url,forwardData)
    const axiosConfig: any = {
        method: req.method,
        url: url,
        headers: {
            Authorization: `Bearer ${accessToken}`,
            'X-Org': xOrg,
        },
        data: forwardData,
        params: forwardData,
    }
    

    const result = await axios(axiosConfig).then((res) => {           
        frontEndRes.statusCode = res.status;
        if(res.statusText) {
            frontEndRes.statusMessage = res.statusText;
        }            
        return res.data           
    }).catch((error:any) => {
        
        if (error.response?.status && error.response.status == '401') {
            return sendRedirect(event, '/login', 401)
        }
        else{
            return createError({ 
                statusCode: error.response.data.statusCode, 
                statusMessage: "Invalid data",
                data:error.response.data,
                
            })
        }
    })

    return result
})