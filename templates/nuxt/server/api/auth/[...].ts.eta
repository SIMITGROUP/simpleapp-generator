/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { NuxtAuthHandler } from "#auth";
import KeycloakProvider from "next-auth/providers/keycloak";


export default NuxtAuthHandler({
    secret: process.env.AUTH_SECRET_KEY,
    jwt: {
        maxAge: 60 * 60 * 24 * 30,
    },
    providers: [
        
        // @ts-expect-error
        KeycloakProvider.default({
            clientId: process.env.OAUTH2_CLIENTID ?? "",
            clientSecret: process.env.OAUTH2_CLIENTSECRET ?? "",
            issuer: process.env.OAUTH2_CONFIGURL,
            idToken: true,
            scheme: "oauth2",
            endpoints: {
                authorization: `${process.env.OAUTH2_CONFIGURL}/protocol/openid-connect/auth`,
                userInfo: `${process.env.OAUTH2_CONFIGURL}/protocol/openid-connect/userinfo`,
                token: `${process.env.OAUTH2_CONFIGURL}/protocol/openid-connect/token`,
                logout:
                    `${process.env.OAUTH2_CONFIGURL}/protocol/openid-connect/logout?redirect_uri=` +
                    encodeURIComponent(String(process.env.APP_URL)),
            },
            // accessTokenUrl: `${process.env.OAUTH2_CONFIGURL}/protocol/openid-connect/token`,
            // requestTokenUrl: `${process.env.OAUTH2_CONFIGURL}/protocol/openid-connect/token`,
            // profileUrl: `${process.env.OAUTH2_CONFIGURL}/protocol/openid-connect/userinfo`,
            token: {
                property: "access_token",
                type: "Bearer",
                name: "Authorization",
                maxAge: 60 * 60 * 24,
            },
            refreshToken: {
                property: "refresh_token",
                maxAge: 60 * 60 * 24 * 30,
            },
            responseType: "code",
            grantType: "authorization_code",
            scope: ["openid", "profile", "email"],
            codeChallengeMethod: "S256",
            redirect: {
                logout: "/",
                callback: "/",
                home: "/",
            },
        }),
    ],
    pages: {
        signIn: "/login",
    },
    callbacks: {
        async jwt({ token, account }) {
            if (account) {
                token.accessToken = account.access_token;
            }
            return token;
        },
        async session({ session , token, user }) {
            const sessiondata:any = {...session}             
            sessiondata.accessToken = <string>token.accessToken;
            return sessiondata;
        },

    },
});
