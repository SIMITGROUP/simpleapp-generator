import { Parent } from './../generate/openapi/api';
// import { Tailwind } from 'primevue/passthrough/tailwind';
import Tailwind from "primevue/passthrough/tailwind";
import _ from 'lodash'
// const Base64URL =  require('@darkwolf/base64url');

/**
 * This file was automatically generated by simpleapp generator during initialization.
 * DO NOT MODIFY IT BY HAND.
 * last change 2023-09-09
 * author: Ks Tan
 */
import { defineNuxtPlugin } from "#app";
import axios, { Axios, AxiosResponse } from 'axios'
import PrimeVue from "primevue/config";

import { GlobaluserDoc } from "../simpleapp/GlobaluserDoc";
import { UserDoc } from "../simpleapp/UserDoc";

import SimpleAppAutocomplete from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppAutocomplete.vue'
import SimpleAppAutocompletemulti from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppAutocompletemulti.vue'
import SimpleAppCalendar from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppCalendar.vue'
import SimpleAppCheckbox from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppCheckbox.vue'
import SimpleAppChip from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppChip.vue'
import SimpleAppColor from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppColor.vue'
// import SimpleAppEditor from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppEditor.vue'
import SimpleAppForm from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppForm.vue'
import SimpleAppList from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppList.vue'
import SimpleAppListmulti from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppListmulti.vue'
import SimpleAppNumber from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppNumber.vue'
import SimpleAppPassword from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppPassword.vue'
import SimpleAppRadio from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppRadio.vue'
import SimpleAppRating from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppRating.vue'
import SimpleAppSelect from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppSelect.vue'
import SimpleAppSelectmulti from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppSelectmulti.vue'
import SimpleAppSlider from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppSlider.vue'
import SimpleAppSwitch from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppSwitch.vue'
import SimpleAppText from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppText.vue'
import SimpleAppTextarea from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppTextarea.vue'
import SimpleAppValue from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppValue.vue'
import SimpleFieldContainer from '@simitgroup/simpleapp-vue-component/src/components/SimpleFieldContainer.vue'
import SimpleAppDatatable from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppDatatable.vue'
import SimpleAppInputTable from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppInputTable.vue'
import SimpleAppDynamicInput from '@simitgroup/simpleapp-vue-component/src/components/SimpleAppDynamicInput.vue'

import mitt from 'mitt'
import ToastService from 'primevue/toastservice';
import ConfirmationService from 'primevue/confirmationservice';
import Tooltip from 'primevue/tooltip';
//import Quill from 'quill'
const emitter = mitt()



export default defineNuxtPlugin((nuxtApp) => {
    //const { csrf } = useCsrf()    
    //axios.defaults.headers.common = {"CSRF-TOKEN": csrf};
    const myaxios = axios.create()
    myaxios.interceptors.response.use((response) => response, (error) => {
      if(error.response.status==401){
        console.error("sso session expired, redirect to logout page")
        const { signOut } = useAuth();
        signOut({redirect:false});
      }else{
        return Promise.reject(error)
      }
    });
    nuxtApp.vueApp.use(PrimeVue, { ripple: true,Tailwind:true, pt: Tailwind});
    nuxtApp.vueApp
    /*
    .component("SimpleAppAutocomplete",SimpleAppAutocomplete)
    .component("SimpleAppAutocompletemulti",SimpleAppAutocompletemulti)
    .component("SimpleAppCalendar",SimpleAppCalendar)
    .component("SimpleAppCheckbox",SimpleAppCheckbox)
    .component("SimpleAppChip",SimpleAppChip)
    .component("SimpleAppColor",SimpleAppColor)
    // .component("SimpleAppEditor",SimpleAppEditor) // not suitable, will cause problem in ssr mode
    .component("SimpleAppForm",SimpleAppForm)
    .component("SimpleAppList",SimpleAppList)
    .component("SimpleAppListmulti",SimpleAppListmulti)
    .component("SimpleAppNumber",SimpleAppNumber)
    .component("SimpleAppPassword",SimpleAppPassword)
    .component("SimpleAppRadio",SimpleAppRadio)
    .component("SimpleAppRating",SimpleAppRating)
    .component("SimpleAppSelect",SimpleAppSelect)
    .component("SimpleAppSelectmulti",SimpleAppSelectmulti)
    .component("SimpleAppSlider",SimpleAppSlider)
    .component("SimpleAppSwitch",SimpleAppSwitch)
    .component("SimpleAppText",SimpleAppText)
    .component("SimpleAppTextarea",SimpleAppTextarea)
    .component("SimpleAppValue",SimpleAppValue)
    .component("SimpleFieldContainer",SimpleFieldContainer)
    .component("SimpleAppDatatable",SimpleAppDatatable)
    .component("SimpleAppDynamicInput",SimpleAppDynamicInput)
    .component("SimpleAppInputTable",SimpleAppInputTable)
    */
    //.component("Quill",Quill)  // cause problem in ssr mode
    .use(ToastService)
    .use(ConfirmationService)
    .directive('tooltip', Tooltip)
    ;

type profiledata ={
  tenantId: number
  orgId: number
  branchId: number
  email: string
  ssoId: string
  fullName: string
  xOrgList: any[]
  group:string,
  roles:string[]
}

const useUserStore = defineStore('userstore', {
  state: ()=>({        
    tenantId:ref(0),
    orgId:ref(0),
    branchId:ref(0),
    ssoId: ref(''),
    email: ref(''),
    fullName: ref(''),
    roles:ref([]),
    group:ref(''),
    xOrgList:ref([])
  }),
  
  actions:{    
    async loadRemoteUserInfo(){
      const userdoc = new UserDoc();
      return await userdoc.getApi().getUseInfo().then((res:AxiosResponse)=>{
        this.tenantId = res.data.tenantId
        this.orgId = res.data.orgId
        this.branchId = res.data.branchId
        this.ssoId = res.data.ssoId
        this.email = res.data.email
        this.fullName = res.data.fullName
        this.xOrgList = res.data.xOrgList
        this.group = res.data.group
        this.roles = res.data.roles
        return Promise.resolve(true)
      }).catch((err)=>{
        if(err.response.status==401){
          console.error("Unauthorise, redirect to login")
        }else{
          console.error("Unknown error,", err.response)
        }
      })            
    },
    getCurrentXorg(){
      const currentxorg = useRoute().params.xorg ?? ''
      return _.find(this.xOrgList,{xorg:currentxorg})
    },
    getUserInfo(){
      return {
        tenantId : this.tenantId,
        orgId : this.orgId,
        branchId : this.branchId,
        ssoId : this.ssoId,
        email : this.email,
        fullName : this.fullName,        
        xOrgList:this.xOrgList,
        roles:this.roles,
        group:this.group,
        
      }
    }
  }
  
})

    return {
        provide: {
          event: emitter.emit, // Will emit an event
          listen: emitter.on, // Will register a listener for an event
          axios: myaxios,
          userstore:useUserStore
          // base64url: Base64URL
        }
    }
    //other components that you need
});
