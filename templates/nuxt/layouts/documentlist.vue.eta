<script setup lang="ts">
/**
* This file was automatically generated by simpleapp generator during initialization.
 * DO NOT MODIFY IT BY HAND.
 * last change 2023-09-09
 * author: Ks Tan
 */
import { FilterMatchMode } from 'primevue/api';
import Column from 'primevue/column';
import {ref} from 'vue'
import _ from 'lodash'
import { SimpleAppClient } from  '../simpleapp/generate/clients/SimpleAppClient' //'../SimpleAppClient';
import Dialog from 'primevue/dialog';
import {SearchBody,CellSetting} from '~/types'
    const {$listen} = useNuxtApp()  
    const defaultlist:CellSetting[] = []
    const recordlist = ref([]);
    
    const metas = useRoute().meta
    const documentName = ref(String(metas.documentName))
    const tablecolumns = ref<CellSetting[]>([]) 
    const sorts = metas.sorts as string[][]

    const filters = ref({
        'global': {value: null, matchMode: FilterMatchMode.CONTAINS},
    });
//     onNuxtReady(()=>{
//         console.log("Listen ReloadLayout")
//         $listen('ReloadLayout',(screenname)=>{
//             console.log("Reload layout",screenname)
//             // const metas = useRoute().meta
//             // renderLayout()

            
//         })
    
//     })
    provide('refreshLayout',(docname:string)=>{
        console.log("refresh layout:",docname)
    })
//     onMounted(()=>{
//         console.log("On Mounted at layout")
        
//     })
    let obj = getDocument(documentName.value)
//       console.log("obj",obj)
//     const data = obj?.getReactiveData()
//     const disabled=ref(false)
    
//     const documentTitle =  _.upperFirst(documentName)

// // const props = defineProps<{
// //     document:SimpleAppClient<any,any>
// //     listColumns:string[]
// //     path:string
// //     title:string
// //     sorts?: any
// // }>()

    
    

//     const route = useRoute()
    
//     const popuptitle = ref("New "+documentTitle)
//     const systemwindows = ref(false)
//     const currentjsonschema:any = obj?.getSchema()

    
//     const recordId = computed(()=>route.params.id)
//     const setNew = computed(()=>route.query.new)

//     const updateVisible = () =>{  
//         console.log("UpdateVisible")
//         if(recordId.value || setNew.value){
//         visible.value = true
//         }else{
//         visible.value = false
//         }
//     }
//     watch(route,(a,b)=>{
//         console.log('watch route change',a,b)
//     },{deep:true})
    
//     watch(recordId,()=>{  
//     updateVisible()
//     })
//     watch(setNew,()=>{  
//     updateVisible()
//     })

    const refresh = async() => {
        tablecolumns.value= !useRoute().meta.columns ? [] : useRoute().meta.columns as CellSetting[] 
        documentName.value = String(useRoute().meta.documentName)
        const searchbody: SearchBody = {
            fields: tablecolumns.value.concat(['created']),
            sorts:  metas.sorts as string[][]
        }
        obj = getDocument(documentName.value)

        obj?.search(searchbody).then((res:any) => {    
            recordlist.value = res;
            // disabled.value=false
        });
    };
    
    onNuxtReady(()=>{
        refresh() 
        // updateVisible()
    })

    const renderLayout =()=>{
        const metas = useRoute().meta
        // console.log(obj?.getDocName(),'==',data)
        // if(obj?.getDocName()==data.documentName){
        //     console.log("Refresh now")
        //     refresh()
        // }
    }

watch(()=> useRoute().meta ,(newvalue,oldvalue)=>{
    refresh()
})

   


</script> 
<template>
    <div>

        <HeaderBar />
        <Invitation/>      
         <SimpleAppDatatable :value="recordlist" :columns="tablecolumns" :title="documentName"> 
            <template #toolbar>
                <div class="w-full text-left">
                    <slot>
                        undefine page content
                    </slot>                     
                </div>                
            </template>
            <template #additionaltoolbar>
                <Button class="bg-secondary-600 hover:bg-secondary-400 text-white" @click="refresh()" type="button" >Refresh</Button>                                                                            
            </template>
            <Column header=" ">
                <template #body="{index,data}">
                    <NuxtLink :to="getDocumentUrl(String(useRoute().meta.documentName),data._id)">
                        <Button icon="pi pi-pencil" class="bg-primary-600 hover:bg-primary-400 text-white" >Edit</Button>
                    </NuxtLink>            
                </template>
            </Column>
        </SimpleAppDatatable>  
        <!--      
        <DebugDocumentData v-model="data"/>
        -->
        <!-- <Dialog v-model:visible="visible"
                :pt="{root:{class:'w-full h-full'}}"  
                modal :header="documentName" 
                :autoZIndex="false" 
                @update:visible="exitRecord"                
                >                 
          <slot></slot>        
        </Dialog>  -->
        
    </div>    
</template>
