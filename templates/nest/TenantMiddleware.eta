import { Injectable, NestMiddleware, Scope } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';
// import * as jwt from 'nestjs-jwt'

import { UserProvider } from './UserProvider';
// import {KeycloakConfigService} from "../keycloak/keycloak.service"
@Injectable({
  scope: Scope.REQUEST,
})
export class TenantMiddleware implements NestMiddleware {
  use(req: Request, res: Response, next: NextFunction) {
    if (req.baseUrl == '/oauth2-redirect.html') {
      next();
      return;
    }
    if (!req.headers['authorization']) {
      return res.status(401).send('Undefine bearer token');
    }
    if (!req.headers['x-org']) {
      return res.status(401).send('undefine header string x-org');
    }
    const u = UserProvider.getInstance();

    try {
      u.setXorg(req.headers['x-org'].toString());
      let tokenstr: string = req.headers['authorization'];
      tokenstr = tokenstr.replace('Bearer ', '');
      u.setUserToken(tokenstr);
      next();
    } catch {
      return res.status(401).send('Invalid x-org or user info');
    }
  }
}
