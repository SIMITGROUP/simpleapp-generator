/**
 * This file was automatically generated by simpleapp generator. It is changable.
 * --remove-this-line-to-prevent-override--
 * last change 2024-03-17
 * Author: Ks Tan
 */
 
import { Module, MiddlewareConsumer, NestModule, Provider } from '@nestjs/common';
import { MongooseModule,MongooseModuleOptions } from '@nestjs/mongoose';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import {GenerateModule} from './simpleapp/simpleapp.module'
import {EnvironmentMongoSchema} from './simpleapp/maintenance/models/environment.model'
<% const nestmodules = it.configs.additionalNestModules%>
<% for(let i=0; i<nestmodules.length;i++){ %>
<%    const modulename = capitalizeFirstLetter(nestmodules[i]) %>
  import {<%= modulename %>Module } from  './<%=nestmodules[i]%>/<%=nestmodules[i]%>.module';
<%}%>
import { APP_GUARD,APP_INTERCEPTOR,APP_FILTER } from '@nestjs/core';
import { ResponseInterceptor } from './simpleapp/generate/commons/interceptors/response.interceptor'
import {
  AuthGuard,
  KeycloakConnectModule,
  ResourceGuard,
  TokenValidation,
  RoleGuard,
  PolicyEnforcementMode,
} from 'nest-keycloak-connect';
import { CustomKeycloakGuard } from './simpleapp/generate/commons/customkeycloak.guard';
import {RolesGuard} from './simpleapp/generate/commons/roles/roles.guard'
import { ConfigModule } from '@nestjs/config';
import { ServeStaticModule } from '@nestjs/serve-static';
import { join } from 'path';
import { AppResolver } from './app.resolver';
import { TenantMiddleware } from './simpleapp/generate/commons/middlewares/tenant.middleware';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { UserMongoSchema } from './simpleapp/generate/models/user.model';
import { PermissionMongoSchema } from './simpleapp/generate/models/perm.model';
import { ApiEventMongoSchema } from './simpleapp/generate/models/apievent.model';
import { EventEmitterModule } from '@nestjs/event-emitter';
import { WebhookMongoSchema } from './simpleapp/generate/models/webhook.model';


  
@Module({
  
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),
    }),
    ConfigModule.forRoot(),
    EventEmitterModule.forRoot({
  // set this to `true` to use wildcards
  wildcard: false,
  // the delimiter used to segment namespaces
  delimiter: '.',
  // set this to `true` if you want to emit the newListener event
  newListener: false,
  // set this to `true` if you want to emit the removeListener event
  removeListener: false,
  // the maximum amount of listeners that can be assigned to an event
  maxListeners: 10,
  // show event name in memory leak message when more than maximum amount of listeners is assigned
  verboseMemoryLeak: false,
  // disable throwing uncaughtException if an error event is emitted and it has no listeners
  ignoreErrors: false,
}),
    MongooseModule.forRoot(process.env.MONGO_DB_URL,{}),
    ServeStaticModule.forRoot({
      rootPath: join(__dirname, '..', 'public_html'),
      exclude: ['/api/(.*)'],
    }),
    KeycloakConnectModule.register({
      authServerUrl: process.env.OAUTH2_BASEURL,
      realm: process.env.OAUTH2_REALM,
      clientId: process.env.OAUTH2_CLIENTID,
      secret: process.env.OAUTH2_CLIENTSECRET,
      policyEnforcement: PolicyEnforcementMode.PERMISSIVE,
      tokenValidation: TokenValidation.ONLINE,
    }),
    GenerateModule,    
    
    <% for(let i=0; i<nestmodules.length;i++){ %>
    <%    const modulename = capitalizeFirstLetter(nestmodules[i]) %>
      <%= modulename %>Module,
    <%}%> 
    
    MongooseModule.forFeature([
      { name: 'User', schema: UserMongoSchema },
      { name: 'Permission', schema: PermissionMongoSchema },
      { name: 'ApiEvent', schema: ApiEventMongoSchema },
      { name: 'Webhook', schema: WebhookMongoSchema },
      { name: 'Environment', schema: EnvironmentMongoSchema },
    ]),    
      ],
  controllers: [AppController],
  providers: [
    AppService,
    CustomKeycloakGuard,
    ResourceGuard,
    AppResolver,  
    {
      provide: APP_INTERCEPTOR,
      useClass: ResponseInterceptor,  
    },
  {provide: APP_GUARD,useClass: CustomKeycloakGuard,},
    // {provide: APP_GUARD,useClass: AuthGuard,},
    {provide: APP_GUARD,useClass: ResourceGuard,},
    {provide: APP_GUARD,useClass: RolesGuard,}
  ],       
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(TenantMiddleware)
      // .exclude('/graphql')
      .exclude('/api-yaml')
      .exclude('/api-json')
      .exclude('/api')
      .forRoutes('*');
  }
}
