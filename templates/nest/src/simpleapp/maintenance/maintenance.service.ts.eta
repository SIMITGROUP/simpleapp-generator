/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2025-08-27
 * Author: Ks Tan
 */

import { BadRequestException, Injectable, InternalServerErrorException } from '@nestjs/common';
import { Model } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';
import * as dbupdate from  './dbupdate'
import * as schemas from './apischemas'
@Injectable()
export class MaintenanceService {


  constructor(@InjectModel('Environment') private sysEnvdoc: Model<schemas.Environment>) {
    
    this.initEnv()
  }

  async initEnv(){
    const res = await this.sysEnvdoc.find()
    if(res.length==0){
      const newdoc = new this.sysEnvdoc({
        systemEnable:true
      });
      await newdoc.save()    
    }
    
  }


  async getUpdates() {    
    const keys = Object.keys(dbupdate)
    const updatescripts:schemas.UpgradeScript[] = [] 
    const key =keys[0]
    // console.log(dbupdate[key]())


    keys.forEach((k)=>{
      const item = dbupdate[k]()
      if(item.execute && item.subject){
        updatescripts.push({
          id: k, 
          subject:item.subject,
          description: item.description
        })
      }
    })

    return Promise.resolve(updatescripts);
  }

  async runUpdates(versionId:string) {
    try{
      if(dbupdate[versionId]){
        const result = await dbupdate[versionId]().execute()        
        return Promise.resolve(result);
      }else{

        throw new BadRequestException(`invalid update script ${versionId}`)
      }
      
    }catch(e){
      throw new InternalServerErrorException(`Error db update (${versionId}): ${e.message}`)
    }

    
  }

  async runStopService(){
    const res = await this.sysEnvdoc.find()
    if(res.length>0){
      res[0].systemEnable=false
      res[0].save() 
    }
    return Promise.resolve(`status: ${res[0].systemEnable}`)
  }
  async runStartService(){
    const res = await this.sysEnvdoc.find()
    if(res.length>0){
      res[0].systemEnable=true
      res[0].save() 
    }
    return Promise.resolve(`status: ${res[0].systemEnable}`)
  }
}
