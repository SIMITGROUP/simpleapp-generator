/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2025-08-27
 * Author: Ks Tan
 */
import { Controller, Get, Post, Param,Logger,HttpCode } from '@nestjs/common';
import { MaintenanceService } from './maintenance.service';
import { ApiTags, ApiBody, ApiResponse, ApiOperation, ApiQuery } from '@nestjs/swagger';
import { Roles } from 'src/simpleapp/generate/commons/roles/roles.decorator';
import { Role } from 'src/simpleapp/generate/commons/roles/roles.enum';
import * as schemas from './apischemas'

@ApiTags('maintenance')
@Controller('maintenance')
@Roles(Role.SuperAdmin)
export class MaintenanceController {
  private logger = new Logger();
  constructor(private readonly maintenanceSvc: MaintenanceService) {}

  @Get('/get-updates')
  @Roles(Role.SuperAdmin)
    @ApiResponse({
    status: 200,
    description: 'Sample 200 response',
    type: [schemas.UpgradeScript],
  })
  async getUpdate() {
     const result = await this.maintenanceSvc.getUpdates();
     return result
  }

  @Post('/run-updates/:id')
  @HttpCode(200)
  @Roles(Role.SuperAdmin)
    @ApiResponse({
    status: 200,
    description: 'Sample 200 response',
    type: [String],
  })  
  async runUpdate(@Param('id') id:string) {
     const result:string = await this.maintenanceSvc.runUpdates(id);
     return result
  }

  @Post('/stop-service')
  @HttpCode(200)
  @Roles(Role.SuperAdmin)
    @ApiResponse({
    status: 200,
    description: 'Sample 200 response',
    type: [String],
  })  
  async runStopService() {
     const result:string = await this.maintenanceSvc.runStopService();
     return result
  }

  @Post('/start-service')
  @HttpCode(200)
  @Roles(Role.SuperAdmin)
    @ApiResponse({
    status: 200,
    description: 'Sample 200 response',
    type: [String],
  })  
  async runStartService() {
     const result:string = await this.maintenanceSvc.runStartService();
     return result
  }
  
}
