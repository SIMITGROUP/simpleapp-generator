import {
  Controller,
  Get,
  Put,
  Post,
  Delete,
  Body,
  Query,
  Param,
  Type,
  Res,
  HttpStatus,
  Inject,
  Injectable,
  Scope,
  Req,
  HttpException,
  Request,
} from '@nestjs/common';
import { Roles } from '../generate/commons/roles/roles.decorator';
import { Role } from '../generate/commons/roles/roles.enum';
import { ApiTags, ApiBody, ApiResponse, ApiOperation } from '@nestjs/swagger';
import { UserProfile } from '../generate/commons/user.profile';
import { ProfileService } from './profile.service';
import { AppUser } from '../generate/commons/decorators/appuser.decorator';
import { RegTenant } from './profile.types';
import { RegTenantApiSchema } from './profile.apischema';
@ApiTags('PROFILE')
@Controller('/profile')
export class ProfileController {
  constructor(private profileservice: ProfileService) {
    //console.log("init Profile Controller ")
  }

  @Get()
  @Roles(Role.Everyone)
  @ApiOperation({
    operationId: 'getProfile',
    description: 'Get current user profile',
  })
  @ApiResponse({ status: 200, type: Object, description: 'Success' })
  @ApiResponse({ status: 401, type: Object, description: 'Undefine profile' })
  async getProfile(@AppUser() appuser: UserProfile) {
    const result = await this.profileservice.getProfile(appuser);
    if (result) {
      return result;
    } else {
      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
    }
  }

  @Post()
  @Roles(Role.Everyone)
  @ApiBody({ description: 'create tenant name', type: RegTenantApiSchema })
  @ApiOperation({
    operationId: 'createTenant',
    description: 'create new tenant',
  })
  @ApiResponse({ status: 201, type: Object, description: 'Success' })
  async createTenant(
    @AppUser() appuser: UserProfile,
    @Body('tenantName') tenantName: string,
  ) {
    const result = await this.profileservice.createTenant(appuser, tenantName);
    if (result) {
      return result;
    } else {
      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
    }
  }
}
