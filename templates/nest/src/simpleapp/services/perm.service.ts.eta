/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { InjectModel } from '@nestjs/mongoose';
import { Model, PipelineStage } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { PermissionProcessor } from '../generate/processors/perm.processor';
import { Permission } from '../generate/types/perm.type';
import { UserContext } from '../generate/commons/user.context';

export { Permission } from '../generate/types/perm.type';

@Injectable()
export class PermissionService extends PermissionProcessor {
  protected strictIsolation = false;
  constructor(
    @InjectModel('Permission') mydoc: Model<Permission>,    
    ) {
    super(mydoc);
  }

  hook = async (appuser: UserContext, type: string, data?: any) => {
    switch (
      type
      //         case 'init':
      //         break;
      //         case 'beforeSearch':
      //         break;
      //         case 'afterSearch':
      //         break;
      //         case 'beforeValidation':
      //         break;
      //         case 'afterValidation':
      //         break;
      //         case 'beforeCreate':
      //         break;
      //         case 'afterCreate':
      //         break;
      //         case 'beforeUpdate':
      //         break;
      //         case 'afterUpdate':
      //         break;
      //         case 'beforeDelete':
      //         break;
      //         case 'afterDelete':
      // case 'beforeDeleteMany':
      // this.logger.log(data, 'beforeDeleteMany');
      // this.deleteMany(appuser,data)
      //   break;
      // case 'afterDeleteMany':
      // this.logger.log(data, 'afterDeleteMany', data);
      // break;

      //         break;
      //         case 'beforeFetchRecord':
      //         break;
      //         case 'afterFetchRecord':
      //         break;
      //         default:
      //         break;
    ) {
    }
    return true;
  };

  async listUser(appuser: UserContext) {
    const getallrecords: PipelineStage = { $match: {} };
    const lookupuser: PipelineStage = {
      $lookup: {
        from: 'user',
        localField: 'uid',
        foreignField: 'uid',
        as: 'user',
      },
    };
    const pipeline: PipelineStage[] = [getallrecords, lookupuser];
    const result = await this.aggregate(appuser, pipeline);
    const finalresult: any[] = [];
    for (let i = 0; i < result.length; i++) {
      const r = result[i];

      const u = r.user[0] ?? { email: 'unknownemail', fullName: 'unknown' };
      finalresult.push({
        _id: r._id,
        tenantId: r.tenantId,
        orgId: r.orgId,
        branchId: r.branchId,
        uid: r.uid,
        group: r.group,
        fullName: u.fullname,
        email: u.email,
      });
    }
    // result['user'] = result['users'][0]
    // delete result['users'][0]
    return finalresult;
  }
}
