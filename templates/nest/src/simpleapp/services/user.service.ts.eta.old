/**
 * This file was automatically generated by simpleapp generator. It is changable
 * --remove-this-line-to-prevent-override--
 * last change 2024-02-23
 * Author: Ks Tan
 */

/**
 * This file was automatically generated by simpleapp generator.
 
 * last change 2023-09-23
 * Author: Ks Tan
 */
import { InjectModel } from '@nestjs/mongoose';
import { Model, PipelineStage } from 'mongoose';
import { Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';
import { UserContext } from '../generate/commons/user.context';
import { UserProcessor } from '../generate/processors/user.processor';
//import { User,UserHooks} from '../generate/types';
import * as types from '../generate/types';
import { PermissionService } from './perm.service';
export { User } from '../generate/types';

@Injectable()
export class UserService extends UserProcessor {
  protected strictIsolation = false;

  public hooks: types.UserHooks = {};
  constructor(
    @InjectModel('User') mydoc: Model<types.User>,
    private permService:PermissionService
    ) {
    super(mydoc);
  }

  /***************************** begin x-document-api definitions *****************************************/
  async runGetPermission(
    appuser: UserContext,

    id: string,
  ) {
    const pipelines:PipelineStage[] = []

    pipelines.push({
      $match:{userId : id}
    })
    // tenantId: {type:'integer',default:1,minimum:0},
    // orgId: {type:'integer',default:1,minimum:0 },
    // branchId: {type:'integer',default:1,minimum:0 },
    // group: {type: "string"},
    // uid: {type: "string",description:"sso unique identity, which is keycloak sub"},
    // userId : {type:"string","x-foreignkey":"user", format:"uuid",description:"primary key from user" }


    // tenantId: {type:'integer',default:1,minimum:1 },
    // orgId: {type:'integer',default:1,minimum:1 },
    // branchId: {type:'integer',default:1,minimum:1 },
    // organization:{
    //   type:"object",
    //   "x-foreignkey":"organization",
    //   properties:{
    //       "_id":{"type":"string"},
    //       "code":{"type":"string"},
    //       "label":{"type":"string"},
    //       "orgId":{"type":"integer"}
    //   }
    // },
    // branchCode: {type: "string",minLength:1},
    // branchName: {type: "string",minLength:1},
    pipelines.push({ $lookup: {
      from: 'branch',
      as :'branch',
      localField:'branchId',
      foreignField:'branchId',                  
    }})
    type TmpPermissionType =  types.Permission & { branch: types.Branch[]}
    try{        
        const results = await this.permService.aggregate(appuser,pipelines) as TmpPermissionType[]        
        if(results ){
          
          const perms : types.UserPermission[] = results.map(item=>{
            const b = item.branch[0]
            console.log("b==",b)
            const perm:types.UserPermission = {
              _id:item._id,
              groups:item.groups,
              userId:item.userId,
              branchId:item.branchId,
              branch: {
                _id: b._id,
                code: b.branchCode,
                label: b.branchName,
                organization: b.organization
              }             
            }
            return perm
          })
          return perms      
        }else{
          return []
        }
    }catch(e){
      console.log("unknown error",e)
      throw new InternalServerErrorException(e)
    }
  }
  async runUpdatePermission(
    appuser: UserContext,

    id: string,

    data: types.UserPermission[],
  ) {
    return 'OK';
  }

  /***************************** end x-document-api definitions *****************************************/
}
