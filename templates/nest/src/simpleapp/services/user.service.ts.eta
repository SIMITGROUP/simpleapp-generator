/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { UserContext } from '../generate/commons/user.context';
import { Injectable } from '@nestjs/common';
import { UserProcessor } from '../generate/processors/user.processor';
import { Permission } from '../generate/types/perm.type';
import { User } from '../generate/types/user.type';

export { User } from '../generate/types/user.type';

@Injectable()
export class UserService extends UserProcessor {
  protected strictIsolation = false;
  constructor(
    @InjectModel('User') mydoc: Model<User>,
    @InjectModel('Permission') private permdoc: Model<Permission>,
  ) {
    super(mydoc);
  }

  hook = async (appuser: UserContext, type: string, data?: any) => {
    switch (type) {
      //         case 'init':
      //         break;
      //         case 'beforeSearch':
      //         break;
      //         case 'afterSearch':
      //         break;
      //         case 'beforeValidation':
      //         break;
      //         case 'afterValidation':
      //         break;
      //         case 'beforeCreate':
      //         break;
      //         case 'afterCreate':
      //         break;
      //         case 'beforeUpdate':
      //         break;
      //         case 'afterUpdate':
      //         break;
              case 'beforeDelete':
                console.log("before delete",data)
                const result = await this.permdoc.deleteMany({
                  user_id: data['data'], //delete hook data = _id
                });
                this.logger.log(result, 'user deleteHook');
              break;
      // case 'afterDelete':
        
        // break;
      //         case 'beforeFetchRecord':
      //         break;
      //         case 'afterFetchRecord':
      //         break;
      //         default:
      //         break;
    }
    return true;
  };
}
