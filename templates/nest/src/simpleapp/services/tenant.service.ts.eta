/**
 * This file was automatically generated by simpleapp generator.
 * It will not override by generator
 * last change 2023-09-23
 * Author: Ks Tan
 */

import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { TenantProcessor } from '../generate/processors/tenant.processor';
import { Tenant } from '../generate/types/tenant.type';
import { AutoincreamentService } from './autoinc.service';
import { UserContext } from '../generate/commons/user.context';
import { DocNumberFormatGenerator } from '../generate/commons/docnogenerator.service';
export { Tenant } from '../generate/types/tenant.type';

@Injectable()
export class TenantService extends TenantProcessor {
  constructor(
    @InjectModel('Tenant') mydoc: Model<Tenant>,
    private increament: AutoincreamentService,
    docnogenerator: DocNumberFormatGenerator,
  ) {
    super(mydoc,docnogenerator);
  }

  hook = async (appuser: UserContext, type: string, data?: any) => {
    switch (type) {
      //         case 'init':
      //         break;
      //         case 'beforeSearch':
      //         break;
      //         case 'afterSearch':
      //         break;
      //         case 'beforeValidation':
      //         break;
      //         case 'afterValidation':
      //         break;
      case 'beforeCreate':
        const searchresult = await this.increament.generateNextNo(
          appuser,
          'tenant',
          'tenantId',
        );
        data.tenantId = searchresult.nextno;
        data.uuid = crypto.randomUUID()
        break;
      // case 'afterCreate':
      //   console.log('this.data',data)
      // break;
      //         case 'beforeUpdate':
      //         break;
      //         case 'afterUpdate':
      //         break;
      //         case 'beforeDelete':
      //         break;
      //         case 'afterDelete':
      //         break;
      //         case 'beforeFetchRecord':
      //         break;
      //         case 'afterFetchRecord':
      //         break;
      //         default:
      //         break;
    }
    return true;
  };
}
