import { Injectable, Logger } from '@nestjs/common';
import {
  Configuration,
  ModelsDatastore,
  ModelsDatastoreDB,
  DataStore,
  NoCacheManager,
  CacheManager,
  BPMNServer,
} from './bpmn-server';
import { WorkflowDelegate } from './workflow.delegate';

let _this:WorkflowConfig  //we need another variable to access WorkflowConfig 
@Injectable()
export class WorkflowConfig {    
    constructor(private workflowdelegate:WorkflowDelegate){//inject delegate into config class

    }
    setServer(server:BPMNServer){
        //this become  Configuration object, use _this instead
        _this.workflowdelegate.setServer(server)
        return _this.workflowdelegate
    }
    getConfig(){        
        const templatesPath = __dirname + '/emailTemplates/';
        _this = this //store reference of current object into _this
        const configuration = new Configuration({           
            definitionsPath: process.env.BPMN_PATH,
            templatesPath: templatesPath,
            timers: {
                precision: 3000,
            },
            database: {
                MongoDB: {
                db_url: process.env.MONGO_DB_URL,
                db: process.env.MONGO_DB_NAME, //'bpmn'
                },
            },
            apiKey: process.env.API_KEY,
            /* Define Server Services */
            logger: function (server) {
                return new Logger();
            },
            definitions: function (server:BPMNServer) {
                return new ModelsDatastore(server);
            },
            appDelegate:_this.setServer,            
            dataStore: function (server:BPMNServer) {
                return new DataStore(server);
            },
            cacheManager: function (server:BPMNServer) {
                return new NoCacheManager(server);
            },
        });
        return configuration
    }
}