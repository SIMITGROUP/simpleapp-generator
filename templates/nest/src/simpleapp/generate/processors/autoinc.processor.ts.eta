/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-07-10
 * Author: Yong Xiang
 */
import { UserContext } from '../commons/user.context';
import * as sharelibs from '../sharelibs';
import { Injectable, Inject, InternalServerErrorException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import jsonpath from 'jsonpath';
import { Model } from 'mongoose';
import { AutoincreamentJsonSchema } from '../jsonschemas/autoinc.jsonschema';
import { SimpleAppService } from './simpleapp.processor';
import { IsolationType } from '../types';
import { DocNumberFormatGenerator } from '../commons/docnogenerator.service';
import { Autoincreament } from '../types/autoinc.type';
import { DefaultAutoincreament } from '../defaults/autoinc.default';

@Injectable()
export class AutoincreamentProcessor extends SimpleAppService<Autoincreament> {
  protected documentIdentityCode = '';
  protected documentIdentityLabel = '';

  protected foreignkeys = {};
  constructor(mydoc: Model<Autoincreament>) {
    super('AUTOINC', 'autoincreament', mydoc, IsolationType.none);
    this.setSchema(AutoincreamentJsonSchema);
    this.setData(DefaultAutoincreament(crypto.randomUUID()));
  }

  reCalculateValue(data: Autoincreament) {
    //console.log('trigger new recalculate')
  }

  async runGenerateNextNo(
    appuser: UserContext,
    collection: string,
    field: string,
  ) {
    // console.log('run generate');
    const res = await this.search(appuser, {
      collectionName: collection,
      fieldName: field,
    });
    // console.log(res)
    let data;
    if (res.length > 0) {
      // console.log("FOUND RESULT------")
      const tmp = res[0];
      const nextno = tmp.nextNo;
      data = { collectionName: collection, fieldName: field, nextno: nextno };

      // console.log('updatehere');
      
      // this.findIdThenUpdate(appuser, tmp._id, {
      //   collectionName: collection,
      //   fieldName: field,
      //   nextNo: tmp.nextNo + 1,
      // });
      // await this.doc.findByIdAndUpdate(tmp._id,{
      //   collectionName: collection,
      //   fieldName: field,
      //   nextNo: tmp.nextNo + 1,
      // })
      await this.doc.updateOne({_id:tmp._id},{
        collectionName: collection,
        fieldName: field,
        nextNo: tmp.nextNo + 1,
      })
      
    } else {
      // console.log('createupdate')
      // console.log("CREATE ROW------")
      this.data = { collectionName: collection, fieldName: field, nextNo: 2 };
      const createResult = await this.create(appuser, this.data);
      data = {
        _id: crypto.randomUUID(),
        collectionName: collection,
        fieldName: field,
        nextno: 1,
      };
    }

    return data;
  }
  /***************************** additional execute *****************************************/
}
