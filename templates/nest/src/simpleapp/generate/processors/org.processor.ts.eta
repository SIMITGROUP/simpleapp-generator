/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-07-10
 * Author: Ks Tan
 * Last Modified By: Yong Xiang
 */
import { UserContext } from '../commons/user.context';
import * as sharelibs from '../sharelibs';
import { Injectable, Inject, BadRequestException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import jsonpath from 'jsonpath';
import { Model } from 'mongoose';
import { OrganizationJsonSchema } from '../jsonschemas/org.jsonschema';
import { SimpleAppService } from './simpleapp.processor';
import { IsolationType, OrganizationHooks, KeyValue } from '../types';
import { DocNumberFormatGenerator } from '../commons/docnogenerator.service';
import { Organization } from '../types/org.type';
import { AutoincreamentService } from '../../services/autoinc.service';
import { DefaultOrganization } from '../defaults/org.default';
import {
  KeyvaluepairService,
  Keyvaluepair,
} from 'src/simpleapp/services/kvpair.service';
@Injectable()
export class OrganizationProcessor extends SimpleAppService<Organization> {
  @Inject(AutoincreamentService)
  protected increament: AutoincreamentService;
  @Inject(KeyvaluepairService)
  protected kvpairService: KeyvaluepairService;

  protected documentIdentityCode = 'orgCode';
  protected documentIdentityLabel = 'orgName';
  protected strictIsolation = false;
  protected foreignkeys = {};
  protected hooks: OrganizationHooks = {
    beforeCreate: async (appuser: UserContext, data: Organization) =>
      await this.orgBeforeCreate(appuser, data),
  };

  constructor(mydoc: Model<Organization>) {
    super('ORG', 'organization', mydoc, IsolationType.tenant);
    this.setSchema(OrganizationJsonSchema);
    this.setData(DefaultOrganization(crypto.randomUUID()));
    this.addAutoCompleteField({
      orgId: 'orgId',
    });
  }

  async orgBeforeCreate(appuser: UserContext, data: Organization) {
    const searchresult = await this.increament.runGenerateNextNo(
      appuser,
      'organization',
      'orgId',
    );
    data.orgId = searchresult.nextno;
  }
  reCalculateValue(data: Organization) {
    //console.log('trigger new recalculate')
  }

  /***************************** additional execute *****************************************/
  async runGetlogo(appuser: UserContext) {
    const logo = await this.searchLogo(appuser);
    if (logo) return logo.value;
    else return ''
  }

  async searchLogo(appuser: UserContext) {
    const keyvaluepair = await this.kvpairService.search(appuser, {
      key: 'org-'+appuser.getOrgRecordId(),
    });
    if (keyvaluepair && keyvaluepair.length > 0) return keyvaluepair[0];
    else return null;
  }
  async runUploadlogo(appuser: UserContext, data: KeyValue) {    
    const key = data.key;

    let kvdata: Keyvaluepair = await this.searchLogo(appuser);
    if (kvdata) {
      kvdata.value = data.value;
      const res = await this.kvpairService.findIdThenUpdate(
        appuser,
        kvdata._id,
        kvdata,
      );
      if (res) {
        return data.value;
      } else {
        throw new BadRequestException(`failed to update keyvalue pair ${key}`);
      }
    } else {
      kvdata = {
        _id: crypto.randomUUID(),
        key: 'org-'+appuser.getOrgRecordId(),
        value: data.value,
      };
      const res = await this.kvpairService.create(appuser, kvdata);
      if (res) {
        return data.value;
      } else {
        throw new BadRequestException(`failed to create keyvalue pair ${key}`);
      }
    }

    return ''
  }

  
}
