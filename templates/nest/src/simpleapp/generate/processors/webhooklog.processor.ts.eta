/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-07-10
 * Author: Ks Tan
 * Last Modified By: Yong Xiang
 */
import { UserContext } from '../commons/user.context';
import * as sharelibs from '../sharelibs';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import jsonpath from 'jsonpath';
import { Model } from 'mongoose';
import { WebhooklogJsonSchema } from '../jsonschemas/webhooklog.jsonschema';
import { SimpleAppService } from './simpleapp.processor';
import { IsolationType } from '../types';
import { DocNumberFormatGenerator } from '../commons/docnogenerator.service';
import { Webhooklog } from '../types/webhooklog.type';
import { DefaultWebhooklog } from '../defaults/webhooklog.default';
import { EventEmitter2, OnEvent } from '@nestjs/event-emitter';

@Injectable()
export class WebhooklogProcessor extends SimpleAppService<Webhooklog> {
  protected documentIdentityCode = '_id';
  protected documentIdentityLabel = '';

  protected foreignkeys = {};
  constructor(mydoc: Model<Webhooklog>) {
    super('WEBHOOKLOG', 'webhooklog', mydoc, IsolationType.branch);
    this.setSchema(WebhooklogJsonSchema);
    this.setData(DefaultWebhooklog(crypto.randomUUID()));
  }

  reCalculateValue(data: Webhooklog) {
    //console.log('trigger new recalculate')
    const $data = data;
  }
  @OnEvent('webhooklog.add')
  addLog(appuser: UserContext, whlog: Webhooklog) {
    const newdoc = new this.doc(whlog);
    newdoc.save();
  }

  /***************************** additional execute *****************************************/
}
