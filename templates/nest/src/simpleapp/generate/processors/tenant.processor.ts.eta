/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-07-10
 * Author: Yong Xiang
 */
import { UserContext } from '../commons/user.context';
import * as sharelibs from '../sharelibs';
import { Injectable,Inject } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import jsonpath from 'jsonpath';
import { Model } from 'mongoose';
import { TenantJsonSchema } from '../jsonschemas/tenant.jsonschema';
import { SimpleAppService } from './simpleapp.processor';
import { IsolationType ,TenantHooks} from '../types';
import { DocNumberFormatGenerator } from '../commons/docnogenerator.service';
import { TenantOwner, Tenant } from '../types/tenant.type';
import { DefaultTenantOwner, DefaultTenant } from '../defaults/tenant.default';
import { AutoincreamentService } from '../../services/autoinc.service';
@Injectable()
export class TenantProcessor extends SimpleAppService<Tenant> {
  @Inject(AutoincreamentService)
  protected increament: AutoincreamentService;
  
  protected documentIdentityCode = 'tenantId';
  protected documentIdentityLabel = 'tenantName';
  protected hooks : TenantHooks = {
    beforeCreate: async (appuser: UserContext, data: Tenant) => await this.tenantBeforeCreate(appuser,data),
  };
  
  protected foreignkeys = { user: ['$.owner._id'] };
  constructor(mydoc: Model<Tenant>) {
    super('TENANT', 'tenant', mydoc, IsolationType.none);
    this.setSchema(TenantJsonSchema);
    this.setData(DefaultTenant(crypto.randomUUID()));
  }

  reCalculateValue(data: Tenant) {
    //console.log('trigger new recalculate')
  }

  /***************************** additional execute *****************************************/
  async tenantBeforeCreate(appuser:UserContext,data:Tenant){
     const searchresult = await this.increament.runGenerateNextNo(
          appuser,
          'tenant',
          'tenantId',
        );
        data.tenantId = searchresult.nextno;        
  }    
}
