/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
import { UserContext } from '../commons/user.context';
import * as sharelibs from '../sharelibs';

import { Injectable, Inject } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import * as jsonpath from 'jsonpath';
import { Model, PipelineStage } from 'mongoose';
import { PermissionJsonSchema } from '../jsonschemas/perm.jsonschema';
import { SimpleAppService } from './simpleapp.processor';
import { IsolationType } from '../types';
import { DocNumberFormatGenerator } from '../commons/docnogenerator.service';
import { Permission } from '../types/perm.type';
import { DefaultPermission } from '../defaults/perm.default';

@Injectable()
export class PermissionProcessor extends SimpleAppService<Permission> {
  protected documentIdentityCode = '';
  protected documentIdentityLabel = '';

  protected foreignkeys = { user: ['$.userId'] };
  constructor(mydoc: Model<Permission>) {
    super('PERM', 'permission', mydoc, IsolationType.org);
    this.setSchema(PermissionJsonSchema);
    this.setData(DefaultPermission(crypto.randomUUID()));
  }

  reCalculateValue(data: Permission) {
    //console.log('trigger new recalculate')
    const jsopbj = new jsonpath['JSONPath']();
  }

  async runListUser(appuser: UserContext) {
    const getallrecords: PipelineStage = { $match: {} };
    const lookupuser: PipelineStage = {
      $lookup: {
        from: 'user',
        localField: 'uid',
        foreignField: 'uid',
        as: 'user',
      },
    };
    const pipeline: PipelineStage[] = [getallrecords, lookupuser];
    const result = await this.aggregate(appuser, pipeline);
    const finalresult: any[] = [];
    for (let i = 0; i < result.length; i++) {
      const r = result[i];

      const u = r.user[0] ?? { email: 'unknownemail', fullName: 'unknown' };
      finalresult.push({
        _id: r._id,
        tenantId: r.tenantId,
        orgId: r.orgId,
        branchId: r.branchId,
        uid: r.uid,
        group: r.group,
        fullName: u.fullname,
        email: u.email,
      });
    }
    // result['user'] = result['users'][0]
    // delete result['users'][0]
    return finalresult;
  }
  /***************************** additional execute *****************************************/
}
