/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-07-10
 * Author: Ks Tan
 * Last Modified By: Yong Xiang
 */
import { UserContext } from '../commons/user.context';
import * as sharelibs from '../sharelibs';
import { Injectable,Inject } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import jsonpath from 'jsonpath';
import { Model } from 'mongoose';
import { DocnoformatJsonSchema } from '../jsonschemas/docno.jsonschema';
import { SimpleAppService } from './simpleapp.processor';
import { IsolationType } from '../types';
import { DocNumberFormatGenerator } from '../commons/docnogenerator.service';
import { DocnoformatBranch, Docnoformat } from '../types/docno.type';
import {
  DefaultDocnoformatBranch,
  DefaultDocnoformat,
} from '../defaults/docno.default';

@Injectable()
export class DocnoformatProcessor extends SimpleAppService<Docnoformat> {
  protected strictIsolation = false;
  protected documentIdentityCode = 'docNoFormatNo';
  protected documentIdentityLabel = 'docNoFormatName';

  protected foreignkeys = { branch: ['$.branch._id'] };
  constructor(mydoc: Model<Docnoformat>) {
    super('DOCNO', 'docnoformat', mydoc, IsolationType.org);
    this.setSchema(DocnoformatJsonSchema);
    this.setData(DefaultDocnoformat(crypto.randomUUID()));
    this.addAutoCompleteField({
      default: 'default',
    });
  }

  reCalculateValue(data: Docnoformat) {
    //console.log('trigger new recalculate')
  }

  /***************************** additional execute *****************************************/
  /**
   * list document number format and prepare sample of docformat
   * @param appuser
   * @param doctype
   * @returns
   */
  async runListDocFormats(appuser: UserContext, doctype: string) {
    doctype = doctype.toUpperCase();
    const searchresult = await this.search(
      appuser,
     { docNoType: doctype,'branch.branchId':appuser.getBranchId() },
     undefined,
     {default:'desc'}
    );
    //console.log('searchresult',searchresult);
    let data: any = [];
    for (let i = 0; i < searchresult.length; i++) {
      const s = searchresult[i];
      if (s.active && s.docNoPattern) {
        data.push({
          _id: s._id,
          docNoFormatNo: s.docNoFormatNo,
          docNoFormatName: s.docNoFormatName,
          docNoPattern: s.docNoPattern,
          nextNumber: s.nextNumber,
          default: s.default,
          sample: DocNumberFormatGenerator.previewDocNo(s),
        });
      }
    }
    return data;
  }
}
