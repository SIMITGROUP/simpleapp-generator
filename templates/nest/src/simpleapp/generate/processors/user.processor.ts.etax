/**
 * This file was automatically generated by simpleapp generator.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and regenerate this file.
 * last change 2023-09-23
 * Author: Ks Tan
 */
import {Base64URL} from "@darkwolf/base64url"
import { UserProvider } from '../commons/providers/UserProvider'
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import {UserJsonSchema } from '../jsonschemas/user.jsonschema'
import { SimpleAppService,IsolationType,HookType } from '../commons/SimpleAppService';
import {  UserBranchesBranch,  UserBranches,  User,  }  from '../types/user.type';

@Injectable()
export class UserProcessor extends SimpleAppService<User>  {
  protected documentIdentityCode='ssoId'
  protected documentIdentityLabel='email'
    constructor(mydoc: Model<User>) {
    super('user','user',mydoc,IsolationType.tenant);
    this.setSchema(UserJsonSchema)
    
        
  }


   reCalculateValue(){
    console.log('trigger new recalculate')
    const data = this.getData()

                                                                                                               
        // process compute for 2nd level sub tables
        for(let index=0;index<data.branches.length;index++){ 
                            
                                      
                                      
                                      
                   
        } 
                                                                                                                                                                                                                  }
  /***************************** additional execute *****************************************/
    
async getUserInfo(){
    const allorgs:any[] = await this.getAllMyOrganization()
    const allxorgs = []
    // console.log('allorgs',allorgs)
    for(let i=0; i<allorgs.length; i++){
      const o = allorgs[i]
      const tenantId = o.tenantId
      const orgId=o.orgId
      
      for(let j=0; j<o.branches.length;j++){
        const b = o.branches[j]
        
        if(b.isactive == true && b.group!='' ){
          const rawxorg = tenantId+'-'+b.branch.orgId+'-'+b.branch.branchId        
          
          const tmp = {
            "orgId":b.branch.orgId,
            "orgCode":b.branch.orgCode,
            "orgName":b.branch.orgName,
            "branchName":b.branch.branchName,
            "branchCode":b.branch.branchCode,
            "branchId":b.branch.branchId,
            "xorg":Base64URL.encodeText(rawxorg)
          }
          // console.log("RES",rawxorg,tmp)
          allxorgs.push(tmp)
          
        }
      }

    }

    const u = UserProvider.getInstance()
    const userinfo = {
      tenantId: u.getTenantId(),
      orgId:u.getOrgId(),
      branchId:u.getBranchId(),
      email:u.getEmail(),
      ssoId:u.getUid(),
      fullName:u.getFullname(),
      group:u.getGroup(),
      roles:u.getRoles(),
      xOrgList:allxorgs
    }

    return userinfo
  }
}
