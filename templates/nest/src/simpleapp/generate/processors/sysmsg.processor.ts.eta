/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-07-10
 * Author: Yong Xiang
 */
import { UserContext } from '../commons/user.context';
import * as sharelibs from '../sharelibs';
import { Injectable,Inject } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import jsonpath from 'jsonpath';
import { Model } from 'mongoose';
import { SystemmessageJsonSchema } from '../jsonschemas/sysmsg.jsonschema';
import { SimpleAppService } from './simpleapp.processor';
import { IsolationType } from '../types';
import { DocNumberFormatGenerator } from '../commons/docnogenerator.service';
import { Systemmessage } from '../types/sysmsg.type';
import { DefaultSystemmessage } from '../defaults/sysmsg.default';

@Injectable()
export class SystemmessageProcessor extends SimpleAppService<Systemmessage> {
  protected documentIdentityCode = '';
  protected documentIdentityLabel = 'messageTitle';

  protected foreignkeys = {};
  constructor(mydoc: Model<Systemmessage>) {
    super('SYSMSG', 'systemmessage', mydoc, IsolationType.tenant);
    this.setSchema(SystemmessageJsonSchema);
    this.setData(DefaultSystemmessage(crypto.randomUUID()));
  }

  reCalculateValue(data: Systemmessage) {
    //console.log('trigger new recalculate')
  }

  /***************************** additional execute *****************************************/
  async runDefault(appuser: UserContext) {
    return await this.search(appuser, { uid: appuser.getUid() });
  }
  async runReadmsg(appuser:UserContext,id:string){
    const data =  await this.findById(appuser, id); 
    data.read=true
    await await this.findIdThenUpdate(appuser,id,data)
    return data
  }
  
 
}
