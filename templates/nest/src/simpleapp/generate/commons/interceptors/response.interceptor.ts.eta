
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { Model,Connection, ClientSession } from 'mongoose';
import { InjectConnection } from '@nestjs/mongoose';
import { UserProfile } from '../user.profile';
@Injectable()
export class ResponseInterceptor implements NestInterceptor {
  
    constructor(@InjectConnection() private readonly connection: Connection,){
     
      
    }
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const req = context.switchToHttp().getRequest()
    
    const usersession:UserProfile = req['sessionuser']
    const session:ClientSession =   usersession.getDBSession()
    // session.startTransaction()
      // console.log("sessionuser exists!!")
    
    const now = Date.now();
    return next
      .handle()
      .pipe(
        tap(() => {
          
          if(process.env.DRYRUN=='true'){
            console.warn("--------dryrun! roll back everything-----------")
            if(session.inTransaction())session.abortTransaction()
          }else{
            if(session.inTransaction())session.commitTransaction()
          }                            
        }),
      );
  }
}