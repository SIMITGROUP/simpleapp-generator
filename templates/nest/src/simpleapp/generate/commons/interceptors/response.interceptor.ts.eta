/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { Model,Connection, ClientSession } from 'mongoose';
import { InjectConnection,InjectModel } from '@nestjs/mongoose';
import { UserContext } from '../user.context';
import { ApiEvent } from '../../types/apievent.type';
@Injectable()
export class ResponseInterceptor implements NestInterceptor {
  
    constructor(
      @InjectConnection() private readonly connection: Connection,
      @InjectModel('ApiEvent') private apieventmodel: Model<ApiEvent>,
      ){
     
      
    }
  async intercept(context: ExecutionContext, next: CallHandler): Promise<Observable<any>> {
    const req = context.switchToHttp().getRequest()    
    const resp = context.switchToHttp().getResponse()
    const usersession:UserContext = req['sessionuser']
    const method = req['method']
    const headers = {...req['headers']}
    const ip = req['ip']
    const url = req['url']
    // let { url, method, headers, body } 
    const session:ClientSession =   usersession.getDBSession()
    const logid:string = crypto.randomUUID()    
    const starttime =new Date()

    //authorization no need
    delete headers['authorization']//='--removed--'
    const data:ApiEvent = {
      _id: logid,
      created: starttime.toISOString(),
      duration : 0,
      createdBy: usersession.getUid(),
      path: url,
      method: method,
      headers: headers,
      ip:ip,
      // data: req.body,
      statusCode:0,
      status:'D'
    }
    const eventmodel = new this.apieventmodel(data)      
    
    const eventObj = await eventmodel.save()
    
    req['eventObj']=eventObj
    return next
      .handle()
      .pipe(
        tap(async () => {
          
          const endtime =new Date()
          eventObj.isNew=false
          eventObj.statusCode=resp['statusCode']
          eventObj.updated = endtime.toISOString()
          eventObj.status="OK"
          eventObj.duration =  endtime.getTime() - starttime.getTime()
          const result = await eventObj.save()//({_id:logid},{statusCode:resp['statusCode']})
          // console.log("result===",logid,result)
          
          if(process.env.DRYRUN=='true'){
            console.warn("--------dryrun! roll back everything-----------")
            if(session.inTransaction())session.abortTransaction()
          }else{
            if(session.inTransaction())session.commitTransaction()
          }                            
        }),
      );
  }
}