/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-03-17
 * Author: Ks Tan
 */
import {
  Injectable,
  NestMiddleware,
  Logger,
  Scope,
  Inject,
  BadRequestException,
} from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Connection } from 'mongoose';
// import * as mongoose from 'mongoose';
import { User } from '../../types/user.type';
import { Permission } from '../../types/perm.type';
import { InjectConnection } from '@nestjs/mongoose';

const Base64URL = require('@darkwolf/base64url');
// import * as jwt from 'nestjs-jwt'

import { UserContext } from '../user.context';
import { ApiKeyService } from '../libs/apiKeyService.service';
// import {KeycloakConfigService} from "../keycloak/keycloak.service"
@Injectable()
export class TenantMiddleware implements NestMiddleware {
  protected defaultxorg = Base64URL.encodeText('0-0-0');
  protected excludeXorgs = ['/profile', '/profile/tenant', '/profile/session'];
  protected publicUrl = [
    '/profile/login',
    '/profile/logout',
    '/profile/renew-token',
  ];
  protected logger = new Logger();
  protected transController;
  constructor(
    @Inject(ApiKeyService) private apikeyService,
    @InjectModel('User') private readonly usermodel: Model<User>,
    @InjectModel('Permission') private readonly permmodel: Model<Permission>,
  ) {}

  requireXorg(baseurl: string): boolean {
    // console.log('requireXorg')
    for (let i = 0; i < this.excludeXorgs.length; i++) {
      if (baseurl.includes(this.excludeXorgs[i])) {
        this.logger.verbose('requireXorg = false');
        return false;
      }
    }
    // console.log("Require xorg")
    return true;
  }
  async use(req: Request, res: Response, next: NextFunction) {
    const toUrl = req.baseUrl;

    if (toUrl == '/oauth2-redirect.html') {
      next();
      return;
    }
    const u = new UserContext(this.usermodel, this.permmodel);

    if (toUrl == '/graphql') {
      let tokenstr: string = req.headers['authorization'] ?? '';
      tokenstr = tokenstr.replace('Bearer ', '');
      const xorg = req.headers['x-org'] ?? this.defaultxorg;
      if (tokenstr) {
        await u.setCurrentUserInfo(tokenstr, xorg);
      }
      req['sessionuser'] = u;
      next();
      return;
    }
    this.logger.debug(`running TenantMiddleware for ${req.baseUrl}`);
    try {
    //if APIKEY defined, and there is api key and secret supplied. use robot user
    
      if (req.headers['x-api-key'] &&req.headers['x-api-secret']) {
        if (await this.apikeyService.verifyTenantId(req)) {
          u.setAsStaticUser(
            '00000000-0000-0000-0000-000000000000',
            'robot',
            'Robot',
            'robot@a.org',
            req.headers['x-org'] ?? this.defaultxorg,
          );
          if (req.headers['x-guest-accesstoken']) {
            u.setGuestToken(<string>req.headers['x-guest-accesstoken']);
          }
          req['sessionuser'] = u;
          next();
          return;
        } else{
          throw new BadRequestException('invalid x-api-key/x-api-secret');
        }
      }

      if (
        this.publicUrl.includes(toUrl) ||
        toUrl.includes('/public/') ||
        toUrl.includes('/guest/')
      ) {
        next();
        return;
      }

      if (!req.headers['authorization']) {
        this.logger.log('undefine bearer token');
        return res.status(401).send('Undefine bearer token');
      }
      if (!req.headers['x-org'] && this.requireXorg(req.baseUrl)) {
        this.logger.log(
          'undefine x-org and require that at ' + req.baseUrl,
          'TenantMiddleware',
        );
        throw new BadRequestException('undefine header string x-org');
        // return res.status(401).send('undefine header string x-org');
      }
    // const session = await this.connection.startSession();
    // console.log("line 43")
    
      let tokenstr: string = req.headers['authorization'];
      tokenstr = tokenstr.replace('Bearer ', '');

      const xorg = req.headers['x-org'] ?? this.defaultxorg;
      await u.setCurrentUserInfo(tokenstr, xorg);
      if (u.getId() == '' && this.requireXorg(req.baseUrl)) {
        this.logger.log('access deny of no user:', req.baseUrl);
        return res.status(401).send('access deny');
      } else {
        if (u.getId() == '') {
          this.logger.verbose(
            `grant new user (${u.getUid()}) access ${req.baseUrl}`,
          );
        } else {
          this.logger.verbose(
            `grant user (${u.getId()}) access ${req.baseUrl}`,
          );
        }
        req['sessionuser'] = u;
        this.logger.verbose(u.getRoles());

        next();
      }
    } catch (err) {
      this.logger.error(err);
      throw new BadRequestException(err);
    }
  }
}
