import { Injectable, NestMiddleware, Logger,Scope,Inject } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import {   User,  }  from '../../types/user.type';
import {   Permission,  }  from '../../types/perm.type';

const Base64URL = require('@darkwolf/base64url');
// import * as jwt from 'nestjs-jwt'

import { UserProfile } from '../user.profile';
// import {KeycloakConfigService} from "../keycloak/keycloak.service"
@Injectable()
export class TenantMiddleware implements NestMiddleware {
  protected defaultxorg=Base64URL.encodeText('0-0-0')
  protected excludeXorgs = ['/profile', '/profile/tenant']
  protected logger = new Logger()
  constructor( 
    
    @InjectModel('User') private readonly usermodel:Model<User>,
    @InjectModel('Permission') private readonly permmodel:Model<Permission>
    ){
    
  }
  requireXorg(baseurl:string):boolean{
    // console.log('requireXorg')
    for(let i =0; i < this.excludeXorgs.length;i++){
      if(baseurl.includes(this.excludeXorgs[i])){
        this.logger.verbose("requireXorg = false")
        return false
      }
    }
    // console.log("Require xorg")
    return true
  }
  async use(req: Request, res: Response, next: NextFunction) {
    if (req.baseUrl == '/oauth2-redirect.html') {
      next();
      return;
    }
    this.logger.debug(`running TenantMiddleware for ${req.baseUrl}`)
    if (!req.headers['authorization']) {
      this.logger.log("undefine bearer token")
      return res.status(401).send('Undefine bearer token');
    }
    if (!req.headers['x-org'] && this.requireXorg(req.baseUrl)) {
      this.logger.log("undefine x-org and require that at "+req.baseUrl,"TenantMiddleware")
      return res.status(401).send('undefine header string x-org');
    }
    const u = new UserProfile(this.usermodel,this.permmodel)
    // console.log("line 43")
    try {
      let tokenstr: string = req.headers['authorization'];
      tokenstr = tokenstr.replace('Bearer ', '');
      
      const xorg = req.headers['x-org']?? this.defaultxorg
      this.logger.verbose("reading jwt token")

      await u.setCurrentUserInfo(tokenstr,xorg)      
      if(u.getId()=='' && this.requireXorg(req.baseUrl)){        
        this.logger.warn("access deny of no user:", req.baseUrl)
        return res.status(401).send('access deny');  
      }else{
        if(u.getId()==''){
          this.logger.debug(`grant new user (${u.getUid()}) access ${req.baseUrl}`)
        }else{
          this.logger.debug(`grant user (${u.getId()}) access ${req.baseUrl}`)
        }
        req['sessionuser'] = u
        this.logger.debug(u.getRoles())

        next();
      }
      
    } catch(err) {
      this.logger.warn("invalid xorg or user info")
      this.logger.error(err)
      return res.status(401).send('Invalid x-org or user info');
    }
  }
}
