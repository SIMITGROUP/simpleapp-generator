/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-03-17
 * Author: Ks Tan
 */

import Base64URL from '@darkwolf/base64url';
import { BadRequestException, Injectable, Logger, NestMiddleware } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { NextFunction, Request, Response } from 'express';
import { Model } from 'mongoose';
import { Permission } from '../../types/perm.type';
import { User } from '../../types/user.type';
import { Appintegration } from '../../types/appintegration.type';
import { Webhook } from '../../types';
import { UserContext } from '../user.context';

@Injectable()
export class TenantMiddleware implements NestMiddleware {
  protected defaultXOrg = Base64URL.encodeText('0-0-0');

  protected excludeXOrgPaths = ['/profile', '/profile/tenant', '/profile/session'];

  private readonly logger = new Logger(this.constructor.name);

  constructor(
    @InjectModel('User') private readonly userModel: Model<User>,
    @InjectModel('Permission') private readonly permModel: Model<Permission>,
    @InjectModel('Appintegration') private readonly appModel: Model<Appintegration>,
    @InjectModel('Webhook') private readonly webhookModel: Model<Webhook>,
  ) {}

  requireXOrg(baseurl: string): boolean {
    for (let i = 0; i < this.excludeXOrgPaths.length; i++) {
      if (baseurl.includes(this.excludeXOrgPaths[i])) {
        this.logger.verbose('requireXOrg = false');
        return false;
      }
    }
    return true;
  }

  async use(req: Request, res: Response, next: NextFunction) {
    if (req.baseUrl == '/oauth2-redirect.html') {
      next();
      return;
    }

    let tokenStr: string = req.get('authorization') ?? '';
    tokenStr = tokenStr.replace('Bearer ', '');
    const xOrg = req.get('x-org') ?? this.defaultXOrg;

    const user = new UserContext(this.userModel, this.permModel, this.appModel);

    if (req.baseUrl == '/graphql') {
      if (tokenStr) {
        await user.setCurrentUserInfo(tokenStr, xOrg,this.webhookModel);
      }
      req['sessionuser'] = user;
      next();
      return;
    }
    this.logger.debug(`Running TenantMiddleware for ${req.baseUrl}`);

    // If X_APIKEY defined, and there is api key and secret supplied. use robot user
    if (process.env.X_APIKEY && req.get('x-apikey') && req.get('x-apisecret')) {
      if (req.get('x-apikey') == process.env.X_APIKEY && req.get('x-apisecret') == process.env.X_APISECRET) {
        user.setAsStaticUser('00000000-0000-0000-0000-000000000000', 'robot', 'Robot', 'robot@a.org', req.get('x-org') ?? this.defaultXOrg);
        if (req.get('x-guest-accesstoken')) {
          user.setGuestToken(req.get('x-guest-accesstoken'));
        }
        req['sessionuser'] = user;
        next();
        return;
      } else {
        this.logger.log('Invalid API Key / Secret');
        throw new BadRequestException('Invalid API Key / Secret');
      }
    }

    if (!req.get('authorization')) {
      this.logger.log('Undefine Bearer Token');
      return res.status(401).send('Undefine Bearer Token');
    }

    if (!req.get('x-org') && this.requireXOrg(req.baseUrl)) {
      this.logger.log('Undefine header X-Org and require that at ' + req.baseUrl, 'TenantMiddleware');
      throw new BadRequestException('Undefine header X-Org');
    }

    try {
      await user.setCurrentUserInfo(tokenStr, xOrg,this.webhookModel);
      if (user.getId() == '' && this.requireXOrg(req.baseUrl)) {
        this.logger.log('Access deny for user:', req.baseUrl);
        return res.status(401).send('Access deny for user');
      } else {
        if (user.getId() == '') {
          this.logger.verbose(`Grant new user (${user.getUid()}) access ${req.baseUrl}`);
        } else {
          this.logger.verbose(`Grant user (${user.getId()}) access ${req.baseUrl}`);
        }
        req['sessionuser'] = user;
        this.logger.verbose('User roles: ' + user.getRoles().join(','));

        next();
        return;
      }
    } catch (err) {
      let errorMsg: string = <string>err;
      if (err instanceof Error) {
        errorMsg = 'Code: ' + err.name + ', Msg: ' + err.message;
      }
      this.logger.error('Error set user context: ' + errorMsg);
      throw new BadRequestException(err);
    }
  }
}
