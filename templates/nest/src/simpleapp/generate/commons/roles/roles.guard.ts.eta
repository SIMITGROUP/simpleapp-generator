/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-03-17
 * Author: Ks Tan
 */
import {
  Injectable,
  Inject,
  CanActivate,
  ExecutionContext,
  Scope,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Role } from './roles.enum';
import { ROLES_KEY } from './roles.decorator';
import { UserContext } from '../user.context';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    let sessionuser:UserContext 
    if (context.getType() == 'http') {
      const request = context.switchToHttp().getRequest();
      sessionuser = request['sessionuser'];
    } else if (context.getArgs()[2]) {
      const req = context.getArgs()[2].req;
      sessionuser = req['sessionuser'];
    }
    
    if (!requiredRoles) {
      return true;
    }

    const roles = sessionuser.getRoles();
    if (!roles) {
      return false;
    }
    const result = requiredRoles.some((role) => roles.includes(role));

    return result;
    // return true
  }
}
