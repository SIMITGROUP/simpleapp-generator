
import { Injectable, Inject, CanActivate, ExecutionContext, Scope } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Role } from './roles.enum'
import { ROLES_KEY } from './roles.decorator'
import { UserProvider } from '../providers/UserProvider';

@Injectable({scope:Scope.REQUEST})
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector,@Inject('UserProvider') private userprovider:UserProvider) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    
    if (!requiredRoles) {
      return true;
    }
    const roles = this.userprovider.getRoles()
    const result = requiredRoles.some((role) => roles.includes(role));
    return result
    // return true
  }
}