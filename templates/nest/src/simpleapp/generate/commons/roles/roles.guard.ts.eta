
import { Injectable, Inject, CanActivate, ExecutionContext, Scope } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Role } from './roles.enum'
import { ROLES_KEY } from './roles.decorator'
import { UserProfile } from '../user.profile';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    const sessionuser = context.switchToHttp().getRequest()['sessionuser']
    
    if (!requiredRoles) {
      return true;
    }
    const roles = sessionuser.getRoles()
    const result = requiredRoles.some((role) => roles.includes(role));
    return result
    // return true
  }
}