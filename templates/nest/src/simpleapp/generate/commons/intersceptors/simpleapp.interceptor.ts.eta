
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { MongoTransaction } from '../db/transaction.common';
import { Model,Connection } from 'mongoose';
import { InjectConnection } from '@nestjs/mongoose';
@Injectable()
export class ResponseInterceptor implements NestInterceptor {
  
    constructor(@InjectConnection() private readonly connection: Connection,){
     console.log("implement ResponseInterceptor constructor")   
     
      
    }
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    console.log('Before...');
    const req = context.switchToHttp().getRequest()
    const transcontroller = new MongoTransaction(this.connection)
    transcontroller.startTransaction()
    if(req['sessionuser']){
      req['sessionuser'].setTransController(transcontroller)
      // console.log("sessionuser exists!!")
    }
    const now = Date.now();
    return next
      .handle()
      .pipe(
        tap(() => {
          transcontroller.abortTransaction()
          // transcontroller.commitTransaction()
          
        }),
      );
  }
}