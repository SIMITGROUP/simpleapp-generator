import {
  BadRequestException,
  Injectable,
  InternalServerErrorException,
  Logger,
  NotFoundException,
} from '@nestjs/common';
import { EventEmitter2, OnEvent } from '@nestjs/event-emitter';
import { UserContext } from './user.context';
import {
  Webhook,
  WebhookService,
} from 'src/simpleapp/services/webhook.service';
import {
  Webhookhistory,
  WebhookhistoryService,
} from 'src/simpleapp/services/webhookhistory.service';
@Injectable()
export class RunWebhookService {
  public constructor(
    private webhookService: WebhookService,
    private webhookhistoryService: WebhookhistoryService,
  ) {}
  @OnEvent('webhook')
  async loadWebhook(
    appuser: UserContext,
    documentName: string,
    actionName: string,
    data?: any,
  ) {
    let subscribeall = false;
    const webhooks = await this.webhookService.search(appuser, {
      documentName: documentName,
      active: true,
    });
    if (webhooks.length == 0) return;

    const webhook = webhooks[0];
    let subscribes: string[] = [];
    if (webhook.setting == '' || webhook.setting === undefined) {
      subscribeall = true;
    } else {
      subscribes = JSON.parse(webhook.setting);
    }

    if (subscribeall || subscribes.includes(actionName)) {
      await this.runWebHook(appuser, webhook, data);
    }
  }

  async runWebHook(appuser: UserContext, webhook: Webhook, data: any) {
    const webhookurl = webhook.url;
    const headers = { 'x-from': process.env.PROJECT_NAME };
    if (Array.isArray(webhook.headers)) {
      webhook.headers.forEach((h) => {
        headers[h.name] = h.value;
      });
    }
    const options = {
      method: webhook.requestMethod,
      body: JSON.stringify(data),
      headers: headers,
    };

    const req = await fetch(webhookurl, options);
    const statusCode = req.status;
    const body = req.body;
  }
}
