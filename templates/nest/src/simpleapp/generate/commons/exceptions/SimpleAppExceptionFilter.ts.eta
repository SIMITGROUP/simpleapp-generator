/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { HttpAdapterHost } from '@nestjs/core';
import { ClientSession } from 'mongoose';
@Catch()
export class SimpleAppExceptionFilter implements ExceptionFilter {
  constructor(
    private readonly httpAdapterHost: HttpAdapterHost) {}

  catch(exception, host: ArgumentsHost): void {
    // In certain situations `httpAdapter` might not be available in the
    // constructor method, thus we should resolve it here.
    const { httpAdapter } = this.httpAdapterHost;
    const ctx = host.switchToHttp();
    const request = ctx.getRequest<Request>();
    
    if(request['sessionuser']){
      const session:ClientSession = request['sessionuser'].getDBSession()
      if(session.inTransaction())session.abortTransaction()      
    }
    

    const responseBody = {
      message:exception.message,
      timestamp: new Date().toISOString(),      
      path: httpAdapter.getRequestUrl(ctx.getRequest()),
      error: exception.response.options?? exception.options
    };
    // console.log("exception properties", Object.getOwnPropertyNames(exception),exception.options)
   
    // console.log("exception.responseexception.response",exception)
    const finalstatus =  exception.response.status??exception.status
    const eventObj = request['eventObj']
    if(eventObj){    
      eventObj.statusCode=finalstatus
      eventObj.errMsg=responseBody.message
      const endtime =new Date()
      eventObj.updated = endtime.toISOString()
      eventObj.data = request.body
      eventObj.errData = responseBody.error
      eventObj.status="NG"
      eventObj.duration =  endtime.getTime() - new Date(eventObj.created).getTime()
      eventObj.save()
    }
    
    httpAdapter.reply(ctx.getResponse(), responseBody,finalstatus);
  }
}