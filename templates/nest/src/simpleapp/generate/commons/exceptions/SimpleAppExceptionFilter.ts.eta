import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { HttpAdapterHost } from '@nestjs/core';
import { ClientSession } from 'mongoose';
@Catch()
export class SimpleAppExceptionFilter implements ExceptionFilter {
  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}

  catch(exception, host: ArgumentsHost): void {
    // In certain situations `httpAdapter` might not be available in the
    // constructor method, thus we should resolve it here.
    const { httpAdapter } = this.httpAdapterHost;
    const ctx = host.switchToHttp();
    const request = ctx.getRequest<Request>();
    if(request['sessionuser']){
      const session:ClientSession = request['sessionuser'].getDBSession()
      if(session.inTransaction())session.abortTransaction()      
    }
    

    const responseBody = {
      message:exception.message,
      timestamp: new Date().toISOString(),      
      path: httpAdapter.getRequestUrl(ctx.getRequest()),
      error: exception.response.options?? exception.options
    };
    // console.log("exception properties", Object.getOwnPropertyNames(exception),exception.options)
   
    // console.log("exception.responseexception.response",exception)

    
    httpAdapter.reply(ctx.getResponse(), responseBody, exception.response.status??exception.status);
  }
}