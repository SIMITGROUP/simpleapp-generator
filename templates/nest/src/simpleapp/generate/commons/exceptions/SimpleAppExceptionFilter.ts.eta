import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { HttpAdapterHost } from '@nestjs/core';

@Catch()
export class SimpleAppExceptionFilter implements ExceptionFilter {
  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}

  catch(exception: unknown, host: ArgumentsHost): void {
    // In certain situations `httpAdapter` might not be available in the
    // constructor method, thus we should resolve it here.
    const { httpAdapter } = this.httpAdapterHost;

    const ctx = host.switchToHttp();
    const request = ctx.getRequest<Request>();
    if(request['sessionuser']){
      request['sessionuser'].getDBSession().abortTransaction()      
    }
    
    const httpStatus =
      exception instanceof HttpException
        ? exception.getStatus()
        : HttpStatus.INTERNAL_SERVER_ERROR;

    const responseBody = exception
    // {
    //   statusCode: httpStatus,
    //   timestamp: new Date().toISOString(),
    //   message: exception,
    //   path: httpAdapter.getRequestUrl(ctx.getRequest()),
    // };

    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);
  }
}