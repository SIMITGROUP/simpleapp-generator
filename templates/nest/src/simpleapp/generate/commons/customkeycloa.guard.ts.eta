/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-04-17
 * Author: Ks Tan
 */
import { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { ResourceGuard } from 'nest-keycloak-connect';

@Injectable()
export class CustomKeycloakGuard implements CanActivate {
  constructor(private reflector: Reflector, private resourceGuard: ResourceGuard) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    

    //graphql no http request, exclude from capability of x-apikey
    if(request?.headers){
        const apiKey = request.headers['x-apikey'];
        const apiSecret = request.headers['x-apisecret'];
        // validate apikey and apisecret at middleware level, reach here mean approved as robot
        if (apiKey && apiSecret ) {
          return true;
        }
    }

    // If API key is not present, fall back to Keycloak authentication
    try {
      const canActivate = await this.resourceGuard.canActivate(context);
      return canActivate as boolean;
    } catch (error) {
      throw new UnauthorizedException('Invalid API key or Keycloak token');
    }
  }

  private validateApiKey(apiKey: string, apiSecret: string): boolean {    
    // Implement your API key and secret validation logic here
    // This is just a simple example
    return apiKey === 'your-valid-api-key' && apiSecret === 'your-valid-api-secret';
  }
}