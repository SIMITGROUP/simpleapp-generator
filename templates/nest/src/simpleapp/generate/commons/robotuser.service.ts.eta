/**
 * This file was automatically generated by simpleapp generator.
 * DONT CHANGE THIS FILE !!
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-03-19
 * Author: Ks Tan
 */
import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { UserContext } from 'src/simpleapp/generate/commons/user.context';
import { User } from 'src/simpleapp/services/user.service';
import { Permission } from 'src/simpleapp/services/perm.service';
const Base64URL = require('@darkwolf/base64url');
@Injectable()
export class SimpleAppRobotUserService {
  private systemAccessToken: string;
  private setToken = (token: string) => (this.systemAccessToken = token);
  private getToken = () => this.systemAccessToken;
  private expired: string;
  logger = new Logger();
  @InjectModel('User') private readonly usermodel: Model<User>;
  @InjectModel('Permission') private readonly permmodel: Model<Permission>;

  constructor() {
    this.init();
    // console.log('init SimpleAppRobotUserService');
  }

  async init() {
    // await this.refreshSystemToken();
  }
  async refreshSystemToken() {
    enum GrantType {
      'client_credentials' = 'client_credentials',
      'password' = 'password',
    }

    type KeycloakAuthModel = {
      client_id: string;
      client_secret: string;
      username: string;
      password: string;
      grant_type: GrantType;
    };

    const keycloakdata: KeycloakAuthModel = {
      client_id: process.env.OAUTH2_CLIENTID,
      client_secret: process.env.OAUTH2_CLIENTSECRET,
      username: process.env.OAUTH2_CLOUDAPI_USER,
      password: process.env.OAUTH2_CLOUDAPI_PASSWORD,
      grant_type: GrantType.password,
    };
    const body = new URLSearchParams(keycloakdata);

    const mybody = new FormData();
    mybody.append('grant_type', 'password');
    mybody.append('client_id', process.env.OAUTH2_CLIENTID);
    mybody.append('client_secret', process.env.OAUTH2_CLIENTSECRET);
    mybody.append('username', process.env.OAUTH2_CLOUDAPI_USER);
    mybody.append('password', process.env.OAUTH2_CLOUDAPI_PASSWORD);

    const ssoendpoint = `${process.env.OAUTH2_CONFIGURL}/protocol/openid-connect/token`;

    const tokens = await fetch(ssoendpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: body.toString(),
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        return data;
      });

    this.setToken(tokens.access_token);
    console.log("access token ",this.getToken())
    const nextrefresh = tokens.expires_in * 0.8;
    const appuser = this.prepareAppUser(undefined);

    // if (tokens.access_token) {
    //   setTimeout(async () => {
    //     await this.refreshSystemToken();
    //   }, nextrefresh * 1000);
    // }
  }

  prepareAppUser(data: any) {
    console.log("prepareAppUserprepareAppUser");
    const appuser = new UserContext(this.usermodel, this.permmodel);
    appuser.setAsStaticUser(
      '00000000-0000-0000-0000-000000000000',
      'robot',
      'Robot',
      'robot@a.org',
      Base64URL.encodeText('0-0-0')
    );

    const tenantId = data?.tenantId ?? 0;
    const orgId = data?.orgId ?? 0;
    const branchId = data?.branchId ?? 0;

    appuser.setXorg(appuser.generateXorg(tenantId, orgId, branchId));
    appuser.setUserToken(this.getToken());
  
    return appuser;
  }
}
