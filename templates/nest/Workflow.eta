import { BPMNClient } from "bpmn-client";
import { UserProvider } from './UserProvider';
import { Injectable } from '@nestjs/common';

export type UserTaskActorOptions={
    userId:string
    actGroups?:string[]
    actUsers?:string[]
}
@Injectable()
export class Workflow{
    private static instance: Workflow;
    server:BPMNClient

    constructor(){
        this.server= new BPMNClient(process.env.BPMN_HOST, process.env.BPMN_PORT, process.env.BPMN_API_KEY);
    }
    public static getInstance(): Workflow {
        if (!Workflow.instance) {
            Workflow.instance = new Workflow();
        }
        return Workflow.instance;
      }

    async executeWorkFlow(id: string, bpmnname: string, docstatus: string,data:any) {  
        const workflowactoroptions : UserTaskActorOptions ={
            userId:UserProvider.getInstance().getUid(),
            actGroups:[],
            actUsers:[]
        }
        var instance = await this.server.engine.start(bpmnname, data,null,workflowactoroptions);    
        const res = {instanceId:instance.id,data:instance.data,name:instance.name,status:instance.status}        
        return Promise.resolve(res);
    }
    async getMyUserTask(){        
        const uid = UserProvider.getInstance().getUid()
        const groups = UserProvider.getInstance().getGroup()
        // 'assignments.candidateUsers': User.getInstance().getUid(),
        // 'assignments.candidateGroups': User.getInstance().getGroups
        
        let anyof:any = [
            {'items.assignments.assignee':uid},            
        ]
        let usersfilter={}
        usersfilter[uid]={$in: 'items.assignments.candidateUsers'}
        anyof.push(usersfilter)
//{'data.tenantId': 1,'$or':[{
//     'items.assignments.assignee': 'b2a49a8f-a943-4814-8087-60b1ef2f304f'
// }]}
        //any of the group
        for(let i=0;i<groups.length;i++){
            const gname = groups[i]
            const tmp = {}
            tmp[gname]={ $in: 'items.assignments.candidateGroups'}
            anyof.push(tmp)
        }
        const filters = {
            'data.tenantId': UserProvider.getInstance().getTenantId(),
            '$or':anyof
        }
        console.dir(filters)

        
        // 'assignments.assignee': User.getInstance().getUid(),     
        const client = new BPMNClient(process.env.BPMN_HOST, process.env.BPMN_PORT, process.env.BPMN_API_KEY);    
        const items = await client.datastore.findItems(filters)
        let data=[]
        for(let i=0;i<items.length;i++){
            if(items[i].status=='wait'){
                data.push(items[i])
            }
        }
        return Promise.resolve(data);
      }
}