import { Injectable, Scope } from '@nestjs/common';
import Base64URL from '@darkwolf/base64url';
import  * as jwt from   'jsonwebtoken'



      

@Injectable({
  scope: Scope.REQUEST,
})
export class User {
  private static instance: User;
  protected uid: string = '';
  protected uname: string = '';
  protected email: string = '';
  protected fullname:string=''
  protected xOrg: string = '';
  protected tenantId: number = 0;
  protected orgId: number = 0;
  protected branchId: number = 0;
  protected accessrights:any = {}
  protected token:string = ''
  protected refreshtoken:string = ''
  constructor() {}
  public static getInstance(): User {
    if (!User.instance) {
      User.instance = new User();
    }
    return User.instance;
  }
  setUserToken = (tokenstr: string) => {
    const tokeninfo = jwt.decode(tokenstr)
    // realm_access: {
      //   roles: [
      //     'default-roles-simitdeveloper',
      //     'offline_access',
      //     'uma_authorization'
      //   ]
      // },
      // resource_access: { account: { roles: [Array] } },
      // scope: 'openid email profile',
      // sid: '53192f53-d4af-413b-b8d7-1e186419fe53',
      // email_verified: false,
      // name: 'kstan kstan',
      // preferred_username: 'kstan',
      // given_name: 'kstan',
      // family_name: 'kstan',
      // email: 'kstan@simitgroup.com'
    
    const u = User.getInstance()
    u.token = tokenstr
    u.uid = tokeninfo.sid;
    u.email = tokeninfo.email
    u.uname = tokeninfo.preferred_username
    u.fullname = tokeninfo.name
    u.accessrights = tokeninfo.resource_access
  };
  getInfo = () => {
    return User.getInstance();
  };
  getBranchFilter = () => {
    return {
      tenantId: User.getInstance().tenantId,
      orgId: User.getInstance().orgId,
      branchId: User.getInstance().branchId,
    };
  };
  getTenantFilter = () => {
    return { tenantId: User.getInstance().tenantId };
  };
  getOrgFilter = () => {
    return {
      tenantId: User.getInstance().tenantId,
      orgId: User.getInstance().orgId,
    };
  };

  getCreateFilter = () => {
    const u = User.getInstance();
    return {
      tenantId: u.tenantId,
      orgId: u.orgId,
      branchId: u.branchId,
      createdby: u.uid,
      updatedby: u.uid,
      created: new Date().getTime().toString(),
      updated: new Date().getTime().toString(),
    };
  };
  getUpdateFilter = () => {
    const u = User.getInstance();
    return {
      updatedby: u.uid,
      updated: new Date().getTime().toString(),
    };
  };
  setXorg = (xorg) => {
    try {
      const decodedText: string = Base64URL.decodeText(xorg);
      const arrXorg = decodedText.split('-');

      if (arrXorg.length == 3) {
        const u = User.getInstance();
        u.tenantId = Number(arrXorg[0]);
        u.orgId = Number(arrXorg[1]);
        u.branchId = Number(arrXorg[2]);
      } else {
        throw 'invalid x-org';
      }
    } catch (err) {
      throw err;
    }
  };
}
