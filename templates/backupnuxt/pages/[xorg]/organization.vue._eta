<template>
  <!-- <div class="w-full flex-col flex"> -->
    
    <LazyFormOrganization :_id="orgId" @after="after"></LazyFormOrganization>
  <!-- </div> -->
</template>

<script setup lang="ts">
/**
 * This file was automatically generated by simpleapp generator during initialization. It is changable.
 * --remove-this-line-to-prevent-override--
 * last change 2025-03-16
 * author: Ks Tan
 */
import { FormCrudEvent } from "~/types";
import { Organization } from "~/simpleapp/generate/types";

definePageMeta({
  menuPath: "systemconfig/setting/organization",
});
// import { Branch } from "~/simpleapp/generate/openapi";
// import ConfirmPopup from "primevue/confirmpopup";
// import { useConfirm } from "primevue/useconfirm";
// import FormOrganization from "~/components/form/FormOrganization.vue";
// const confirm = useConfirm();
// const showEditOrg = ref<boolean>(false);
// const showEditBranch = ref<boolean>(false);

// const { $OrganizationDoc, $BranchDoc, $event, $listen } = useNuxtApp();

const orgId = ref('')
onMounted(() => {
  orgId.value = getUserProfile().orgRecordId
});



const after = async (actionName: FormCrudEvent, data: Organization) => {
  switch (actionName) {
    case FormCrudEvent.exit:
      // goTo(doc.getDocName());
      break;
    case FormCrudEvent.create:
      // goTo(doc.getDocName(), data._id);
      // refreshDocumentList(doc.getDocName());
      // useNuxtApp().$event("CloseDialog", doc.getDocName().toLowerCase());
      break;
    case FormCrudEvent.update:
      await reloadUserStore()
      console.log(getUserStore())
      // refreshDocumentList(doc.getDocName());
      //useNuxtApp().$event('CloseDialog',doc.getDocName().toLowerCase())
      break;
    case FormCrudEvent.delete:
      // goTo(doc.getDocName(), "new");
      // refreshDocumentList(doc.getDocName());
      // useNuxtApp().$event("CloseDialog", doc.getDocName().toLowerCase());
      // break;
  }
};
// const brancdoc = $BranchDoc();
// const data = doc.getReactiveData();
// const branchlist = ref<Branch[]>([]);
// const isReadOnly = ref(true);
// const getCurrentOrg = async () => {
//   await doc.getById(orgId.value);
//   await fetchRecord();
// };
// const fetchRecord = async () => {
//   //fetch org
//   // await doc.getById(data.value.orgId);
//   //fetch branch
//   branchlist.value = await brancdoc.search({
//     filter: { orgId: data.value.orgId },
//   });

//   console.log("reload data", branchlist);
// };

// const id = computed((): string => String(useRoute().params.id ?? ""));



// //branch record update then reload
// $listen("RefreshDocumentList", async (data) => {
//   console.log("trigger RefreshDocumentList", data);
//   if (data.documentName == "branch" || data.documentName == "organization") {
//     await fetchRecord();
//   }
// });

// const closeBranch = ()=>{
//   showEditBranch.value=false
//   goTo('organization')
// }
// const showBranchDialogIfRequired = () => {
//   if (useRoute().path.includes("/new") || id.value) showEditBranch.value = true;
// };

// const afterOrganization = (actionName: FormCrudEvent) => {
//   if (actionName == FormCrudEvent.update) {
//     showEditOrg.value = false;
//     getCurrentOrg();
//   }
// };

// watch(
//   () => useRoute().path,
//   () => showBranchDialogIfRequired(),
// );
// onMounted(() => showBranchDialogIfRequired());
// getCurrentOrg();
</script>
