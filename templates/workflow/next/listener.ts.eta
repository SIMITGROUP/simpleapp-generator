/**
 * This file was automatically generated by simpleapp generator.
 * --remove-this-line-to-prevent-override--
 * last change 2023-09-23
 * Author: Ks Tan
 */
import { Injectable,Logger } from "@nestjs/common";
import { EventEmitter2, OnEvent } from '@nestjs/event-emitter';
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { UserContext } from "../../generate/commons/user.context";
import { User } from "../../services/user.service";
import { Permission } from "../../services/perm.service";
import {SimpleAppListenerService} from './simpleapp.listener'
import {
  WorkflowSettingApiSchema,
  WorkflowDataApiSchema,
  WorkflowProcess,
  WorkflowTask,
  UserTaskActors,
  UserTaskType,
  ServiceTaskData,
  UserTaskData,
  UserTaskEventType,
  ServiceTaskEventType
} from '../../generate/workflow/workflow.type';


@Injectable()
export class <%=it.processName%>ListenerService extends SimpleAppListenerService{
    logger = new Logger()
    constructor(){      
        super()             
    }

    <%for(let i=0; i<it.elements.length;i++){%>
      <%let e=it.elements[i]%>        
      <%let datatype = e.type == "bpmn:UserTask" ? "UserTaskData" : "ServiceTaskData" %>
      
      <%if(datatype=='UserTaskData'){%>
    /**
      * Execute while user task <%= e.name%> invoked (triggered by actor to next step)
      * bpmn: <%=it.name%>, elementId: <%= e.id%>, taskName: <%= e.name%>, event: invoke
      * documentation: <%~e.documentation%> 
      * @param props
      */
      @OnEvent('<%=it.name%>.<%= e.id%>.invoke')
      async <%=`watch_${e.id}_invoke`%>(props:<%=datatype%>){
        console.log("Running listener  <%=it.name%>.<%= e.id%>.invoke",props)
      }

    /**
      * Execute while user task <%= e.name%> reach wait stage (pending actor input)
      * bpmn: <%=it.name%>, elementId: <%= e.id%>, taskName: <%= e.name%>, event: wait 
      * documentation: <%= e.documentation %> 
      * @param props
      */
      @OnEvent('<%=it.name%>.<%= e.id%>.wait')
      async <%=`watch_${e.id}_wait`%>(props:<%=datatype%>){
        console.log("Running listener  <%=it.name%>.<%= e.id%>.wait",props)
      }
      <%}else if( datatype=='ServiceTaskData'){ %>

      /**
      * Execute ServiceTask event <%= e.name%> (start)
      * bpmn: <%=it.name%>, elementId: <%= e.id%>, taskName: <%= e.name%>, event: start
      * documentation: <%=e.documentation%> 
      * @param props
      */
      @OnEvent('<%=it.name%>.<%= e.id%>.start')
      async <%=`watch_${e.id}_start`%>(props:<%=datatype%>){
        console.log("Running listener  <%=it.name%>.<%= e.id%>.start",props)
      }
      <%}%>
    <%}%>
}