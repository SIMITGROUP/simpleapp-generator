<%
  const camelToSnake = (value) => {
    return value.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  }

  const getMiniAppInfo = (module) => {
    const config = module.schema['x-simpleapp-config'];
    const resourceName = config?.resourceName ?? config.documentName;

    const pascalName = upperFirstCase(resourceName);
    const kebabName = camelToKebab(resourceName);
    const snakeName = camelToSnake(resourceName);

    const miniAppWhitelistApis = config?.miniApp?.whitelist || {};
    const hasMiniAppWhitelistedApi = Object.keys(miniAppWhitelistApis).length > 0;

    return {
      resourceName, 
      pascalName, 
      kebabName,
      snakeName,
      hasMiniAppWhitelistedApi,
      miniAppWhitelistApis,
    }
  }
%>

from .services.ui import UI
from .services.current import Current
from .services.resources.student import Student
from .services.init_message_bridge import InitMessageBridge
from .services.helper import Helper as SimtrainSdkHelper

# ========================== Import Resource ==========================

<% for (let i = 0; i < it.modules.length; i++) { %>
    <%
        const { resourceName, pascalName, kebabName, snakeName, hasMiniAppWhitelistedApi } = getMiniAppInfo(it.modules[i]);
    %>
    <% if(hasMiniAppWhitelistedApi) { %>

from .services.resources.<%= snakeName %> import <%= pascalName %>

    <% } %>
<% } %>


class SimtrainEcoMiniAppStreamlitSdk:
    def __init__(self):
        InitMessageBridge()

        self.ui = UI()

        self.current = Current()

        self.helper = SimtrainSdkHelper

        # ========================== Import Resource ==========================

        <% for (let i = 0; i < it.modules.length; i++) { %>
            <%
                const { resourceName, pascalName, kebabName, hasMiniAppWhitelistedApi } = getMiniAppInfo(it.modules[i]);
            %>
            <% if(hasMiniAppWhitelistedApi) { %>

        self.<%= resourceName %> = <%= pascalName %>()
            <% } %>
        <% } %>
