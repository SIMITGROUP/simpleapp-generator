#! /usr/bin/env node

import { error } from "console"

const program =  require("commander") // add this line
const Fieldtypes= require( './type')
const generator= require( './generate')
const fs = require( 'fs')
const  createproject =require( './createproject')
const {exec} =  require( "child_process")

const capitalizeFirstLetter= require( './libs')
const {Logger, ILogObj} = require( "tslog");

const log :typeof Logger= new Logger();

const figlet = require("figlet");
// const program = new Command();
const pj = require('../package.json')

let version=pj.version
program
  .version(version)
  .description("An simpleapp CLI tool for generate frontend (vuejs) and backend(nestjs) codes")  
  .option("-c, --config-file <value>", 'configuration file content such as:{"definationsFolder":"./definations", "backendFolder":"./nestproject/src/docs", "frontendFolder":"./nuxt/server"}')
  // .option("-s, --definations-folder <value>", "load defination files from which folder")
  // .option("-b, --backend-folder <value>", "Create backend code at which folder")
  // .option("-f, --frontend-folder <value>", "Create frontend code at which folder")
  // .option("-i, --openapi3-yaml <value>", 'openapi3.yaml generated by backend server')  
  .parse(process.argv);


const options = program.opts();
console.log(figlet.textSync(`SimpleApp Generator ${version}`));
// console.log(options)
let path=''
if(!options.configFile){
  log.error("Config file parameter is required. Example: simpleapp-generator -c ./config.json")
  throw "Undefine configuration file"
}
else if(options.configFile && options.configFile[0]=='/'){
  path=options.configFile
}
else if(options.configFile){
  path=process.cwd()+'/'+options.configFile
}else{
  log.error("undefine configuration file, use command simpleapp-generator -c <configfilename.json>")  
  throw error
}
const configs = require(path)
console.log("configurations: ",configs)
const definationsFolder = configs.definationsFolder ?? options.definationsFolder
const backendFolder = configs.backendFolder ?? options.backendFolder
const frontendFolder = configs.frontendFolder ?? options.frontendFolder
const openapi3Yaml:string = configs.openapi3Yaml ?? options.openapi3Yaml

const runGenNext = async (callback)=>{
  let isnestready=false
  if(!fs.existsSync(backendFolder)){
    console.log("Nest does not exists, begin install nodejs environment tools: [pnpm, @nestjs/cli, @openapitools/openapi-generator-cli, nuxi]")
    isnestready = await exec("npm install -g pnpm @nestjs/cli @openapitools/openapi-generator-cli nuxi",async (a,b,c)=>{
      console.log("result of environment tools:",a,b,c)
      console.log(`Install new nest backend: 'nest new -p pnpm ${backendFolder}'`)
      return await exec(`nest new -p pnpm ${backendFolder}`,(a,b,c)=>{
        console.log("new nest result",a,b,c)
        return true
      })
    })    
  }else{
    isnestready=true
  }
  
  
  
  if(isnestready){
    if(!fs.existsSync(`${backendFolder}/.env`)){
      log.info(`initial nest configuratoin for simpleapp generator`)
      await createNest(backendFolder,callback)
    }else{
      log.warn(`.env file exists, skip nest initialization`)
      callback()
    }
  }else{
    log.error('nest not ready, which shouldnot continue')
    throw error

  }
  
}
const runGenNuxt = async (callback)=>{  
  
  if(!fs.existsSync(frontendFolder)){
    log.error(`${frontendFolder} does not exists, please run "npx nuxi@latest init ${frontendFolder}"`)
  }else if(!fs.existsSync(`${frontendFolder}/.env`)){
    log.info(`initial nuxt configuratoin for simpleapp generator`)
    createNuxt(frontendFolder,callback)
  }else{
    log.warn(`.env file exists, skip nuxt initialization`)
    callback()
  }
}


const generateCode = async () =>{
  
  await runGenNext(async ()=>{  
    log.info("runGenNext (backen) done")
   await runGenNuxt( async ()=>{   
      log.info("runGenNuxt (frontend) done")
      generator.initialize(definationsFolder,backendFolder,frontendFolder)    
      exec(`cd ${frontendFolder};npx prettier --write "./pages/**/*.vue" "./simpleapp/**/*" `)
      exec(`cd ${backendFolder};npx run format `)
      if(openapi3Yaml !=''){
        
        exec(`openapi-generator-cli generate -i ${openapi3Yaml} -o ${frontendFolder}/simpleapp/openapi -g typescript-axios --skip-validate-spec`,(error, stdout, stderr)=>{  
            if(error){
              log.error(stderr);      
            } 
          });  
      }
    })
  })
  
}

log.info("generate code: ")
generateCode()



// pnpm exec prettier ./src/docs  --write
// 	pnpm exec prettier ./apiclients  --write